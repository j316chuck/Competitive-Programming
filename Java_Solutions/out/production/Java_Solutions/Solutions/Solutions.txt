* means redo

DATA STRUCTURE REPRESENTATIONS:
Graph: may have 4 coordinates surrounding, map<int, map<int, int> >, graph...
Fractions: Represent as val, mod in class
Circle: Turn into line... May need to rotate the graph...
Graph: each vertex can be DP on. reverse the graph? for shortest path of bidirectional directions
Tree: N-1 vertices = tree = special properties...
For graph problems: what type of graph is it
For segment tree problems: what do the nodes represent
For dp problems: what do the states represent

Problem: Castle
Origin: Week 6 Basic Graphs (Stanford) (Also from USACO Training Gate)
Learned: DFS, Floodfill, Java, Debugging use IntelliJ (look at where you think your code went wrong)
static variables declared outside, static class static method, Use dc, dr, array initialization etc.
copy all files onto USB, use buffered reader and writer always, no in.close, POJ = Main, USACO = class name
public class castle, adjust to the specific classes InputStream or FileWriter, copy classes to other parts!
http://poj.org/problem?id=1164

Problem: Knights
Origin: (From POJ 2488) (Stanford Lessons  Week 6 Basic Graphs #4
Learned: DFS, Floodfill, Java, Java Debugging Tool Solutions.Codeforces.A+, (1 hour DFS :D), Compile Error Logs can see on POJ
Make sure to put all ArrayList<String> for good practice, don't forget base and initialization cases (work more carefully)
Also, can simplify code by creating a path of x and y instead of using arraylist, also can simplify toString function by doing
int a - 1 + 'Solutions.Codeforces.A'; Use 2 arrays to keep track of path.
http://poj.org/problem?id=2488

Problem: Lasers (From Nick Wu)
Origin: USACO Gold 2016
Learned: @Override hashcode @Override equals HashMap, ArrayList, etc.
BFS: identify problem by same transition states, create the graph, bfs.
DFS: identify problme by small input size, create graph and iteration method, dfs/floodfill
HashMap uses .equals and .hashcode to find equal elements (must implement)
must rewrite .equals and .hashcode
If you are sure your algorithm is correct then it is often a small bug that is preventing your program from working
http://www.usaco.org/index.php?page=viewproblem2&cpid=671

Problem: Palindrome * (From Lewin Gan)
Origin: Berkeley Programming Contest 2014 Problem 2
Learned: DP 4 variables. Find all palindromes from one range to the other. Do so by using dfs and dp
https://github.com/lewin/Berkeley-Programming-Contest/blob/master/src/y2014/f2014-contest.pdf

Problem: Maxcross
Origin: USACO Silver
Learned: I can do these problems in less than 25 minutes now!!! Prefix Sums
http://usaco.org/index.php?page=viewproblem2&cpid=715

Problem: Perimeter
Origin: USACO February 2013 Gold
Learned: Use Map<int, map<int, int> > stl to solve, can use unordered map to reduce logN factor.
IMPORTANT: DFS problem = please!!!! 1. construct right graph 2. figure out whether or not you are using x, y
or r, c! 3. write the right recursive simulation 4. use do while loop if you need...
Another solution is to floodfill right outside...
Perimeter questions = dfs, bfs on inside, outside, on the edges
http://usaco.org/index.php?page=feb13problems

Problem: Tractor
Origin: USACO Feburary 2013 Gold
Learned: Union Find, can also introduce add size, size[find(x)]+=size[find(y)] [3], use comparator, use int[]
Can also do binarysearch and dfs floodfill together.. note in floodfill you can choose not to undo the floodfill
http://usaco.org/index.php?page=viewproblem2&cpid=245

Problem: SCC (on hackerearth)
Origin: https://www.hackerearth.com/practice/algorithms/graphs/strongly-connected-components/tutorial/
Learned: 1. Focus Chuck when you are solving the problem only focus on solving the problem... (everything else is secondary) #freedom
2. Add Watches to debug nice! use f7 f8 f9 ... step into step over step to next break point
3. ArrayList must declare all as List<List<Integer>> in compiler... in the runtime you can must set it equal
to ArrayList<Integer> ... also need to add new ArrayList<>
4. do not use arraylist.clear(); if you do you must make sure it's not pointing to the same object that other ones use...
5. learned kosaraju...
6. In submitting make sure to comment out the packages and the bufferedreader use the right one...

Problem: Euler's Path
Origin: None
Learned: 1. Euler's path conditions for directed and undirected graphs are different... //use for loop to find the starting points for paths vs cycles
2. Review for the next week everyday fifteen minutes...
3. Undirected = dfs, with dfs(g, res, u, curEdge). res.add(u) dfs(g, res, g[u].get(curEdge[u]++), curEdge);
4. Directed = dfs with hashset to ensure you can't use same point
5. List<Integer>[] g = new List[n+1]; syntax... syntax for ((Long) Math.min(u, v) << 32) + Math.max(u,v); << if you want u, v to be covered.
6. u, v = coding conventions, names like stack, queue, curEdges is good.

Problem: Reduction Paths (POJ 3177 Problem 6 Stanford Week 4 Graph Lessons) *
Origin: http://poj.org/problem?id=3177
Learned: Biconnected components solution... or you can do tarjan solution...
1. you can do 5000 x 5000
2. biconnected and tarjan are very similar... difference?
3. use the p, j solution from google site
4. you can look at people's solutions and understand them... missed edge case... not bi connected problem but finding bridges problem
5. you can use adjacency list to solve the question...
6. split into connected components and see how many connected components connect to more than 1 connected component...

Problem: Power Hungry Cows (POJ 1945 Problem 7 Week 4)
Origin: http://poj.org/problem?id=1945
Learned: Implement Q with arrays... The order in which you choose to add is important...
You can simplify add not count all the possibilities that don't help you arrive at your result...
memory limit... you don't have to add all of them because you only need to get to one x, y

Problem: POJ 3275 Ranking the Cows (Problem 8 Week 4) *
Origin: http://poj.org/problem?id=3275
Learned: https://github.com/lemonwu/icpc/tree/master/poj/problem%20from%20stanford/Basic%20Graph%20Algorithms
1. Simple dfs to solve the problem lol 2. In games with choosing least ordering think what is the maximum number of total combinations possible
3. key observation that all unvisited points must be considered so dfs or bfs to visit all points already compared and subtract from maximum
4. Lemma that this is correct answer?

Problem: POJ 2337 (Problem 10 Week 4) *
Origin: http://poj.org/problem?id=2337
Learned: I actually got the right implementation in theory lol
1. Ask yourself in graph questions, what are the edges and nodes... dp = what are the states
2. Ask yourself what algorithm can I use to solve
3. Ask yourself what are the edge cases...
4. Edge cases = no disjoint sets
5. Disjoint sets = covers the entire graph... no forests. Use Union find algorithm to cover edge cases like aa bc cd de which have two forests. then use Euler's algorithm

Problem: POJ 1985 (Problem 9 Week 4)
Origin: http://poj.org/problem?id=1984
Learned: I actually solved it!!! (With dfs instead of supposed BFS)
1. DFS with memoization...
2. can also do with BFS
3. Ask yourself what are the nodes, edges -> algorithm -> what are the edge cases ... -> how can I memoize??? -> implement.

Problem: POJ 2186 (Problem 11 Week 4) *
Origin: https://github.com/nanwan03/poj/blob/master/2186%20Popular%20Cows.java
Learned: 1. union find does not solve everything 2. SCC -> turn into its own Acyclic Directed Graph 3. The tree with dfn[u] = 0;

Problem: ModernArt *
Origin: http://usaco.org/current/data/sol_art2_gold_open17.html
Learned: 1. Ad Hoc 2. Use stack 3. Confusing ad hoc with weird optimizations (Redo)

Problem: Bovine Genomics *
Origin: http://usaco.org/index.php?page=viewproblem2&cpid=741
Learned: Hashing with sets. Simplify to O(NM) solution. Use hashing roll over technique! i++, j++ simplification!

Problem: Codeforces 723E * (redo with legit version...)
Origin: http://codeforces.com/contest/723/status/E (Read the java solutions they are good)
1) Improve Java by reading codeforces... 2) Switch to codeforces mainly... 3) Have fun and get in flow
4) Nice observation that there must be an even # of the vertices with odd degree. 5. We can just connect all odd degrees
and then print out the euler's tour of that graph (make it directed by starting at any vertice) (make sure not to print out fake graph)
6. Good observation/trick or you can point all vertices to 0 degree :D and dfs euler's tour. 8. Or do it legitly with an edge class...

Problem: Codeforces 508D
Origin: http://codeforces.com/contest/508/status/D
Learned: 1) Yeah basically Euler's + hash function... watch out for all typical conditions...
2) 256 * 256 covers all 'Solutions.Codeforces.A' and 'a'; 3) Check in degree vs outdegree 4) dfs in unique ways!!!
5) Use fast scanner!!!

Problem: Codeforces 510C *
Origin: http://codeforces.com/problemset/problem/510/Solutions.Codeforces.C
Learned: 1) cycle algorithm 2) visited algorithm 3) you can do bfs too just check the size of the graph!!!
4) Edge case!


Problem: Codeforces 427C *
Origin: http://codeforces.com/contest/427/problem/Solutions.Codeforces.C
Learned: 1) reviewed kosaraju 2) programming is fun 3) love first 4) fast and furious
5) you can do the addition sometimes in the dfs or in the while stack!!! getting the dfs faster!!!

Problem: Codeforces 406C
Origin: http://codeforces.com/contest/787/problem/C
Reorder: 1) dfs from known point 2) memoization/dp 3) memoization with termination in for loop
4) degree of graph 5) in these types of problems determine: how to win, how to lose, etc.

Problem: AscendingNumbers
Origin: GCJ Qualification Round 2017
Learned: Trick with ascending numbers. 1 greedy observation

Problem: BathroomStalls
Origin: GCJ Qualification Round 2017
Learned: Use priority queue for small cases, can use tree optimization/greedy traversal to solve problem.
10^18 begs for binarysearch/tree solution. Tree traversal important. 

Problem: Pancakes
Origin: GCJ Qualification Round 2017
Learned: Greedy algorithm. Especially with things like flip pancake, open door, turn on light etc.

Problem: codeforces 207A
Origin: http://codeforces.com/contest/207/status/A
Learned: Segment Tree practice, interval updating, pretty simple idea.  1 - N indexed. binary search good.

Problem: codeforces 339D
Origin: http://codeforces.com/contest/339/status/D
Learned: Segment Tree Practice, Interval Update, node idea to switch between xor, 0-N-1 indexed

Problem: codeforces 459D * (good bit + segment tree problem)
Origin: http://codeforces.com/contest/459/problem/D
Learned: sum can be represented as BIT, segment tree is basically BIT, use sum effeciently! hashmap to store common values,
map -> sum all the values up using BIT.

Problem: codeforces 61E * (counting + bit)
Origin: http://codeforces.com/contest/61/problem/E
Learned: i < j < k. break into j vs i and j vs k bit tree. Use cool math and segments to find answer...
can also solve using segment tree

Problem: codeforces 409C
Origin: http://codeforces.com/contest/801/status/C
Learned: Binary search on answer!!! That is a pretty good one. Can also sort it and iteratively calculate
Name of variables is important... be clear... 100000 = binary search or sort

Problem: codeforces 409D
Learned: 1. Computational geometry cross product distance between point and line
2. In these types of problems - distance d means circle of radius d. 3. Find how to use the distance between point
and line etc... Math it out...

Problem: codeforces 380C
Learned: 1. segment tree... what do the nodes represent (what to store) 2. implementation needs to be faster
3. can also use dp 4. 2 questions basically what do nodes represent, how to join them...

____________________________________________________________________________________________________________________

Review 1 4.18.17

____________________________________________________________________________________________________________________

Problem: codeforces 408C * (Tree)
Origin: http://codeforces.com/contest/796/problem/C
Learned: 1. Work Smarter : Actually think about the question don't just brute force implement it....
2. Before every graph problem write down the graph and special characteristics about it 3. This is a tree problem
4. Tree = 1 path from one to the next... 5. thus, the maximum values are +2 +1 or +0 maxn, 6. check the 1's or 2's
7. iterate through tree to solve...

Problem: codeforces 408D * (BFS)
Origin: http://codeforces.com/contest/796/problem/D
Learned: 1. tree so there are no duplicate paths 2. you can do a simple bfs and solve this problem 3. insert all police
stations into the q. 4. pop out and visit. If visited point, this edge can be deleted. 5. sets delete to keep clearer.

Problem: codeforces 408E (DP)
Origin: http://codeforces.com/contest/796/problem/E
Learned:

Probelm: codeforces 514C * (Hashing)
Origin: http://codeforces.com/problemset/problem/514/c
Learned: Most problems that involve matching string or subtring or finding common patterns for strings can
be done with polynomial hashing or rolling hashes. 1. hash = 0 indexed create run hash function 2. watch out for indexes
3. Modular values 4. write helper functions, substring, power, hashing. 5. Can also use trie and then dfs

Problem: GCJ Round 1A A(Implementation)
Origin: GCJ
Learned: greedy implementation and fill 2d rectange. Simplify by iterating row by row with memcpy/system.arraycopy
when implementing "tricky" greedy problems... break down into subtasks and solve

Problem: GCJ Round 1A B
Origin: GCJ
Learned: Greedy solution, fractions with mod. Hashmap mapping implentation!

Problem: GCJ Round 1B B * (Implementation Problem) (*Redo and recode)
Origin: GCJ
Learned: Implementation edge cases... be faster and cleaner. 1. Use small cases to solve large cases in implementation
problems... break down tasks into smaller cases. 2. Small case edge case = one color > floor N/2 3. Else use cool partitioning
of 1 3 5 7 2 4 6 8 to make sure all RYB are distributed evenly 3. Then for big case realize that G -> Y P -> Y etc.
4. Another Observation: RGR = R!!!! RGRGRGR = R!!! 5. This means RGRBRGR = RBR = RGRGRBR so we can chain all the RGRGR together!
6. Also watch out for the edge case in the example given to you that YZYZYZ also works so have to check if they are the only couple
7. If not, reduce the problem down into -> simplest form base case where each G + 1 <= R and thus treat RGRGRRG as R and solve for small case.
8. Very beautiful solutions!!!

Problem: GCJ Round 1B C * (Shortest path)
Origin: GCJ
Learned: Floyds algorithm when n = 100 or 500 even. Big sign, distance = shortest path to all points
input between several coordinates. Big sign! rate = run floyds again wow.

Problem: Codeforces 260D (DP + Game theory + trie)
Origin: codeforces 260D
Learned: 1. DP game theory weird keep track of win and lose states 2. If can win and lose = win 3. If cannot win
then = lose 4. If cannot lose but can win = k mod 2 = 1 = win... 3. base case of trie = !win lose = true  4. win = ! win[i] i = children...

Problem: POJ 3480 (Game theory)
Origin: http://poj.org/problem?id=3480
Learned: 1. Know basic algorithms + add your own twist to it/rules 2. Les misere rules flipped the game so that last drawer losers
3. Obvious base cases if all ones then parity determines winner/loser 4. Extension of base case if all ones except 1 X then John always wins
because of the fact that he can turn x into 1 or 0 making the parity shift to his favor 5. Other than that this is a basic nim game
where xor of all numbers = 0 then John loses. This is because aside from these two base cases John or his opponent can always force them into
position 1 or position 2 by the rules of nim. 5. Rule of nim = even number of 1's

Problem: POJ 2505 (Game theory)
Origin: Poj 2505
Learned: 1. Base case 2-9 = stan 10-18 = ollie 2. Recurrence from there 3. 19-162 must be stan 163-324 = ollie... enough to find base cases...
Max and min multiplication theorem think about it.

Problem: POJ 1678 (Minimax) *
Origin: POJ 1678
Learned: 1. Classical minimax algorithm 2. Dfs + DP 3. Simplification that you can only go in the positive direction in array so no
need to binary search!!!! Make that observation 4. Sort array 5. Base case is when you have no more moves left return value
6. Need to define what the state is and what it means (look at problem for the states most likely it is the max or min value)
define more states if necessary, this stage it is not necessary 7. Recurrence relation is that you are always finding the max value...

Problem: POJ 1704 (Nim) *
Origin: http://poj.org/problem?id=1704
Learned: 1. Use difference as nim problem 2. This is because we can win like this since
taking from odd difference is equivalent to taking from original nim problem 3. Or taking from even nim
is equivalent to adding to nim!

Problem: POJ 2960 (Grundy Numbers) * (for mex implementation)
Origin: http://poj.org/problem?id=2960
Learned: 1. Classical grundy numbers 2. Grundy numbers - nim = what moves can you not go position 2 or position 3 etc.
3. Key words = multiple games/groups but sets to limit the number of moves 4. Create table first!!!
O(N) dp dfs 5. Map each heap to group :D O(1) 6. XOR nim O(1) 7. 10^8 is fine if basic dp, addition, or fill

Problem: POJ 2232 (Constructive Algorithm)
Origin: POJ 2232
Learned: 1. I actually solved it looooool 2. These problems = make observations and code keep code simple 3. With less variables
you can just name them sometimes and iterate through with if else statements to solve for all the cases < 5 4. With more variables = use maps + variables
5. Create class variables sort by counter etc. check if counter == 0 6. Observation if one then all can win 7. Observation if two then the winner can win
8. Observation if three then all can win because each chain is treated as one point and then there must be a FCS which means any body can win
among that FCS we can make any point win then we choose. Thus, we can win for all recursively

Problem: POJ 2348
Origin: POJ 2348
Learned: 1. Tricky GCD problem 2. Problems most of these = constructive recursive algorithms which you solve make key observations
3. When error = check for edge cases that you missed 4. gcd multiple base case = win for whoever gets there 5. if 2 * greater than
you can go to the less than or 1 * multiple and win 6. Else it must be a 1 x multiple so you subtract the value!!! 7. AND REPEAT!