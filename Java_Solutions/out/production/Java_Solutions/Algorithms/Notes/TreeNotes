Understand red/black tree insertion more...

Binary Search Tree
1. label, left, right
2. p < q and q < r implies p < q; this means... everything left and right = less
3. deleteMin(Node x) if (x.left == null) return x.right else x.left = deleteMin(x.left)
4. use tree == null not tree.left = null...
make sure to set the root nodes = to result x.left = recurse(x)
5. Complete Trees = every node has 0 or 2 childrens...
AND every node is as far left as possible

can have tree like 10 -> 6, 12, 6 -> 1, 1 -> 4
(note how this 4 goes to 1 not 6)

BTrees and Red Black Trees
1. Know that a 2-3 tree is also called a B-Tree of order 3
and that a 2-3-4 tree is a B-Tree of order 4.
Know that an M-node is a node with M children, e.g. a
4-node is a node containing 3 items and thus with 4 children.
2.Tree height is between logM N and log2 N.
All paths are of the same height.
3. LLRB -> 2-3 tree easy mapping just remember black links = black links in 2-3
and red links = links between multiple nodes...
4. LLRBs. BST such that no node has two red links touching it;
perfect black balance; red links lean left.
5. Red Black insertion:2 log 2N runtime;
6. Rotation!!! Make sure you know how to do
7. two red children wrong -> flip
two consecutive red links wrong rotate right flip
right red child swap and rotate left, rotate right, flip
8. EJ = J stays, E goes down with left link

A. swap colors = send up
B. ES = left right,
C. rotation = two reds in a row...

Binary Min-Heap Tree complete and obeys min-heap property
//complete: missing items only at bottom level that are to the far left ...
//min-heap: every node is less than or equal to both of its children...
//implement min heap
//heap adding = add to end of heap and swim up rightful place
//heap delete = remove the top guy and replace with last guy and sink to rightful place

tree representations =
1. Node to Children
    //1.fixed width nodes = 1, 2, 3 nodes
    //2. sibling tree node favored child, node sibling //fixed number of links
    //3. variable width node = child[] // kes -> parents ->
2. store keys in array store parentids in array
key[]keys, int[]parents;
3.  leftChild(k) = k * 2; rightChild(k) = k * 2 + 1 //leave 0 spot empty... // array of keys //must be complete
    //approach 3b for representing heaps because we know they are complete ... 2 * i + 2 * i + 1

LogN amortized... (sometimes resizes) constant get smallest
