DFS:
Conditions: Graph problem, traversals
Run Time: 100 x 100 = max usually, (can be O(n) if floodfill)
Indications: Small graph, traverse all possibilities, find all possible sequences
Other Notes: Construct graph/determine what to dfs (hard), dfs (easy), often memoize (medium), floodfill!
(You can return a value), (You can also choose to relax or not relax the recursion)...
Maze questions = dfs.
http://www.geeksforgeeks.org/applications-of-depth-first-search/
1. Cycle in dfs if and only if there is a back edge... use lowlink and tin to find back edges...
2. path finding between two vertexes.
3. topological sorting
4. bipartite graphs (color red blue red blue) and other SCC components...

BFS:
Conditions: Graph problem, traversals
Run Time: O(N) or O(NlogN) Up to 1000 x 1000
Indications:  SHORTEST PATH!!!!! indications include same transition state costs
Other Notes: Construct graph (hardest part), put into queue (easy), traverse (medium)

Topological Sort: (Note on all graph problems... you can change them to fit into other variations of graphs)
Conditions: (Directed Acyclic Graph), Graph Problem, Find a linear ordering... Can make it best ordering with dfs approach...
Run Time: O(E+V)
Indications: Given a specific ordering!!! Find a linear ordering of vertices...
Other Notes: Use queue based approach ... or you can use recursive based approach.
(February 2013 msched)

Prim:
Conditions: Can have negative weights, Cannot be directed graph!
Run Time: O(m log n) (Slower than prim)
Indications: Minimum Cost, All components (Vertices covered)! Find the minimum spanning tree, find total cost of going from point a back to point a
Other Notes: (It is a tree) V-1 edges. Union find algorithm! can do size[f(y)]+=size[f(x)]

Kruskal:
Conditions: Can have negative weights, Cannot be directed graph!
Run Time: O(n^2) or O(mlogn) on implementation
Indications: Minimum Cost, All components (Vertices covered)! Find the minimum spanning tree, find total cost of going from point a back to point a
Other Notes: Use when you can use 2d matrix!!!

Euler's Tour:
Conditions: Can be directed or undirected graph... directed graph = trickier implementation
For undirected graphs: Euler's cycle/circuit = 1. start and end on same point 2. every vertice has even degree.
For undirected graphs: Euler's path = 1. you must have 0 or 2 odd and everything else be even. 2. All vertices visited
For directed graphs: Euler's cycle = 1. All vertices must have in degree = out degree 2. All vertices must be part of a SCC.
For directed graphs: Euler's path = 1. All vertices must have in degree = out degree except two which must be 1 out degree greater than in degree by 1 (start)
and 1 in degree greater than out degree by 1 end vertex...
http://www.graph-magics.com/articles/euler.php
Use the same algorithm for directed graph as undirected because you can...
Run Time: O(V + E)
Indications: Visits all edges!!! once
Other notes: undirected graph is trickier... because you can't go back same edge twice use hashset to account for, note when visits all edges...

SCC (Kosanraju):
Conditions: Directed graph. should be cyclic, (not bidirectional)
Run Time: O(n+m) running time x 2
Indications: Find strongly connected components, connected subgraphs, how many graphs can go from one to the other
Other Notes: comes out in topological sorting

Articulation Points: (undirected and directed) (Cut vertices) (Bridge components) (Useful if you need to find ways to add to path to split it or form more complete graph)
Conditions: Works in undirected graphs (mainly) (should work in directed graph)... has applications to biconnected components (aka every two points has at least 2 paths connecting them = no articulation points)
Run time: O(n+m)
Indications: Used to find bridges, cut points, and if you need to have a tour from one point to another. aka cycle between any two points...
Other notes: Used to find bridges, cut points, and if you need to have a tour from one point to another. aka cycle between any two points...
Can be directed or undirected...
bridges: strictly greater no root so just 1. low[v] > disc[u]
cut points: 1. root condition 2. low[v] >= disc[u]
Components: biconnected graph = cur points 1. root condition 2. low[v] >= disc[u]
https://www.hackerearth.com/practice/algorithms/graphs/articulation-points-and-bridges/tutorial/

SCC (Tarjan) (directed)
Conditions: Directed graph. should be cyclic, (not bidirectional)
Run Time: O(n+m) running time
Indications: Find strongly connected components, connected subgraphs, how many graphs can go from one to the other
Other Notes: comes out in topological sorting, used to find all subcycles in a graph.

Hamiltonian Path: (if you have time in CP3)
Conditions:
Indications:


Dijstrka:
Conditions: Can be bidirectional or directed graph, cannot have negative weights!
Run Time:
Indications:
Other Notes: O(N) O(N^2) or O(NlogN)

Standard DP:
Conditions:
Run Time:
Indications:
Other Notes:

Combinatorial DP:
Conditions:
Run Time:
Indications:
Other Notes:

Interval DP:
Conditions:
Run Time:
Indications:
Other Notes: