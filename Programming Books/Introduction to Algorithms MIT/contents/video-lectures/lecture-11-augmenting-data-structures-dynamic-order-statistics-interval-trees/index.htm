<!DOCTYPE html><html lang="en">
<head>
<meta charset="utf-8">
<meta name="format-detection" content="telephone=no">
<title>Lecture 11: Augmenting Data Structures, Dynamic Order Statistics, Interval Trees | Video Lectures | Introduction to Algorithms (SMA 5503) | Electrical Engineering and Computer Science | MIT OpenCourseWare</title>
<!-- Begin Automatic Metadata Insertion --><meta content="6-046j-introduction-to-algorithms-sma-5503-fall-2005" name="WT.cg_n">
<meta content="Lecture 11: Augmenting Data Structures, Dynamic Order Statistics, Interval Trees" name="WT.cg_s">
<meta content="" name="Description">
<meta content="Leiserson, Charles" name="Author">
<meta content="Demaine, Erik" name="Author">
<meta content="algorithms,efficient algorithms,sorting,search trees,heaps,hashing,divide-and-conquer,dynamic programming,amortized analysis,graph algorithms,shortest paths,network flow,computational geometry,number-theoretic algorithms,polynomial and matrix calculations,caching,parallel computing,Algorithms and Data Structures" name="keywords">
<meta content="6.046J Introduction to Algorithms (SMA 5503) | Lecture 11: Augmenting Data Structures, Dynamic Order Statistics, Interval Trees" name="Search_Display">
<meta content="Algorithms and Data Structures" itemprop="about">
<!-- End Automatic Metadata Insertion --><link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/grid.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/base.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/menu.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/jquery.bubblepopup.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/courses.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/courses_new.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/jquery.jscrollpane.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/media_tabs.css">
<link href="http://ocw.mit.edu/xml/ocwcc.rdf" type="application/rdf+xml" rel="metadata">
<link rel="canonical" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-046j-introduction-to-algorithms-sma-5503-fall-2005/video-lectures/lecture-11-augmenting-data-structures-dynamic-order-statistics-interval-trees">
<link rel="apple-touch-icon" href="../../../common/images/apple-touch-icon.png">
<script type="text/javascript" src="../../../common/scripts/jquery.js"></script><script type="text/javascript" src="../../../common/scripts/ocw-media-utils-offline.js"></script><script type="text/javascript" src="../../../common/scripts/ocw-offline.js"></script><script type="text/javascript" src="../../../common/scripts/jquery.bubblepopup.min.js"></script><script type="text/javascript" src="../../../common/scripts/jquery-ui.min.js"></script><script type="text/javascript" src="../../../common/scripts/jquery.jscrollpane.min.js"></script><script type="text/javascript" src="../../../common/scripts/bubble-popup-offline.js"></script><script type="text/javascript">
      $(document).ready(function() {
        $("#tabs").tabs();
        IpadScroller();
      });
    </script>
</head>
<body itemscope itemtype="http://schema.org/WebPage">
        
	

        <div id="top">
			<div id="grid">
				
				
					
<div id="portletwrapper-6f63772e746f70706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d686561646572" class="portletWrapper kssattr-portlethash-6f63772e746f70706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d686561646572">
<div class="portletStaticText portlet-static-site-header">
<!--googleoff: index-->
<div class="grid_6 alpha" role="banner" id="banner"><a href="http://ocw.mit.edu/"><img class="logo" alt="MIT OpenCourseWare, Massachusetts Institute of Technology" src="../../../common/images/ocw_mast.png"></a></div>
<div class="grid_6 omega" role="form toolbar" id="subscribe">
<div class="module">
<table class="social"><tbody><tr>
<td class="socialbutton"><a href="http://ocw.mit.edu/subscribe/index.htm?utm_source=header"><img src="../../../common/images/trans.gif" alt="An icon depicting an envelope.">Subscribe to the OCW Newsletter</a></td>
            <td>
<a href="https://plus.google.com/104567381989352550847/posts"><img alt="Click to visit our Google+ page." src="../../../common/images/icon_gp.png"></a><a href="https://www.pinterest.com/mitocw/pins/"><img alt="Click to visit our Pinterest page." src="../../../common/images/icon_pin.png"></a><a href="http://facebook.com/mitocw"><img alt="Click to visit our Facebook page." src="../../../common/images/icon_fb.png"></a><a href="http://twitter.com/mitocw"><img alt="Click to visit our Twitter feed." src="../../../common/images/icon_tw.png"></a>
</td>
        </tr></tbody></table>
</div>
<p class="helplinks"><a href="http://ocw.mit.edu/help">Help</a>   |   <a href="../../../common/jsp/feedback.htm">Contact Us</a></p>
</div>
<div class="clear"> </div>
<!--googleon: index-->
</div>

</div>





<!--googleoff: index-->
<div id="mega" role="navigation" class="grid_8 alpha">        
	<ul id="menu">
<li id="menu_home">
            <a href="http://ocw.mit.edu/"><img src="../../../common/images/top-nav_home.png" class="home_icon" alt="Click for site home page."></a><!-- Begin Home Item -->
        </li>
<!-- End Home Item -->        
        <li class="selected">
            <a href="#" class="drop">Find Courses</a><!-- Begin 5 columns Item -->
            <div class="dropdown_5columns-a mega-courses">                    
                <div class="col_1a">
                    <div class="row_1a">
                        <div class="quart">
                            <h2 class="nav">Find courses by:</h2>
                            <ul class="nav-bullet find_by">
<li><a href="http://ocw.mit.edu/courses/find-by-topic/">Topic</a></li>
                                <li><a href="http://ocw.mit.edu/courses/find-by-number/">MIT Course Number</a></li>
                                <li><a href="http://ocw.mit.edu/courses/find-by-department/">Department</a></li>
                            </ul>
<ul style="margin-top: 88px;" class="nav-bullet find_by">
<li style="font-weight: normal; font-size: 1em;"><a href="http://ocw.mit.edu/courses/">View All Courses</a></li>
							</ul>
</div>
                        <div class="quart">
                            <h2 class="nav">Collections</h2>
                            <ul class="nav-bullet">
<li><a href="http://ocw.mit.edu/courses/audio-video-courses/">Audio/Video Lectures</a></li>
                                <li><a href="http://ocw.mit.edu/courses/online-textbooks/">Online Textbooks</a></li>
                                <li><a href="http://ocw.mit.edu/courses/new-courses/">New Courses</a></li>
                                <li><a href="http://ocw.mit.edu/courses/most-visited-courses/">Most Visited Courses</a></li>
                                <li><a href="http://ocw.mit.edu/courses/ocw-scholar/">OCW Scholar Courses</a></li>
                                <li><a href="http://ocw.mit.edu/courses/this-course-at-mit/">This Course at MIT</a></li>
                                <li><a href="http://ocw.mit.edu/resources/">Supplemental Resources</a></li>
                            </ul>
</div>
                        <div class="clear"> </div>
                    </div>
                    <div class="row_1b">
                        <h2 class="nav">Cross-Disciplinary Topic Lists</h2>
                        <div class="quart">
                        <ul class="nav-bullet">
<li><a href="http://ocw.mit.edu/courses/energy-courses">Energy</a></li>
                            <li><a href="http://ocw.mit.edu/courses/entrepreneurship">Entrepreneurship</a></li>
                            <li><a href="http://ocw.mit.edu/courses/environment-courses">Environment</a></li>
                        </ul>
</div>    
                        <div class="quart">
                        <ul class="nav-bullet">
<li><a href="http://ocw.mit.edu/courses/intro-programming">Introductory Programming</a></li>
                            <li><a href="http://ocw.mit.edu/courses/life-sciences">Life Sciences</a></li>
                            <li><a href="http://ocw.mit.edu/courses/transportation-courses">Transportation</a></li>
                        </ul>
</div>
                        <div class="clear"> </div>
                    </div>
                    <div class="clear"> </div>
                </div>
                <div class="col_1b">
                    <h2 class="nav">Translated Courses</h2>
                    <ul class="nav-bullet">
<li><a href="http://ocw.mit.edu/courses/translated-courses/traditional-chinese">繁體字 / Traditional Chinese</a></li>
                        <li><a href="http://ocw.mit.edu/courses/translated-courses/spanish">Español / Spanish</a></li>
                        <li><a href="http://ocw.mit.edu/courses/translated-courses/portuguese">Português / Portuguese</a></li>
                        <li><a href="http://ocw.mit.edu/courses/translated-courses/persian">فارسی / Persian</a></li>
                        <li><a href="http://ocw.mit.edu/courses/translated-courses/turkish">Türkçe / Turkish</a></li>
                        <li><a href="http://ocw.mit.edu/courses/translated-courses/korean">(비디오)한국 / Korean</a></li>
                        <li><a href="http://ocw.mit.edu/courses/translated-courses">More...</a></li>
                    </ul>
</div>
            </div>
        </li>
        <li>
            <a href="" class="drop">About</a>
            <div class="dropdown_1column-a">
                <div class="col_1">
                    <ul class="nav-bullet mega-div-bottom">
<li><a href="http://ocw.mit.edu/about/">About MIT OpenCourseWare</a></li>
                    </ul>
<ul class="nav-bullet mega-div-bottom">
<li><a href="http://ocw.mit.edu/about/site-statistics/">Site Stats</a></li>
                        <li><a href="http://ocw.mit.edu/about/ocw-stories/">OCW Stories</a></li>                        
                    </ul>
<ul class="nav-bullet">
<li><a href="http://ocw.mit.edu/about/media-coverage/">Media Coverage</a></li>
                        <li><a href="http://ocw.mit.edu/about/newsletter/">Newsletter</a></li>                        
                    </ul>
</div>
            </div>  
        </li>    
        <li>
            <a href="" class="drop">Donate</a>        
            <div class="dropdown_1column-a">
                    <div class="col_1">
                        <ul class="nav-bullet mega-div-bottom">
<li><a href="http://ocw.mit.edu/donate/">Make a Donation</a></li>
                            <li><a href="http://ocw.mit.edu/donate/why-donate/">Why Donate?</a></li>
                            <li><a href="http://ocw.mit.edu/donate/our-supporters/">Our Supporters</a></li>
                            <li><a href="http://ocw.mit.edu/donate/other-ways-to-contribute/">Other Ways to Contribute</a></li>
                            <li><a href="http://ocw.mit.edu/donate/shop-ocw">Shop OCW</a></li>
                        </ul>
<ul class="nav-bullet">
<li><a href="http://ocw.mit.edu/support/">Become a Corporate Sponsor</a></li>
                        </ul>
</div>
            </div>            
        </li>        
        <li>
            <a href="" class="drop">Featured Sites</a>        
            <div class="dropdown_1column-a">
                <div class="col_1">
                    <ul class="nav-bullet mega-div-bottom">
<li><a href="http://ocw.mit.edu/high-school/">Highlights for High School</a></li>
                        <li><a href="http://ocw.mit.edu/educator/">OCW Educator</a></li>
                        <li><a href="http://ocw.mit.edu/courses/crosslinks/">MIT Crosslinks and OCW</a></li>                        
                    </ul>
<ul class="nav-bullet mega-div-top">
<li><a href="http://ocw.mit.edu/ans7870/featured/mitx-courses-on-edx.htm">MITx Courses on edX</a></li>
                        <li><a href="http://teachingexcellence.mit.edu/">Teaching Excellence at MIT</a></li>
						<li><a href="http://www.oeconsortium.org/">Open Education Consortium</a></li>
                    </ul>
</div>
            </div>            
        </li>
    </ul>
</div>
<div id="search" role="search" class="grid_4 omega">
    
    <form method="get" action="../../../common/search/AdvancedSearch.htm">
     	 <table class="search"><tbody><tr>
<td class="black"><input type="text" onblur="fillSearchBox()" onfocus="clearSearchBox()" maxlength="255" value="Search" name="q" class="greytext searchField" id="terms"></td> 			 
                    <td class="black"><input type="image" src="../../../common/images/button_search.png" name="btnG" class="sub_button"></td>			 
                    <td class="text2"><a href="../../../common/search/AdvancedSearch.htm">Advanced<br>Search</a></td>
                </tr></tbody></table>
</form>
</div>
<div class="clear"></div>
<!--googleon: index-->
<!-- *end header* -->  

				
				
			</div>
<!-- top grid end -->
		</div>
<!-- top end -->
			
		<div id="center_media">
      	<div id="grid">
      		<div id="left">
        		<div id="breadcrumb_media">
                	<p>

    <a href="http://ocw.mit.edu/">Home</a>
    
        »
        
    
    
        
            <a href="http://ocw.mit.edu/courses">Courses</a>
            
                »
                
            
            
         
    
    
        
            <a href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science">Electrical Engineering and Computer Science</a>
            
                »
                
            
            
         
    
    
        
            <a href="../../../contents/index.htm">Introduction to Algorithms (SMA 5503)</a>
            
                »
                
            
            
         
    
    
        
            <a href="../../../contents/video-lectures/index.htm">Video Lectures</a>
            
                »
                
            
            
         
    
    
        
            
            
            Lecture 11: Augmenting Data Structures, Dynamic Order Statistics,
         
    
</p>

            	</div>
            	<div class="clear"></div>
        		<div id="media_title">
        		<h1 class="title" itemprop="name" property="dct:title">
        <span class="" id="parent-fieldname-title">
            Lecture 11: Augmenting Data Structures, Dynamic Order Statistics, Interval Trees
        </span>
    </h1>
        		</div>
           		<div class="clear"></div>
           		<div id="course_wrapper_media">
           			<div id="course_nav">
           				<script language="javascript" type="text/javascript">
function toggleMenu(objID) {
  if (!document.getElementById) return;
  var ob = document.getElementById(objID);
  ob.className = (ob.className == 'selected')?'': 'selected';
}
function toggleClass(id)
{
  var divtoggleClass= document.getElementById(id);
  divtoggleClass.className = (divtoggleClass.className == 'mO')?'mC': 'mO';
  return false;
}
function changeAlt(id)
{
  id.alt = (id.alt == 'Expand Menu')?'Collapse Menu' : 'Expand Menu';
  id.title = (id.title == 'Expand Menu')?'Collapse Menu' : 'Expand Menu';
}
</script><!--Left Nav Starts --><ul>
<li class="">
			   			<a href="../../../contents/index.htm">
		                  Course Home  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/syllabus/index.htm">
		                  Syllabus  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/calendar/index.htm">
		                  Calendar  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/readings/index.htm">
		                  Readings  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/assignments/index.htm">
		                  Assignments  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/exams/index.htm">
		                  Exams  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="selected">
			   			<a href="../../../contents/video-lectures/index.htm">
		                  Video Lectures  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    
		    
         	
	<!--second tal block close-->  
	
</ul>
<!--Left Nav Ends -->
</div>
           			<div id="course_inner_media">
      					 
        <div class="" id="parent-fieldname-text">
            
            
        </div>
    
      					 

<script type="text/javascript">var caption_embed_1 ={'English - US': '/courses/electrical-engineering-and-computer-science/6-046j-introduction-to-algorithms-sma-5503-fall-2005/video-lectures/lecture-11-augmenting-data-structures-dynamic-order-statistics-interval-trees/RHyGlha7bjE.srt'}</script><div id="media-embed">
         <div class="attention_message" id="embed_1">
<p>Flash and JavaScript are required for this feature.</p>
<p>Download the video from <a href="https://itunes.apple.com/us/itunes-u/id341597754">iTunes U</a> or the <a href="http://www.archive.org/download/MIT6.046JF05MPEG4/ocw-6.046-24oct2005-220k.mp4">Internet Archive</a>.</p>
</div>
     </div>
    
     <script type="text/javascript">ocw_embed_chapter_media('embed_1', 'http://www.youtube.com/v/RHyGlha7bjE', 'youtube', '/courses/electrical-engineering-and-computer-science/6-046j-introduction-to-algorithms-sma-5503-fall-2005/video-lectures/lecture-11-augmenting-data-structures-dynamic-order-statistics-interval-trees', 'http://img.youtube.com/vi/RHyGlha7bjE/0.jpg',0,0, 'http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-046j-introduction-to-algorithms-sma-5503-fall-2005/video-lectures/lecture-11-augmenting-data-structures-dynamic-order-statistics-interval-trees/RHyGlha7bjE.srt')</script><div id="media_resource_next_prev_nav" style="margin-top: 1em;">
        <p>
        
            <a href="../../../contents/video-lectures/lecture-10-red-black-trees-rotations-insertions-deletions/index.htm">
                <img src="../../../common/images/btn_previous_resource.png" style="margin: 0 30px 0 50px;" alt="Previous track" title="Previous track"></a>
     	
     	
        
            <a href="../../../contents/video-lectures/lecture-12-skip-lists/index.htm"> 
                <img src="../../../common/images/btn_next_resource.png" alt="Next track" title="Next track"></a>
       
       </p>
     </div>
 


<script type="text/javascript">
		window.onload=function(){
		init();
		
		}
		var tabLinks = new Array();
		var contentDivs = new Array();
		function init() {
		  // Grab the tab links and content divs from the page
		  var tabListItems = document.getElementById('tabs').childNodes;
		  for ( var i = 0; i < tabListItems.length; i++ ) {
			if ( tabListItems[i].nodeName == "LI" ) {
			  var tabLink = getFirstChildWithTagName( tabListItems[i], 'A' );
			  var id = getHash( tabLink.getAttribute('href') );
			  tabLinks[id] = tabLink;
			  contentDivs[id] = document.getElementById( id );
			}
		  }
		  // Assign onclick events to the tab links, and
		  // highlight the first tab
		  var i = 0;
		  for ( var id in tabLinks ) {
			tabLinks[id].onclick = showTab;
			tabLinks[id].onfocus = function() { this.blur() };
			if ( i == 0 ) tabLinks[id].className = 'selected';
			i++;
		  }
		  // Hide all content divs except the first
		  var i = 0;
		  for ( var id in contentDivs ) {
			if ( i != 0 ) contentDivs[id].className = 'tabContent hide';
			i++;
		  }
		}
		function showTab() {
		  var selectedId = getHash( this.getAttribute('href') );
		  // Highlight the selected tab, and dim all others.
		  // Also show the selected content div, and hide all others.
		  for ( var id in contentDivs ) {
			if ( id == selectedId ) {
			  tabLinks[id].className = 'selected';
			  contentDivs[id].className = 'tabContent';
			} else {
			  tabLinks[id].className = '';
			  contentDivs[id].className = 'tabContent hide';
			}
		  }
		  // Stop the browser following the link
		  return false;
		}
		function getFirstChildWithTagName( element, tagName ) {
		  for ( var i = 0; i < element.childNodes.length; i++ ) {
			if ( element.childNodes[i].nodeName == tagName ) return element.childNodes[i];
		  }
		}
		function getHash( url ) {
		  var hashPos = url.lastIndexOf ( '#' );
		  return url.substring( hashPos + 1 );
		}
 </script><div id="media_tabs">
     
        <ul id="tabs">
<li class="first">
                <a href="#vid_about" class="selected">About this Video</a>
            </li>
            <li class="">
                <a href="#vid_index" class="">Playlist</a>
            </li>
            <li class="">
                <a href="#vid_playlist" class="">Related Resources</a>
            </li>
            <li class="">
                <a href="#vid_related" class="">Transcript</a>
            </li>
            <li class="">
                <a href="#vid_transcript" class="">Download this Video</a>
            </li>
        </ul>
<div id="vid_about" itemprop="description" class="tabContent">
<p><strong>Topics covered:</strong> Augmenting Data Structures, Dynamic Order Statistics, Interval Trees</p>
<p><strong>Instructors:</strong> Prof. Erik Demaine, Prof. Charles Leiserson </p>
</div>
        <div id="vid_index" itemprop="description" class="tabContent hide">
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-1-administrivia-introduction-analysis-of-algorithms-insertion-sort-mergesort/index.htm">
<img src="../../../contents/video-lectures/lecture-1-administrivia-introduction-analysis-of-algorithms-insertion-sort-mergesort/6_046J_lec01_th.jpg" title="Lecture 1: Administrivia; Introduction; Analysis of Algorithms, Insertion Sort, Mergesort" alt="Lecture 1: Administrivia; Introduction; Analysis of Algorithms, Insertion Sort, Mergesort"><p>Lecture 1: Administrivia; I...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-2-asymptotic-notation-recurrences-substitution-master-method/index.htm">
<img src="../../../contents/video-lectures/lecture-2-asymptotic-notation-recurrences-substitution-master-method/6_046J_lec02_th.jpg" title="Lecture 2: Asymptotic Notation; Recurrences; Substitution, Master Method" alt="Lecture 2: Asymptotic Notation; Recurrences; Substitution, Master Method"><p>Lecture 2: Asymptotic Notat...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-3-divide-and-conquer-strassen-fibonacci-polynomial-multiplication/index.htm">
<img src="../../../contents/video-lectures/lecture-3-divide-and-conquer-strassen-fibonacci-polynomial-multiplication/6_046J_lec03_th.jpg" title="Lecture 3: Divide-and-Conquer: Strassen, Fibonacci, Polynomial Multiplication" alt="Lecture 3: Divide-and-Conquer: Strassen, Fibonacci, Polynomial Multiplication"><p>Lecture 3: Divide-and-Conqu...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-4-quicksort-randomized-algorithms/index.htm">
<img src="../../../contents/video-lectures/lecture-4-quicksort-randomized-algorithms/6_046J_lec04_th.jpg" title="Lecture 4: Quicksort, Randomized Algorithms" alt="Lecture 4: Quicksort, Randomized Algorithms"><p>Lecture 4: Quicksort, Rando...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-5-linear-time-sorting-lower-bounds-counting-sort-radix-sort/index.htm">
<img src="../../../contents/video-lectures/lecture-5-linear-time-sorting-lower-bounds-counting-sort-radix-sort/6_046J_lec05_th.jpg" title="Lecture 5: Linear-time Sorting: Lower Bounds, Counting Sort, Radix Sort" alt="Lecture 5: Linear-time Sorting: Lower Bounds, Counting Sort, Radix Sort"><p>Lecture 5: Linear-time Sort...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-6-order-statistics-median/index.htm">
<img src="../../../contents/video-lectures/lecture-6-order-statistics-median/6_046J_lec06_th.jpg" title="Lecture 6: Order Statistics, Median" alt="Lecture 6: Order Statistics, Median"><p>Lecture 6: Order Statistics...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-7-hashing-hash-functions/index.htm">
<img src="../../../contents/video-lectures/lecture-7-hashing-hash-functions/6_046J_lec07_th.jpg" title="Lecture 7: Hashing, Hash Functions" alt="Lecture 7: Hashing, Hash Functions"><p>Lecture 7: Hashing, Hash Fu...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-8-universal-hashing-perfect-hashing/index.htm">
<img src="../../../contents/video-lectures/lecture-8-universal-hashing-perfect-hashing/6_046J_lec08_th.jpg" title="Lecture 8: Universal Hashing, Perfect Hashing" alt="Lecture 8: Universal Hashing, Perfect Hashing"><p>Lecture 8: Universal Hashin...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-9-relation-of-bsts-to-quicksort-analysis-of-random-bst/index.htm">
<img src="../../../contents/video-lectures/lecture-9-relation-of-bsts-to-quicksort-analysis-of-random-bst/6_046J_lec09_th.jpg" title="Lecture 9: Relation of BSTs to Quicksort - Analysis of Random BST" alt="Lecture 9: Relation of BSTs to Quicksort - Analysis of Random BST"><p>Lecture 9: Relation of BSTs...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-10-red-black-trees-rotations-insertions-deletions/index.htm">
<img src="../../../contents/video-lectures/lecture-10-red-black-trees-rotations-insertions-deletions/6_046J_lec10_th.jpg" title="Lecture 10: Red-black Trees, Rotations, Insertions, Deletions" alt="Lecture 10: Red-black Trees, Rotations, Insertions, Deletions"><p>Lecture 10: Red-black Trees...</p></a>
</div>
<div class="related-media-thumbnail-nolink">
<div class="now-playing-resource">Now Playing</div>
<img src="../../../contents/video-lectures/lecture-11-augmenting-data-structures-dynamic-order-statistics-interval-trees/6_046J_lec11_th.jpg" title="Lecture 11: Augmenting Data Structures, Dynamic Order Statistics, Interval Trees" alt="Lecture 11: Augmenting Data Structures, Dynamic Order Statistics, Interval Trees"><p>Lecture 11: Augmenting Data...</p>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-12-skip-lists/index.htm">
<img src="../../../contents/video-lectures/lecture-12-skip-lists/6_046J_lec12_th.jpg" title="Lecture 12: Skip Lists" alt="Lecture 12: Skip Lists"><p>Lecture 12: Skip Lists</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-13-amortized-algorithms-table-doubling-potential-method/index.htm">
<img src="../../../contents/video-lectures/lecture-13-amortized-algorithms-table-doubling-potential-method/6_046J_lec13_th.jpg" title="Lecture 13: Amortized Algorithms, Table Doubling, Potential Method" alt="Lecture 13: Amortized Algorithms, Table Doubling, Potential Method"><p>Lecture 13: Amortized Algor...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-14-competitive-analysis-self-organizing-lists/index.htm">
<img src="../../../contents/video-lectures/lecture-14-competitive-analysis-self-organizing-lists/6_046J_lec14_th.jpg" title="Lecture 14: Competitive Analysis: Self-organizing Lists" alt="Lecture 14: Competitive Analysis: Self-organizing Lists"><p>Lecture 14: Competitive Ana...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-15-dynamic-programming-longest-common-subsequence/index.htm">
<img src="../../../contents/video-lectures/lecture-15-dynamic-programming-longest-common-subsequence/6_046J_lec15_th.jpg" title="Lecture 15: Dynamic Programming, Longest Common Subsequence" alt="Lecture 15: Dynamic Programming, Longest Common Subsequence"><p>Lecture 15: Dynamic Program...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-16-greedy-algorithms-minimum-spanning-trees/index.htm">
<img src="../../../contents/video-lectures/lecture-16-greedy-algorithms-minimum-spanning-trees/6_046J_lec16_th.jpg" title="Lecture 16: Greedy Algorithms, Minimum Spanning Trees" alt="Lecture 16: Greedy Algorithms, Minimum Spanning Trees"><p>Lecture 16: Greedy Algorith...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-17-shortest-paths-i-properties-dijkstras-algorithm-breadth-first-search/index.htm">
<img src="../../../contents/video-lectures/lecture-17-shortest-paths-i-properties-dijkstras-algorithm-breadth-first-search/6_046J_lec17_th.jpg" title="Lecture 17: Shortest Paths I: Properties, Dijkstra's Algorithm, Breadth-first Search" alt="Lecture 17: Shortest Paths I: Properties, Dijkstra's Algorithm, Breadth-first Search"><p>Lecture 17: Shortest Paths ...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-18-shortest-paths-ii-bellman-ford-linear-programming-difference-constraints/index.htm">
<img src="../../../contents/video-lectures/lecture-18-shortest-paths-ii-bellman-ford-linear-programming-difference-constraints/6_046J_lec18_th.jpg" title="Lecture 18: Shortest Paths II: Bellman-Ford, Linear Programming, Difference Constraints" alt="Lecture 18: Shortest Paths II: Bellman-Ford, Linear Programming, Difference Constraints"><p>Lecture 18: Shortest Paths ...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-19-shortest-paths-iii-all-pairs-shortest-paths-matrix-multiplication-floyd-warshall-johnson/index.htm">
<img src="../../../contents/video-lectures/lecture-19-shortest-paths-iii-all-pairs-shortest-paths-matrix-multiplication-floyd-warshall-johnson/6_046J_lec19_th.jpg" title="Lecture 19: Shortest Paths III: All-pairs Shortest Paths, Matrix Multiplication, Floyd-Warshall, Johnson" alt="Lecture 19: Shortest Paths III: All-pairs Shortest Paths, Matrix Multiplication, Floyd-Warshall, Johnson"><p>Lecture 19: Shortest Paths ...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-22-advanced-topics/index.htm">
<img src="../../../contents/video-lectures/lecture-22-advanced-topics/6_046J_lec22_th.jpg" title="Lecture 22: Advanced Topics" alt="Lecture 22: Advanced Topics"><p>Lecture 22: Advanced Topics</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-23-advanced-topics-cont./index.htm">
<img src="../../../contents/video-lectures/lecture-23-advanced-topics-cont./6_046J_lec23_th.jpg" title="Lecture 23: Advanced Topics (cont.)" alt="Lecture 23: Advanced Topics (cont.)"><p>Lecture 23: Advanced Topics...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-24-advanced-topics-cont./index.htm">
<img src="../../../contents/video-lectures/lecture-24-advanced-topics-cont./6_046J_lec24_th.jpg" title="Lecture 24: Advanced Topics (cont.)" alt="Lecture 24: Advanced Topics (cont.)"><p>Lecture 24: Advanced Topics...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-25-advanced-topics-cont.-discussion-of-follow-on-classes/index.htm">
<img src="../../../contents/video-lectures/lecture-25-advanced-topics-cont.-discussion-of-follow-on-classes/6_046J_lec25_th.jpg" title="Lecture 25: Advanced Topics (cont.) - Discussion of Follow-on Classes" alt="Lecture 25: Advanced Topics (cont.) - Discussion of Follow-on Classes"><p>Lecture 25: Advanced Topics...</p></a>
</div>
</div>
        <div id="vid_playlist" itemprop="description" class="tabContent hide">
<h2 class="subhead">Related Resources</h2>
<p>Lecture Notes (<a target="_blank" href="../../../contents/video-lectures/lecture-11-augmenting-data-structures-dynamic-order-statistics-interval-trees/lec11.pdf">PDF</a>)<br><a target="_blank" href="../../../contents/assignments/index.htm">Assignments</a><br><a target="_blank" href="../../../contents/exams/index.htm">Exams</a></p>
</div>
        <div id="vid_related" itemprop="description" class="tabContent hide">
<ul><li><a class="transcript-link" title="Open in a new window." alt="Open in a new window." style="text-decoration: none; font-size: 1.0em;" target="_blank" text-decoration: none font-size: href="../../../contents/video-lectures/lecture-11-augmenting-data-structures-dynamic-order-statistics-interval-trees/RHyGlha7bjE.pdf"> Download this transcript - PDF (English - US)</a></li></ul>
<p><span m="4000">Here 2.</span> </p>
<p><span m="8000">Good morning. Today we're going to talk about</span> </p>
<p><span m="14000">augmenting data structures.</span> </p>
<p><span m="18000">That one is 23 and that is 23.</span> <span m="19000">And I look here.</span> <span m="20000">For this one,</span> <span m="27000">And this is a -- Normally, rather than designing</span> <span m="30000">Or, once again,</span> <span m="33000">data structures from scratch, you tend to take existing data</span> <span m="37000">structures and build your functionality into them.</span> </p>
<p><span m="40000">And that is a process we call data-structure augmentation.</span> </p>
<p><span m="44000">And this also today marks sort of the start of the design phase</span> <span m="48000">of the class. We spent a lot of time doing</span> <span m="51000">analysis up to this point. And now we're still going to</span> <span m="54000">learn some new analytical techniques.</span> </p>
<p><span m="58000">But we're going to start turning our focus more toward</span> <span m="61000">how is it that you design efficient data structures,</span> <span m="65000">efficient algorithms for various problems?</span> </p>
<p><span m="68000">So this is a good example of the design phase.</span> </p>
<p><span m="71000">It is a really good idea, at this point,</span> <span m="74000">if you have not done so, to review the textbook Appendix</span> <span m="78000">B. You should take that as</span> <span m="80000">additional reading to make sure that you are familiar,</span> <span m="84000">because over the next few weeks we're going to hit almost every</span> <span m="89000">topic in Appendix B. It is going to be brought to</span> <span m="93000">bear on the subjects that we're talking about.</span> </p>
<p><span m="97000">If you're going to go scramble to learn that while you're also</span> <span m="101000">trying to learn the material, it will be more onerous than if</span> <span m="105000">you just simply review the material now.</span> </p>
<p><span m="108000">We're going to start with an illustration of the problem of</span> <span m="112000">dynamic order statistics.</span> </p>
<p><span m="120000">We are familiar with finding things like the median or the</span> <span m="123000">kth order statistic or whatever. Now we want to do the same</span> <span m="128000">thing but we want to do it with a dynamic set.</span> </p>
<p><span m="131000">Rather than being given all the data upfront,</span> <span m="134000">we're going to have a set. And then at some point somebody</span> <span m="138000">is going to be doing typically insert and delete.</span> </p>
<p><span m="141000">And at some point somebody is going to say OK,</span> <span m="144000">select for me the ith largest guy or the ith smallest guy --</span> <span m="161000">-- in the dynamic set. Or, something like OS-Rank of</span> <span m="178000">x. The rank of x in the sorted</span> <span m="185000">order of the set.</span> </p>
<p><span m="194000">So either I want to just say, for example,</span> <span m="196000">if I gave n over 2, if I had n elements in the set</span> <span m="199000">and I said n over 2, I am asking for the median.</span> </p>
<p><span m="202000">I could be asking for the mean. I could be asking for quartile.</span> </p>
<p><span m="205000">Here I take an element and say, OK, so where does that element</span> <span m="209000">fall among all of the other elements in the set?</span> </p>
<p><span m="213000">And, in addition, these are dynamic sets so I</span> <span m="217000">want to be able to do insert and delete, I want to be able to add</span> <span m="225000">and remove elements. The solution we are going to</span> <span m="230000">look at for this one, the basic idea is to keep the</span> <span m="236000">sizes of subtrees in the nodes of a red-black tree.</span> </p>
<p><span m="248000">Let me draw a picture as an example.</span> </p>
<p><span m="270000">In this tree --</span> <span m="277000">I didn't draw the NILs for this.</span> </p>
<p><span m="279000">I am going to keep two values. I am going to keep the key.</span> </p>
<p><span m="284000">And so for the keys, what I will do is just use</span> <span m="288000">letters of the alphabet.</span> </p>
<p><span m="306000">And this is a red-black tree. Just for practice,</span> <span m="311000">how can I label this tree so it's a red-black tree?</span> </p>
<p><span m="316000">I haven't shown the NILs. Remember the NILs are all</span> <span m="321000">black. How can I label this,</span> <span m="324000">red and black? Make sure it is a red-black</span> <span m="329000">tree. Not every tree can be labeled</span> <span m="333000">as a red-black tree, right?</span> </p>
<p><span m="336000">This is good practice because this sort of thing shows up on</span> <span m="342000">quizzes. Make F red, good,</span> <span m="345000">and everything else black, that is certainly a solution.</span> </p>
<p><span m="351000">Because then that basically brings the level of this guy up</span> <span m="357000">to here. Actually, I had a more</span> <span m="361000">complicated one because it seemed like more fun.</span> </p>
<p><span m="366000">What I did was I made this guy black and then these two guys</span> <span m="372000">red and black and red, black and red,</span> <span m="376000">black and black. But your solution is perfectly</span> <span m="381000">good as well. So we don't have any two reds</span> <span m="385000">in a row on any path. And all the black height from</span> <span m="391000">any particular point going down we get the same number of blacks</span> <span m="396000">whichever way we go. Good.</span> </p>
<p><span m="398000">The idea here now is that, we're going to keep the subtree</span> <span m="402000">sizes, these are the keys that are stored in our dynamic set,</span> <span m="407000">we're going to keep the subtree sizes in the red-black tree.</span> </p>
<p><span m="412000">For example, this guy has size one.</span> </p>
<p><span m="415000">These guys have size one because they're leaves.</span> </p>
<p><span m="420000">And then we can just work up. So this has size three,</span> <span m="428000">this guy has size five, this guy has size three,</span> <span m="436000">and this guy has five plus three plus one is nine.</span> </p>
<p><span m="445000">In general, we will have size of x is equal to size of left of</span> <span m="455000">x plus the size of the right child of x plus one.</span> </p>
<p><span m="465000">That is how I compute it recursively.</span> </p>
<p><span m="468000">A very simple formula for what the size is.</span> </p>
<p><span m="472000">It turns out that for the code that we're going to want to</span> <span m="478000">write to implement these operations, it is going to be</span> <span m="483000">convenient to be talking about the size of NIL.</span> </p>
<p><span m="489000">So what is the size of NIL? Zero.</span> </p>
<p><span m="492000">Size of NIL, there are no elements there.</span> </p>
<p><span m="496000">However, in most program languages, if I take size of</span> <span m="502000">NIL, what will happen? You get an error.</span> </p>
<p><span m="506000">That is kind of inconvenient. What I have to do in my code is</span> <span m="513000">that everywhere that I might want to take size of NIL,</span> <span m="517000">or take the size of anything, I have to say,</span> <span m="521000">well, if it's NIL then return zero, otherwise return the size</span> <span m="526000">field, etc. There is an implementation</span> <span m="529000">trick that we're going to use to simplify that.</span> </p>
<p><span m="532000">It's called using a sentinel.</span> </p>
<p><span m="541000">A sentinel is nothing more than a dummy record.</span> </p>
<p><span m="545000">Instead of using a NIL, we will actually use a NIL</span> <span m="550000">sentinel. We will use a dummy record for</span> <span m="554000">NIL such that size of NIL is equal to zero.</span> </p>
<p><span m="558000">Instead of any place I would have used NIL in the tree,</span> <span m="564000">instead I will have a special record that I will call NIL.</span> </p>
<p><span m="571000">But it will be a whole record. And that way I can set its size</span> <span m="575000">field to be zero, and then I don't have to check</span> <span m="578000">that as a special case. That is a very common type of</span> <span m="582000">programming trick to use, is to use sentinels to simplify</span> <span m="586000">code so you don't have all these boundary cases or you don't have</span> <span m="591000">to write an extra function when all I want to do is just index</span> <span m="595000">the size of something. Everybody with me on that?</span> </p>
<p><span m="600000">So let's write the code for OS-Select given this</span> <span m="606000">representation.</span> </p>
<p><span m="617000">And this is going to basically give us the ith smallest in the</span> <span m="630000">subtree rooted at x. It's actually going to be a</span> <span m="637000">little bit more general. If I want to implement the</span> <span m="642000">OS-Select i of up there, I basically give it the root</span> <span m="647000">n_i. But we're going to build this</span> <span m="650000">recursively so it's going to be helpful to have the node in</span> <span m="655000">which we're trying to find the subtree.</span> </p>
<p><span m="659000">Here is the code.</span> </p>
<p><span m="742000">This is the code. And let's just see how it works</span> <span m="748000">and then we will argue why it works.</span> </p>
<p><span m="754000">As an example, let's do OS-Select of the root</span> <span m="761000">and 5. We're going to find the fifth</span> <span m="766000">largest in the set. We have OS-Select of the root</span> <span m="774000">and 5. This is inconvenient.</span> </p>
<p><span m="780000">We start out at the top, well, let's just switch the</span> <span m="788000">boards. Here we go.</span> </p>
<p><span m="791000">We start at the top, and i is the root.</span> </p>
<p><span m="797000">Excuse me, i is 5, sorry, and the root.</span> </p>
<p><span m="803000">i=5. We want to five the fifth</span> <span m="808000">largest. We first compute this value k.</span> </p>
<p><span m="815000">k is the size of left of x plus</span> <span m="819000">What is that value? What is k anyway?</span> </p>
<p><span m="824000">What is it? Well, in this case it is 6.</span> </p>
<p><span m="830000">Good. But what is the meaning of k?</span> </p>
<p><span m="842000">The order. The rank.</span> </p>
<p><span m="843000">Good, the rank of the current node.</span> </p>
<p><span m="847000">This is the rank of the current node.</span> </p>
<p><span m="850000">k is always the size of the left subtree plus 1.</span> </p>
<p><span m="855000">That is just the rank of the current node.</span> </p>
<p><span m="859000">We look here and we say, well, the rank is k.</span> </p>
<p><span m="863000">Now, if it is equal then we found the element we want.</span> </p>
<p><span m="870000">But, otherwise, if i is less,</span> <span m="872000">we know it's going to be in the left subtree.</span> </p>
<p><span m="876000">All we're doing then is recursing in the left subtree.</span> </p>
<p><span m="882000">And here we will recurse. We will want the fifth largest</span> <span m="887000">one. And now this time k is going to</span> <span m="890000">be equal to what? Two.</span> </p>
<p><span m="892000">Now here we say, OK, this is bigger,</span> <span m="896000">so therefore the element we want is going to be in the right</span> <span m="901000">subtree. But we don't want the ith</span> <span m="906000">largest guy in the right subtree, because we already know</span> <span m="911000">there are going to be two guys over here.</span> </p>
<p><span m="915000">We want the third largest guy in this subtree.</span> </p>
<p><span m="919000">We have i equals 3 as we recurse into this subtree.</span> </p>
<p><span m="924000">And now we compute k for here. This plus 1 is 2.</span> </p>
<p><span m="930000">And that says we recursed right here.</span> </p>
<p><span m="934000">And then we have i=1, k=1, and we return in this code</span> <span m="939000">a pointer to this node.</span> </p>
<p><span m="955000">So this returns a pointer to the node containing H whose key</span> <span m="964000">is H. Just to make a comment here,</span> <span m="970000">we discovered k is equal to the rank of x.</span> </p>
<p><span m="975000">Any questions about what is going on in this code?</span> </p>
<p><span m="982000">OK. It's basically just finding its</span> <span m="987000">way down. The subtree sizes help it make</span> <span m="993000">the decision as to which way it should go to find which is the</span> <span m="999000">ith largest. We can do a quick analysis.</span> </p>
<p><span m="1003000">On our red-black tree, how long does OS-Select take to</span> <span m="1009000">run? Yeah?</span> </p>
<p><span m="1010000">Yeah, order log n if there are n elements in the tree.</span> </p>
<p><span m="1017000">Because the red-black tree is a balance tree.</span> </p>
<p><span m="1021000">Its height is order log n. In fact, this code will work on</span> <span m="1027000">any tree that has order log n the height of the tree.</span> </p>
<p><span m="1032000">And so if you have a guaranteed height, the way that red-black</span> <span m="1039000">trees do, you're in good shape. OS-Rank, we won't do but it is</span> <span m="1045000">in the book, also gets order log n.</span> </p>
<p><span m="1050000">Here is a question I want to pose.</span> </p>
<p><span m="1055000">Why not just keep the ranks themselves?</span> </p>
<p><span m="1078000">Yeah? It's the node itself.</span> </p>
<p><span m="1081000">Otherwise, you cannot take left of it.</span> </p>
<p><span m="1084000">I mean, if we were doing this in a decent language,</span> <span m="1087000">strongly typed language there would be no confusion.</span> </p>
<p><span m="1091000">But we're writing in this pseudocode that is good because</span> <span m="1095000">it's compact, which lets you focus on the</span> <span m="1098000">algorithm. But, of course,</span> <span m="1099000">it doesn't have a lot of the things you would really want if</span> <span m="1104000">you were programming things of scale like type safety and so</span> <span m="1108000">forth. Yeah?</span> </p>
<p><span m="1121000">It is basically hard to maintain when you modify it.</span> </p>
<p><span m="1124000">For example, if we actually kept the ranks</span> <span m="1128000">in the nodes, certainly it would be easy to</span> <span m="1131000">find the element of a given rank.</span> </p>
<p><span m="1133000">But all I have to do is insert the smallest element,</span> <span m="1137000">an element that is smaller than all of the other elements.</span> </p>
<p><span m="1143000">And what happens? All the ranks have to be</span> <span m="1146000">changed. Order n changes have to be made</span> <span m="1150000">if that's what I was maintaining, whereas with</span> <span m="1154000">subtree sizes that's a lot easier.</span> </p>
<p><span m="1158000">Because it's hard to maintain --</span> <span m="1167000">-- when the red-black tree is modified.</span> </p>
<p><span m="1173000">And that is the other sort of tricky thing when you're</span> <span m="1178000">augmenting a data structure. You want to put in the things</span> <span m="1183000">that your operations go fast, but you cannot forget that</span> <span m="1189000">there are already underlying operations on the data structure</span> <span m="1195000">that have to be maintained in some way.</span> </p>
<p><span m="1200000">Can we close this door, please?</span> </p>
<p><span m="1203000">Thank you. We have to look at what are the</span> <span m="1208000">modifying operations and how do we maintain them.</span> </p>
<p><span m="1214000">The modifying operations for red-black trees are insert and</span> <span m="1221000">delete. If I were augmenting a binary</span> <span m="1225000">heap, what operations would I have to worry about?</span> </p>
<p><span m="1238000">If I were augmenting a heap, what are the modifying</span> <span m="1244000">operations? Binary min heap,</span> <span m="1247000">for example, classic priority queue?</span> </p>
<p><span m="1252000">Who remembers heaps? What are the operations on a</span> <span m="1258000">heap? There's a good final question.</span> </p>
<p><span m="1264000">Take-home exam, don't worry about it.</span> </p>
<p><span m="1269000">Final, worry about it. What are the operations on a</span> <span m="1276000">heap? Just look it up on Books24 or</span> <span m="1280000">whatever it is, right?</span> </p>
<p><span m="1283000">AnswerMan? What does AnswerMan say?</span> </p>
<p><span m="1290000">OK. And? If it's a min heap. It's min, extract min,</span> <span m="1296000">typical operations and insert. And of those which are</span> <span m="1303000">modifying? Insert and extract min,</span> <span m="1307000">OK? So, min is not.</span> </p>
<p><span m="1310000">You don't have to worry about min because all that is is a</span> <span m="1317000">query. You want to distinguish</span> <span m="1321000">operations on a dynamic data structure those that modify and</span> <span m="1326000">those that don't, because the ones that don't</span> <span m="1329000">modify the data structure are all perfectly fine as long as</span> <span m="1334000">you haven't destroyed information.</span> </p>
<p><span m="1336000">The queries, those are easy.</span> </p>
<p><span m="1338000">But the operations that modify the data structure,</span> <span m="1342000">those we're very concerned about in making sure we can</span> <span m="1346000">maintain. Our strategy for dealing with</span> <span m="1349000">insert and delete in this case is to update the subtree sizes</span> <span m="1354000">--</span> <span m="1363000">-- when inserting or deleting. For example,</span> <span m="1371000">let's look at what happens when I insert k.</span> </p>
<p><span m="1380000">Element key k. I am going to want to insert it</span> <span m="1387000">in here, right? What is going to happen to this</span> <span m="1394000">subtree size if I am inserting k in here?</span> </p>
<p><span m="1400000">This is going to increase to</span> <span m="1405000">And then I go left. This one is going to increase</span> <span m="1415000">to 6. Here it is going to increase to</span> </p>
<p><span m="1422000">And then I will put my k down there with a 1.</span> </p>
<p><span m="1430000">So I just updated on the way down.</span> </p>
<p><span m="1436000">Pretty easy. Yeah?</span> </p>
<p><span m="1440000">But now it's not a red-black tree anymore.</span> </p>
<p><span m="1444000">You have to rebalance, so you must also handle</span> <span m="1449000">rebalancing. Because, remember,</span> <span m="1452000">and this is something that people tend to forget so it's</span> <span m="1457000">always, I think, helpful when I see patterns</span> <span m="1462000">going on to tell everybody what the pattern is so that you can</span> <span m="1468000">be sure of it in your work that you're not falling into that</span> <span m="1474000">pattern. What people tend to forget when</span> <span m="1479000">they're doing red-black trees is they tend to remember the tree</span> <span m="1483000">insert part of it, but red-black insert,</span> <span m="1486000">that RB insert procedure actually has two parts to it.</span> </p>
<p><span m="1490000">First you call tree insert and then you have to rebalance.</span> </p>
<p><span m="1494000">And so you've got to make sure you do the whole of the</span> <span m="1498000">red-black insert. Not just the tree insert part.</span> </p>
<p><span m="1502000">We just did the tree insert part.</span> </p>
<p><span m="1505000">That was easy. We also have to handle</span> <span m="1509000">rebalancing. So there are two types of</span> <span m="1512000">things we have to worry about. One is red-black color changes.</span> </p>
<p><span m="1518000">Well, unfortunately those have no effect on subtree sizes.</span> </p>
<p><span m="1523000">If I change the colors of things, no effect,</span> <span m="1527000">no problem. But also the interesting one is</span> <span m="1534000">rotations. Rotations, it turns out,</span> <span m="1539000">are fairly easy to fix up. Because when I do a rotation,</span> <span m="1546000">I can update the nodes based on the children.</span> </p>
<p><span m="1552000">I will show you that. You basically look at children</span> <span m="1559000">and fix up, in this case, in order one time per rotation.</span> </p>
<p><span m="1569000">For example, imagine that I had a piece of</span> <span m="1572000">my tree that looked like this.</span> </p>
<p><span m="1583000">And let's say it was 7, 3, 4, the subtree sizes.</span> </p>
<p><span m="1586000">I'm not going to put the values in here.</span> </p>
<p><span m="1590000">And I did a right rotation on that edge to put them the other</span> <span m="1596000">way. And so these guys get hooked up</span> <span m="1600000">this way. Always the three children stay</span> <span m="1605000">as three children. We just swing this guy over to</span> <span m="1610000">there and make this guy be the parent of the other one.</span> </p>
<p><span m="1618000">And so now the point is that I can just simply update this guy</span> <span m="1623000">to be, well, he's got 8, 3 plus 4 plus 1 using our</span> <span m="1628000">formula for what the size is. And now, for this one,</span> <span m="1633000">it's going to be 8 plus 7 plus 1 is 16, or, if I think about</span> <span m="1639000">it, it's going to be whatever that was before because I</span> <span m="1644000">haven't changed this subtree size with a rotation.</span> </p>
<p><span m="1650000">Everything beneath this edge is still beneath this edge.</span> </p>
<p><span m="1653000">And so I fixed it up in order one time.</span> </p>
<p><span m="1656000">There are certain other types of operations sometimes that</span> <span m="1660000">occur where this isn't the value.</span> </p>
<p><span m="1662000">If I wasn't doing subtree sizes but was doing some other</span> <span m="1666000">property of the subtree, it could be that this was no</span> <span m="1670000">longer 16 in which case the effect might propagate up</span> <span m="1673000">towards the root. There is a nice little lemma in</span> <span m="1678000">the book that shows the conditions under which you can</span> <span m="1683000">make sure that the re-balancing doesn't cost you too much.</span> </p>
<p><span m="1688000">So that was pretty good. Now, insert and delete,</span> <span m="1693000">that is all we have to do for rotations, are therefore still</span> <span m="1698000">order log n time, because a red-black tree only</span> <span m="1702000">has to do order one rotations. Do they normally take constant</span> <span m="1708000">time? Well, they still take constant</span> <span m="1712000">time. They just take a little bit</span> <span m="1715000">bigger constant. And so now we've been able to</span> <span m="1719000">build this great data structure that supports dynamic order</span> <span m="1725000">statistic queries and it works in order log n time for insert,</span> <span m="1730000">delete and the various queries. OS-Select.</span> </p>
<p><span m="1734000">I can also just search for an element.</span> </p>
<p><span m="1739000">I have taken the basic data structure and have added some</span> <span m="1745000">new operations on it. Any questions about what we did</span> <span m="1751000">here? Do people understand this</span> <span m="1754000">reasonably well? OK.</span> </p>
<p><span m="1756000">Then let's generalize, always a dangerous thing.</span> </p>
<p><span m="1777000">Augmenting data structures. What I would like to do is give</span> <span m="1782000">you a little methodology for how you go about doing this safely</span> <span m="1787000">so you don't forget things. The most common thing,</span> <span m="1792000">by the way, if there is an augmentation problem on the</span> <span m="1796000">take-home or if there is one on the final, I guarantee that</span> <span m="1801000">probably a quarter of the class will forget the rotations if</span> <span m="1807000">they augmented red-black tree. I guarantee it.</span> </p>
<p><span m="1812000">Anyway, here is a little methodology to check yourself.</span> </p>
<p><span m="1816000">As I mentioned, the reason why this is so</span> <span m="1819000">important is because this is, in practice,</span> <span m="1822000">the thing that you do most of the time.</span> </p>
<p><span m="1825000">You don't just use a data structure as given.</span> </p>
<p><span m="1830000">You take a data structure. You say I have my own</span> <span m="1834000">operations I want to layer onto this.</span> </p>
<p><span m="1837000">We're going to give a methodology.</span> </p>
<p><span m="1840000">And what I will do, as I go along,</span> <span m="1843000">is will use the example of order statistics trees to</span> <span m="1848000">illustrate the methodology. It is four steps.</span> </p>
<p><span m="1852000">The first is choose an underlying data structure.</span> </p>
<p><span m="1864000">Which in the case of order statistics tree was what?</span> </p>
<p><span m="1869000">Red-black tree.</span> </p>
<p><span m="1879000">And the second thing we do is we figure out what additional</span> <span m="1883000">information we wish to maintain in that data structure.</span> </p>
<p><span m="1898000">Which in this case is the subtree sizes.</span> </p>
<p><span m="1903000">Subtree sizes is what we keep for this one.</span> </p>
<p><span m="1909000">And when we did this we could make mistakes,</span> <span m="1915000">right? We could have said,</span> <span m="1918000">oh, let's keep the rank. And we start playing with it</span> <span m="1925000">and discover we can do that. It just goes really slowly.</span> </p>
<p><span m="1929000">It takes some creativity to figure out what is the</span> <span m="1934000">information that you're going to be able to keep,</span> <span m="1938000">but also to maintain the other properties that you want.</span> </p>
<p><span m="1942000">The third step is verify that the information can be</span> <span m="1946000">maintained --</span> <span m="1954000">-- for the modifying operations on the data structure.</span> </p>
<p><span m="1965000">And so in this case, for OS trees,</span> <span m="1970000">the modifying operations were insert and delete.</span> </p>
<p><span m="1979000">And, of course, we had to make sure we dealt</span> <span m="1981000">with rotations.</span> </p>
<p><span m="1990000">And because rotations are part of that we could break it down</span> <span m="1994000">into the tree insert, the tree delete and rotations.</span> </p>
<p><span m="1997000">And once we've did that everything was fine.</span> </p>
<p><span m="2000000">We didn't, for this particular problem, have to worry about</span> <span m="2004000">color changes. But that's another thing that</span> <span m="2007000">under some things you might have to worry about.</span> </p>
<p><span m="2012000">For some reason the color made a difference.</span> </p>
<p><span m="2015000">Usually that doesn't make a difference.</span> </p>
<p><span m="2018000">And then the fourth step is to develop new operations.</span> </p>
<p><span m="2030000">Presumably that use the info that you have now stored.</span> </p>
<p><span m="2036000">And this was OS-Select and OS-Rank, which we didn't give</span> <span m="2042000">but which is there. And also it's a nice little</span> <span m="2047000">puzzle to figure out yourself, how you would build OS-Rank.</span> </p>
<p><span m="2052000">Not a hard piece of code. This methodology is not</span> <span m="2057000">actually the way you do this. This is one of these things</span> <span m="2062000">that's more like a checklist, because you see whether or not</span> <span m="2067000">you've got -- When you're actually doing this</span> <span m="2071000">maybe you developed the new operations first.</span> </p>
<p><span m="2074000">You've got to keep in mind the new operations while you're</span> <span m="2077000">verifying that the information you're storing can be here.</span> </p>
<p><span m="2080000">Maybe you will then go back and change this and sort of sort</span> <span m="2084000">through it. This is more a checklist that</span> <span m="2086000">when you're done this is how you write it up.</span> </p>
<p><span m="2089000">This is how you document that what you've done is,</span> <span m="2092000">in fact, a good thing. You have a checklist.</span> </p>
<p><span m="2094000">Here is my underlying data structure.</span> </p>
<p><span m="2096000">Here is the addition information I need.</span> </p>
<p><span m="2100000">See, I can still support the modifying operations that the</span> <span m="2103000">data structure used to have and now here are my new operations</span> <span m="2107000">and see what those are. It's really a checklist.</span> </p>
<p><span m="2110000">Not a prescription for the order in which you do things.</span> </p>
<p><span m="2113000">You must do all these steps, not necessarily in this order.</span> </p>
<p><span m="2116000">This is a guide for your documentation.</span> </p>
<p><span m="2119000">When we ask for you to augment a data structure,</span> <span m="2122000">generally we're asking you to tell us what the four steps are.</span> </p>
<p><span m="2125000">It will help you organize your things.</span> </p>
<p><span m="2129000">It will also help make sure you don't forget some step along the</span> <span m="2133000">way. I've seen people who have added</span> <span m="2136000">the information and developed new operations but completely</span> <span m="2140000">forgot to verify that the information could be maintained.</span> </p>
<p><span m="2144000">So you want to make sure that you've done all those.</span> </p>
<p><span m="2148000">Usually you have to play --</span> <span m="2156000">-- with interactions --</span> <span m="2164000">-- between steps. It's not just a do this,</span> <span m="2167000">do this, do this. We're going to do now a more</span> <span m="2172000">complicated data structure. It's not that much more</span> <span m="2177000">complicated, but its correctness is actually kind of challenging.</span> </p>
<p><span m="2193000">And it is actually a very practical and useful data</span> <span m="2196000">structure. I am amazed at how many people</span> <span m="2200000">aren't aware that there are data structures of this nature that</span> <span m="2205000">are useful for them when I see people writing really slow code.</span> </p>
<p><span m="2209000">And so the example we're going to do is interval trees.</span> </p>
<p><span m="2220000">And the idea of this is that we want to maintain a set of</span> <span m="2228000">intervals. For example,</span> <span m="2231000">time intervals. I have a whole database of time</span> <span m="2238000">intervals that I'm trying to maintain.</span> </p>
<p><span m="2244000">Let's just do an example here.</span> </p>
<p><span m="2280000">This is going from 7 to 10, 5 to 11 and 4 to 8,</span> <span m="2288000">from 15 to 18, 17 to 19 and 21 to 23.</span> </p>
<p><span m="2294000">This is a set of intervals. And if we have an interval i,</span> <span m="2304000">let's say this is interval i, which is 7,10.</span> </p>
<p><span m="2314000">We're going to call this endpoint the low endpoint of i</span> <span m="2318000">and this we're going to call the high endpoint of i.</span> </p>
<p><span m="2321000">The reason I use low and high rather than left or right is</span> <span m="2326000">because we're going to have a tree, and we're going to want</span> <span m="2330000">the left subtree and the right subtree.</span> </p>
<p><span m="2333000">So if I start saying left and right for intervals and left and</span> <span m="2338000">right for tree we're going to get really confused.</span> </p>
<p><span m="2343000">This is also a tip. Let me say when you're coding,</span> <span m="2345000">you really have to think hard sometimes about the words that</span> <span m="2349000">you're using for things, especially things like left and</span> <span m="2352000">right because they get so overused throughout programming.</span> </p>
<p><span m="2355000">It's a good idea to come up with a whole wealth of synonyms</span> <span m="2358000">for different situations so that it is clear in any piece of code</span> <span m="2362000">when you're talking, for example,</span> <span m="2364000">about the intervals versus the tree, because we're going to</span> <span m="2367000">have both going on here. And what we're going to do is</span> <span m="2373000">we want to support insertion and deletion of intervals here.</span> </p>
<p><span m="2381000">And we're going to have a query, which is going to be the</span> <span m="2389000">new operation we're going to develop, which is going to be to</span> <span m="2397000">find an interval, any interval in the set that</span> <span m="2403000">overlaps a given query interval.</span> </p>
<p><span m="2415000">So I give you a query interval like say 6, 14 and you can</span> <span m="2423000">return this guy or this guy, this guy, couldn't return any</span> <span m="2431000">of these because these are all less than 14.</span> </p>
<p><span m="2438000">So I can return any one of those.</span> </p>
<p><span m="2441000">I only have to return one. I just have to find one guy</span> <span m="2447000">that overlaps. Any question about what we're</span> <span m="2452000">going to be setting up here? OK.</span> </p>
<p><span m="2455000">Our methodology is we're going to pick, first of all,</span> <span m="2461000">step one. And here is our methodology.</span> </p>
<p><span m="2466000">Step one is we're going chose underlying data structure.</span> </p>
<p><span m="2472000">Does anybody have a suggestion as to what data structure we</span> <span m="2478000">ought to use here to support interval trees?</span> </p>
<p><span m="2492000">What data structure should we try to start here to support</span> <span m="2498000">interval trees? Anybody have any idea?</span> </p>
<p><span m="2501000">A red-black tree. A binary search tree.</span> </p>
<p><span m="2505000">Red-black tree. We're going to use a red-black</span> <span m="2510000">tree.</span> </p>
<p><span m="2517000">Oh, I've got to say what it is keyed on.</span> </p>
<p><span m="2522000">What is going to be the key for my red-black tree?</span> </p>
<p><span m="2526000">For each interval, what should I use for a key?</span> </p>
<p><span m="2530000">This is where there are a bunch of options, right?</span> </p>
<p><span m="2534000">Throw out some ideas. It's always better to branch</span> <span m="2539000">than it is to prune. You can always prune later,</span> <span m="2543000">but if you don't branch you will never get the chance to</span> <span m="2548000">prune. So generation of ideas.</span> </p>
<p><span m="2552000">You'll need that when you're doing the design phase and doing</span> <span m="2557000">the take-home exam. Yeah?</span> </p>
<p><span m="2560000">We're calling that the low endpoint.</span> </p>
<p><span m="2563000">OK, you could do low endpoint. What other ideas are there?</span> </p>
<p><span m="2568000">High end point. Now you can look at low</span> <span m="2572000">endpoint, high endpoint. Well, between low and high</span> <span m="2577000">which is better? That one is not going to</span> <span m="2582000">matter, right? So doing high versus low,</span> <span m="2586000">we don't have to consider that, but there is another natural</span> <span m="2593000">point you want to think about using like the median,</span> <span m="2598000">the middle point. At least that is symmetric.</span> </p>
<p><span m="2603000">What do you think? What else might I use?</span> </p>
<p><span m="2607000">The length? I think the length doesn't feel</span> <span m="2612000">to me productive. This is just purely a matter of</span> <span m="2616000">intuition. It doesn't feel productive,</span> <span m="2619000">because if I know the length I don't know where it is so it's</span> <span m="2623000">going to be hard to maintain information about where it is</span> <span m="2628000">for queries. It turns out we're going to use</span> <span m="2631000">the low left endpoint, but I think to me that was sort</span> <span m="2635000">of a surprise that you'd want to use that and not the middle one.</span> </p>
<p><span m="2642000">Because you're favoring one endpoint over the other.</span> </p>
<p><span m="2646000">It turns out that's the right thing to do, surprisingly.</span> </p>
<p><span m="2651000">There is another strategy. Actually, there's another type</span> <span m="2656000">of tree called a segment tree. Actually, what you do is you</span> <span m="2662000">store both the left and right endpoints separately in the</span> <span m="2667000">tree. And then you maintain a data</span> <span m="2670000">structure where the line segments go up through the tree</span> <span m="2675000">on to the other. There are lots of things you</span> <span m="2680000">can do, but we're just going to keep it keyed on the low</span> <span m="2685000">endpoint. That's why this is a more</span> <span m="2687000">clever data structure in some ways.</span> </p>
<p><span m="2690000">Now, this is harder. That is why this is a clever</span> <span m="2694000">data structure. What are we going to store in</span> <span m="2698000">the -- I think any of those ideas are</span> <span m="2703000">good ideas to throw out and look at.</span> </p>
<p><span m="2708000">You don't know which one is going to work until you play</span> <span m="2714000">with it. This one, though,</span> <span m="2717000">is, I think, much harder to guess.</span> </p>
<p><span m="2722000">You're going to store in a node the largest value,</span> <span m="2728000">I will call it m, in the subtree rooted at that</span> <span m="2733000">node.</span> </p>
<p><span m="2745000">We'll draw it like this, a node like this.</span> </p>
<p><span m="2748000">We will put the interval here and we will put the m value</span> <span m="2752000">here.</span> </p>
<p><span m="2762000">Let's draw a picture.</span> </p>
<p><span m="2798000">Once again, I am not drawing the NILs.</span> </p>
<p><span m="2820000">I hope that that is a search tree that is keyed on the low</span> <span m="2825000">left endpoint. 4, 5, 7, 15,</span> <span m="2828000">17, 21. It is keyed on the low left</span> <span m="2831000">endpoint. If this a red-black tree,</span> <span m="2835000">let's just do another practice. How can I color this so that it</span> <span m="2841000">is a legal red-black tree? Not too relevant to what we're</span> <span m="2847000">doing right now But a little drill doesn't hurt</span> <span m="2852000">sometimes. Remember, the NILs are not</span> <span m="2855000">there and they are all black. And the root is black.</span> </p>
<p><span m="2859000">I will give that one to you.</span> </p>
<p><span m="2872000">Good. This will work.</span> </p>
<p><span m="2874000">You sort of go through a little puzzle.</span> </p>
<p><span m="2880000">A logic puzzle. Because this is really short so</span> <span m="2883000">it better not have any reds in it.</span> </p>
<p><span m="2886000">This has got to be black. Now, if I'm going to balance</span> <span m="2891000">the height, I have got to have a layer of black here.</span> </p>
<p><span m="2895000">It couldn't be that one. It's got to be these two.</span> </p>
<p><span m="2899000">Good. Now let's compute the m value</span> <span m="2902000">for each of these. It's the largest value in the</span> <span m="2906000">subtree rooted at that node. What's the largest value in the</span> <span m="2916000">subtree rooted at this node?</span> <span m="2923000">And in this one?</span> <span m="2927000">In this one?</span> </p>
<p><span m="2940000">In general, m is going to be the maximum of three possible</span> <span m="2952000">values. Either the high point of the</span> <span m="2960000">interval at x or m of the left of x or m of the right of x.</span> </p>
<p><span m="2980000">Does everybody see that? It is going to be m of x for</span> <span m="2984000">any node. I just have to look,</span> <span m="2986000">what is the maximum here, what is the maximum here and</span> <span m="2990000">what is the high point of the interval.</span> </p>
<p><span m="2993000">Whichever one of those is largest, that's the largest for</span> <span m="2998000">that subtree.</span> </p>
<p><span m="3015000">The modifying operations.</span> </p>
<p><span m="3029000">Let's first do insert. How can I do insert?</span> </p>
<p><span m="3033000">There are two parts. The first part is to do the</span> <span m="3038000">tree insert, just a normal insert into a binary search</span> <span m="3044000">tree.</span> </p>
<p><span m="3055000">What do I do? Insert a new interval?</span> </p>
<p><span m="3080000">Insert a new interval here? How can I fix up the m's?</span> </p>
<p><span m="3093000">That's right. You just go down the tree and</span> <span m="3095000">look at my current interval. And if it's got a bigger max,</span> <span m="3099000">this is something that is going into that subtree.</span> </p>
<p><span m="3103000">If its high endpoint is bigger than the current max,</span> <span m="3106000">update the current max. I just do that as I'm going</span> <span m="3110000">through the insertion, wherever it happens to land up</span> <span m="3114000">in every subtree that it hits, every node that it hits on the</span> <span m="3118000">way down. I just update it with the</span> <span m="3124000">maximum wherever it happens to fall.</span> </p>
<p><span m="3131000">Good. You just fix them on the way</span> <span m="3137000">down.</span> </p>
<p><span m="3145000">But we also have to do the other section.</span> </p>
<p><span m="3150000">Also need to handle rotations.</span> </p>
<p><span m="3165000">So let's just see how we might do rotations as an example.</span> </p>
<p><span m="3180000">Let's say this is 11, 15, 30.</span> </p>
<p><span m="3194000">Let's say I'm doing a right rotation.</span> </p>
<p><span m="3196000">This is coming off from somewhere.</span> </p>
<p><span m="3212000">That is coming off. This is still going to be the</span> <span m="3217000">child that has 30, the one that 14 and the one</span> <span m="3223000">that has 19. And so now we've rotated this</span> <span m="3228000">way, so this is the 11, 15 and this is the 6,</span> <span m="3235000">I just use my formula here. I just look here and say which</span> <span m="3242000">is the biggest, 14, 15 or 19?</span> </p>
<p></p>
<p><span m="3246000">Which is the biggest? 30, 19 or 20?</span> </p>
<p><span m="3250000">it turns out, not too hard to show,</span> <span m="3252000">that it's always whatever was there, because we're talking</span> <span m="3257000">about the biggest thing in the subtree.</span> </p>
<p><span m="3260000">And the membership of the subtree hasn't changed when we</span> <span m="3264000">do the rotation. That just took me order one</span> <span m="3268000">time to fix up.</span> </p>
<p><span m="3291000">Fixing up the m's during rotation takes O(1) time.</span> </p>
<p><span m="3308000">So the total insert time is O(lg n).</span> </p>
<p><span m="3325000">Once I figured out that this is the right information,</span> <span m="3327000">of course we don't know what we're using this information for</span> <span m="3329000">yet. But once I know that that is</span> <span m="3332000">the information, showing you that it works in</span> <span m="3336000">certain delete continuing work in order log n time is easy.</span> </p>
<p><span m="3341000">Now, delete is actually a little bit trickier but I will</span> <span m="3346000">just say it is similar. Because in delete you go</span> <span m="3350000">through and you find something, you may have to go through the</span> <span m="3356000">whole business of swapping it. If it's an internal node you've</span> <span m="3362000">got to swap it with its successor or predecessor.</span> </p>
<p><span m="3365000">And so there are a bunch of things that have to be dealt</span> <span m="3368000">with, but it is all stuff where you can update the information</span> <span m="3372000">using this thing. And it's all essentially local</span> <span m="3375000">changes when you're updating this information because you can</span> <span m="3379000">do it essentially only on a path up from the root and most of the</span> <span m="3383000">tree is never dealt with. I will leave that for you folks</span> <span m="3387000">to work out. It's also in the book if you</span> <span m="3392000">want to cheat, but it is a good exercise.</span> </p>
<p><span m="3396000">Any questions about the first three steps?</span> </p>
<p><span m="3401000">Fourth step is new operations.</span> </p>
<p><span m="3438000">Interval search of i is going to find an interval that</span> <span m="3448000">overlaps the interval i. So i here is an interval.</span> </p>
<p><span m="3455000">It's got two coordinates. And this, rather than writing</span> <span m="3459000">recursively, we're going to write as, it's sort of going to</span> <span m="3463000">be recursive, but we're going to write it</span> <span m="3466000">with a while loop. You could write it recursively.</span> </p>
<p><span m="3469000">The other one that we wrote, we could have written as a</span> <span m="3473000">while loop as well and not had the recursive call.</span> </p>
<p><span m="3477000">Here we're going to basically just start x gets the root.</span> </p>
<p><span m="3482000">And then while --</span> <span m="3587000">That is the code. Let's just see how it works.</span> </p>
<p><span m="3596000">Let's search for the interval 14, 16 --</span> <span m="3612000">-- in this tree. Let's see.</span> </p>
<p><span m="3615202">x starts out at the root. And while it is not NIL,</span> <span m="3621239">and it's not NIL because it's the root, what is this doing?</span> </p>
<p><span m="3629000">Somebody tell me what that code does.</span> </p>
<p><span m="3650000">Well, what is this doing? This is testing something</span> <span m="3656000">between i and int of x. Int of x is the interval stored</span> <span m="3661952">at x. What is this testing for?</span> </p>
<p><span m="3677000">I hope I got it right.</span> </p>
<p><span m="3690000">What is this testing for? Yeah?</span> </p>
<p><span m="3701000">Above or below? I need just simple words.</span> </p>
<p><span m="3706333">Test for overlaps. In particular test whether they</span> <span m="3712866">do or don't?</span> </p>
<p><span m="3720000">Do? Don't?</span> </p>
<p><span m="3721778">If I get to this point, what do I know about i and int</span> <span m="3732251">of x? Don't overlap.</span> </p>
<p><span m="3736005">They don't overlap because the high of one is smaller than the</span> <span m="3748059">low of the other. The high of one is smaller than</span> <span m="3755417">the low of the other. They don't overlap that way.</span> </p>
<p><span m="3759239">Could they overlap the other way?</span> </p>
<p><span m="3761735">No because we're testing also whether the low of the one is</span> <span m="3766259">bigger than the high of the other.</span> </p>
<p><span m="3768832">They're saying it's either like this or like this.</span> </p>
<p><span m="3772654">This is testing not overlap. That makes it simpler.</span> </p>
<p><span m="3776554">When I'm searching for 14, 16, I check here.</span> </p>
<p><span m="3781000">And I say do they overlap? And the answer is,</span> <span m="3784340">now we can understand it without having to go through all</span> <span m="3788591">the arithmetic calculations, no they don't overlap.</span> </p>
<p><span m="3792387">If they did overlap, I found what I want.</span> </p>
<p><span m="3795424">And what's going to happen? I am going to drop out of the</span> <span m="3799675">while loop and just return x, because I will return something</span> <span m="3804230">that overlaps. That is my goal.</span> </p>
<p><span m="3806507">Here it says they don't overlap.</span> </p>
<p><span m="3810000">So then I say, well, if left of x is not NIL,</span> <span m="3814731">in other words, I've got a left child and low</span> <span m="3819462">of i is less than or equal to m of left of x,</span> <span m="3824193">then we go left. What happens in this case if</span> <span m="3828924">I'm searching for 14, 16?</span> </p>
<p><span m="3831505">Is the low of i less than or equal to m of left of x?</span> </p>
<p><span m="3837096">Low of i is 14. And I am searching.</span> </p>
<p><span m="3843181">And is it less than 18? Yes.</span> </p>
<p><span m="3847702">Therefore, what do I do? I go left and make x point to</span> <span m="3856576">this guy. Now I check.</span> </p>
<p><span m="3860093">Does it overlap? No.</span> </p>
<p><span m="3863274">I take a look at the left guy. It is 8.</span> </p>
<p><span m="3869637">I compare 8 with 14, right?</span> </p>
<p><span m="3876000">And is it lower? No, so I go right.</span> </p>
<p><span m="3880508">And now I discover that I have an overlap here and it overlaps.</span> </p>
<p><span m="3888729">It returns then the 15, 18 as an overlapping one.</span> </p>
<p><span m="3895093">If I were searching for 12,</span> </p>
<p><span m="3912000">I would go up to the top. And I look, 12,</span> <span m="3916556">14, it doesn't overlap here. I look at the 18 and it is</span> <span m="3922708">greater so I go left. I then look here.</span> </p>
<p><span m="3927037">Does it overlap? No.</span> </p>
<p><span m="3930000">So then what happens? I look at the left.</span> </p>
<p><span m="3934740">It says I go right. I look here.</span> </p>
<p><span m="3938413">Then I go and I look at the left.</span> </p>
<p><span m="3942207">It says, no, go right.</span> </p>
<p><span m="3944696">I go here, which is NIL, and now it is NIL.</span> </p>
<p><span m="3949674">I return NIL. And does 12,</span> <span m="3952637">14 overlap anything in the set? No.</span> </p>
<p><span m="3956666">So, therefore, it always works.</span> </p>
<p><span m="3962000">OK? OK.</span> </p>
<p><span m="3962971">We're going to do correctness in a minute, but let's just do</span> <span m="3972520">our analysis first so we don't have to do it because the</span> <span m="3981421">correctness is going to be a little bit tricky.</span> </p>
<p><span m="3990000">Time = O(lg n) because all I am doing is going down the tree.</span> </p>
<p><span m="3996095">It takes time proportional to the height of the tree.</span> </p>
<p><span m="4001377">That's pretty easy. If I need to list all overlaps,</span> <span m="4006457">suppose I want to list all the overlaps, how quickly can I do</span> <span m="4012552">that? Can somebody suggest how I</span> <span m="4015701">could use this as a subroutine to list all overlaps?</span> </p>
<p><span m="4033000">Suppose I have k overlaps, k intervals that overlap my</span> <span m="4036840">query interval and I want to find every single one of them,</span> <span m="4041043">how fast can I do that?</span> </p>
<p><span m="4051000">How do I do it?</span> </p>
<p><span m="4064000">How do I do it? If I search a second time,</span> <span m="4069271">I might get the same value.</span> </p>
<p><span m="4082000">Yeah, there you go. Do what?</span> </p>
<p><span m="4084400">When you find it delete it. Put it over to the side.</span> </p>
<p><span m="4088933">Find the next one, delete it until there are none</span> <span m="4093199">left. And then, if I don't want to</span> <span m="4096133">modify the data structure, insert them all back in.</span> </p>
<p><span m="4100577">It costs me k lg n if they are k overlaps.</span> </p>
<p><span m="4104221">That's actually called an output sensitive algorithm.</span> </p>
<p><span m="4110000">Because the running time of it depends upon how much it</span> <span m="4114064">outputs, so this is output sensitive.</span> </p>
<p><span m="4122000">The best to date for this problem, by the way,</span> <span m="4127357">of listing all is O(k+lg n) with a different data structure.</span> </p>
<p><span m="4134380">And, actually, that was open for a while as an</span> <span m="4139738">open problem. OK. Correctness.</span> </p>
<p><span m="4152000">Why does this algorithm always work correctly?</span> </p>
<p><span m="4156697">The key issue of the correctness is that I am picking</span> <span m="4162126">one way to go, left or right.</span> </p>
<p><span m="4165049">And that's great, as long as it is in that</span> <span m="4169328">subtree. But how do I know that when I</span> <span m="4173636">pick I decide I'm going to go left that it might not be in the</span> <span m="4179181">right subtree and I went the wrong way?</span> </p>
<p><span m="4182636">Or, if I went right, that I accidentally left one</span> <span m="4187000">out on the left side? We're always going just one</span> <span m="4191363">direction. And that's sort of the</span> <span m="4194272">cleverness of the code. The theorem is let's let L be</span> <span m="4199000">the set of intervals i prime in the left of a node x.</span> </p>
<p><span m="4205000">And R be the set of i primes in the right of x.</span> </p>
<p><span m="4214106">And now there are two parts I am going to show.</span> </p>
<p><span m="4223213">If the search goes right then the set of i prime in L,</span> <span m="4233705">such that i prime overlaps i is the empty set.</span> </p>
<p><span m="4244000">That's the first thing I do. If it goes right then there is</span> <span m="4248833">nothing in the left subtree that overlaps.</span> </p>
<p><span m="4252250">It's always, whenever the code goes right,</span> <span m="4255666">no problem, because there was nothing in the left subtree to</span> <span m="4260583">be found. Does everybody understand what</span> <span m="4263783">that says? We are going to prove this,</span> <span m="4265982">but I want to make sure people understand.</span> </p>
<p><span m="4268419">Because the second one is going to be harder to understand so</span> <span m="4271986">you've got to make sure you understand this one first.</span> </p>
<p><span m="4275136">Any questions about this? OK.</span> </p>
<p><span m="4276800">If the search goes left --</span> <span m="4287000">-- then the set of i prime in L such that i prime overlaps i</span> <span m="4300808">empty set implies that i prime --</span> <span m="4320000">OK. What is this saying?</span> </p>
<p><span m="4322329">If the search goes left, if the left was empty,</span> <span m="4326987">in other words, if you went left and you</span> <span m="4330936">discovered that there was nothing in there to find,</span> <span m="4336000">no overlapping interval to find then it is OK because it</span> <span m="4341568">wouldn't have helped me to go right anyway because there is</span> <span m="4347443">nothing in the right to be found.</span> </p>
<p><span m="4352000">So it is not guaranteeing that there is nothing to be found in</span> <span m="4357809">the left, but if there happens to be nothing to find in the</span> <span m="4363333">left it is OK because there was nothing to be found in the right</span> <span m="4369333">either. That is what the second one</span> <span m="4372571">says. In either case,</span> <span m="4374476">you're OK to go the way. So let's do this proof.</span> </p>
<p><span m="4385000">Does everybody understand what the proof says?</span> </p>
<p><span m="4389090">Understanding the proof is tricky.</span> </p>
<p><span m="4392090">It's logic. Logic is tricky.</span> </p>
<p><span m="4394545">Suppose the search goes right. We'll do the first one.</span> </p>
<p><span m="4407000">If left of x is NIL then we are done since we proved what we</span> <span m="4417275">wanted to prove. If we go right there are two</span> <span m="4424938">possibilities, either we have left of x be NIL</span> <span m="4432775">or left of x is not NIL. So if it is NIL we are OK</span> <span m="4440389">because we said if it goes right I want to prove this,</span> <span m="4445455">that the things in the left subtree that overlap is empty.</span> </p>
<p><span m="4450904">If there is nothing there, there is clearly nothing there</span> <span m="4456257">that overlaps. Otherwise, the low of i is</span> <span m="4460080">greater than m of the left of x.</span> </p>
<p><span m="4469000">If I look at x here, either x was NIL in the while</span> <span m="4474775">statement here or this is true. We just said it is not NIL so</span> <span m="4481847">let's take a look at, excuse me.</span> </p>
<p><span m="4485501">I'm on the wrong line. I am in this loop.</span> </p>
<p><span m="4490216">Left of x was not NIL and the low of i was this.</span> </p>
<p><span m="4495756">Which way am I going here? I am going right.</span> </p>
<p><span m="4501530">Therefore, this was not true. So either left of x was not</span> <span m="4506572">NIL, which was the first one, or low of i is greater than m</span> <span m="4511794">of left of x if I am going right.</span> </p>
<p><span m="4514675">If I'm going right one of those two had to be true.</span> </p>
<p><span m="4519176">The first one was easy. Otherwise, we have this,</span> <span m="4523408">low of i is greater than m of left of x.</span> </p>
<p><span m="4528000">Now this has got to be that value.</span> </p>
<p><span m="4531798">m of left of x is the right endpoint, is the high endpoint</span> <span m="4538359">of some interval in that subtree.</span> </p>
<p><span m="4542043">This is equal to the high of j for some j in L.</span> </p>
<p><span m="4547338">So m of left of x must be equal to the high of some endpoint</span> <span m="4554129">because that's how we're picking the m's.</span> </p>
<p><span m="4560000">For some j in the left subtree. And no other interval in L has</span> <span m="4573863">a larger high endpoint --</span> <span m="4587000">-- than high of j. If I draw a picture here,</span> <span m="4593456">I have over here i and this is the low of i.</span> </p>
<p><span m="4599400">And I have j where we say its high endpoint is less than the</span> <span m="4607557">low of i. This is j, and I don't know how</span> <span m="4613087">far over it goes. And this has high of j --</span> <span m="4628000">-- which is the highest one in the left subtree.</span> </p>
<p><span m="4632575">There is nobody else who has got a higher right endpoint.</span> </p>
<p><span m="4638026">There is nobody else in this subtree who could possibly</span> <span m="4643282">overlap I, because all of them end somewhere before this point.</span> </p>
<p><span m="4650000">This point is the highest one in a subtree.</span> </p>
<p><span m="4658076">Therefore, i prime in L such that i prime overlaps i is the</span> <span m="4669230">empty set. And now the hard case.</span> </p>
<p><span m="4675384">Everybody stretch. Hard case.</span> </p>
<p><span m="4680786">Does everybody follow this? The point is that because this</span> <span m="4685266">is the highest guy everybody else has to be left,</span> <span m="4689039">so if you didn't overlap the highest guy you're not going to</span> <span m="4693675">overlap anybody. Suppose the search goes left --</span> <span m="4704000">-- and that there is nothing to overlap in the left subtree.</span> </p>
<p><span m="4714000">I went left here but I am not going to find anything.</span> </p>
<p><span m="4718777">Now I want to prove that it wouldn't have helped me to go</span> <span m="4723922">right. That's essentially what the</span> <span m="4726954">theorem here says. That if I assume this it</span> <span m="4730812">wouldn't have helped to go right.</span> </p>
<p><span m="4733752">I want to show that there is nothing in the right subtree.</span> </p>
<p><span m="4740000">So going left was OK because I wasn't going to find anything</span> <span m="4747277">anyway. Similarly, we go through a</span> <span m="4751348">similar analysis. Low of i is less than or equal</span> <span m="4757145">to m of the left of x, which once again is equal to</span> <span m="4763312">the high of j for some j in L. We are just saying if I go left</span> <span m="4774053">these things must be true. I went left.</span> </p>
<p><span m="4781473">Since j is in L it doesn't overlap i, because the set of</span> <span m="4792213">things that overlap i in L is empty set.</span> </p>
<p><span m="4801000">Since j doesn't overlap i that implies that the high of i must</span> <span m="4814022">be less than the low of j.</span> </p>
<p><span m="4825000">Since j is in L and it doesn't overlap i, what are the</span> <span m="4831913">possibilities? We essentially have here,</span> <span m="4838145">if I draw a picture, I have j and L and I have i</span> <span m="4845939">here. The point is that it doesn't</span> <span m="4851412">overlap it, therefore, it must be to the left because</span> <span m="4860035">its low endpoint is less than this.</span> </p>
<p><span m="4867000">But it doesn't overlap it, therefore its high endpoint</span> <span m="4871659">must be left of the low of this one.</span> </p>
<p><span m="4888000">Now we will use the binary search tree property.</span> </p>
<p><span m="4897000">That implies that for all i prime in R, everything in the</span> <span m="4904576">right subtree, we have a low of j is less than</span> <span m="4910664">or equal to low of i prime, so we're sorted on the low</span> <span m="4917835">endpoints. Everything in the right subtree</span> <span m="4922439">must have a low endpoint that starts to the right of the low</span> <span m="4927081">endpoint of j because j in the left subtree.</span> </p>
<p><span m="4930464">And everything in the whole tree is sorted by low endpoints,</span> <span m="4935106">so anything in the right subtree is going to start over</span> <span m="4939355">here. Those are other things.</span> </p>
<p><span m="4941558">These are the i primes in R. We don't know how many there</span> <span m="4945964">are, but they all start to the right of this point.</span> </p>
<p><span m="4951000">So they cannot overlap i either, therefore,</span> <span m="4960333">there is nothing. All the i primes in R is also</span> <span m="4970555">nobody.</span> </p>
<p><span m="4977000">Just to go back again, the basic idea is that since</span> <span m="4982942">this guy doesn't overlap the guy who is in the left and everybody</span> <span m="4990547">to the right is going to be further to the right,</span> <span m="4996252">if I go left and don't find anything that's OK because I am</span> <span m="5003144">not going to find anything over here anyway.</span> </p>
<p><span m="5008255">They are not going to overlap. Data-structure augmentation,</span> <span m="5015147">great stuff. It will give you a lot of rich,</span> <span m="5021652">rich data structures built on any ones you know,</span> <span m="5027189">hash tables, heaps, binary search trees and</span> <span m="5032137">so forth.</span> </p>
</div>
        <div id="vid_transcript" itemprop="description" class="tabContent hide">
<h2 class="subhead">Free Downloads</h2>
<h3 class="subsubhead">Video</h3>
<ul>
<li>iTunes U (<a href="https://itunes.apple.com/us/itunes-u/id341597754">MP4 - 175MB</a>)</li>
<li>Internet Archive (<a href="http://www.archive.org/download/MIT6.046JF05MPEG4/ocw-6.046-24oct2005-220k.mp4">MP4 - 344MB</a>)</li>
</ul>
<br><h3 class="subsubhead">Free Streaming</h3>
<ul><li><a href="http://videolectures.net/mit6046jf05_introduction_algorithms/">VideoLectures.net</a></li></ul>
<br><h3 class="subsubhead">Subtitle</h3>
<ul><li>English - US (<a href="../../../contents/video-lectures/lecture-11-augmenting-data-structures-dynamic-order-statistics-interval-trees/RHyGlha7bjE.srt">SRT</a>)</li></ul>
</div>
    
   </div>  




      					 
        <div class="" id="parent-fieldname-bottom_html_area">
            
            
        </div>
    
                    </div>
<!--Course_inner_chip tag close -->
           		</div>
<!--Course_wrapper tag close --> 
            </div>
<!--left tag close -->
            <div id="right">
                <!--Begin Right Portion -->
                    <div>
    
<div id="portletwrapper-6f63772e7269676874746f70706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a646f6e617465" class="portletWrapper kssattr-portlethash-6f63772e7269676874746f70706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a646f6e617465">
<div class="portletStaticText portlet-static-donate"><p class="zero"><a href="http://ocw.mit.edu/donate"><img src="../../../common/images/button_donate-now.png" alt="Donate Now." class="donate"></a></p></div>

</div>




</div>

                	<div>
    



</div>


        <div class="" id="parent-fieldname-rsi_top_html_area">
            
            
        </div>
    

<!-- RSI google ad space-->


<div id="google_ads">    
    <script type="text/javascript" src="http://partner.googleadservices.com/gampad/google_service.js"></script><script type="text/javascript">GS_googleAddAdSenseService("ca-pub-6588555046597237");GS_googleEnableAllServices();</script><script type="text/javascript">GA_googleAddSlot("ca-pub-6588555046597237", "VIDEO_INDIVIDUAL_SLOT_A_DL");GA_googleAddSlot("ca-pub-6588555046597237", "VIDEO_INDIVIDUAL_SLOT_B_DL");GA_googleAddSlot("ca-pub-6588555046597237", "VIDEO_INDIVIDUAL_SLOT_C_DL");</script><script type="text/javascript">GA_googleFetchAds();</script><script language="javascript" type="text/javascript">
GA_googleAddAttr("TYPE","HOUSE");
GA_googleAddAttr("DEPARTMENT","6");
GA_googleAddAttr("CRS_BEG2","04");
GA_googleAddAttr("CRS_END","6J");
GA_googleAddAttr("SESSION","F");
GA_googleAddAttr("YEAR","05");
</script><script type="text/javascript">GA_googleFillSlot("VIDEO_INDIVIDUAL_SLOT_A_DL");</script><script type="text/javascript">GA_googleFillSlot("VIDEO_INDIVIDUAL_SLOT_B_DL");</script><script type="text/javascript">GA_googleFillSlot("VIDEO_INDIVIDUAL_SLOT_C_DL");</script>
</div>

<!-- End RSI ads--> 

<div>
    



</div>

            </div>
<!--Right div close -->
            <div class="clear"></div> 
        </div>
<!--grid tag close --> 
      </div>
		
		<div id="bottom">
			<div id="grid">
				
<div id="portletwrapper-6f63772e626f74746f6d706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d666f6f746572" class="portletWrapper kssattr-portlethash-6f63772e626f74746f6d706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d666f6f746572">
<div class="portletStaticText portlet-static-site-footer">
<!--googleoff: index--> <div id="bottom"><div id="grid">
<!-- *begin footer* --> <div role="navigation sitemap" id="footer">
<div class="grid_2 alpha" id="foot-c1">
<h4 class="footer">Find Courses</h4> <ul class="foot-bullet">
<li><a href="http://ocw.mit.edu/courses/find-by-topic/">Find by Topic</a></li>     <li><a href="http://ocw.mit.edu/courses/find-by-number/">Find by Course Number</a></li>     <li><a href="http://ocw.mit.edu/courses/find-by-department/">Find by Department</a></li>     <li><a href="http://ocw.mit.edu/courses/audio-video-courses/">Audio/Video Courses</a></li>     <li><a href="http://ocw.mit.edu/courses/subtitled/">Courses with Subtitles</a></li>     <li><a href="http://ocw.mit.edu/courses/online-textbooks/">Online Textbooks</a></li>     <li><a href="http://ocw.mit.edu/courses/new-courses/">New Courses</a></li>     <li><a href="http://ocw.mit.edu/courses/most-visited-courses/">Most Visited Courses</a></li>     <li><a href="http://ocw.mit.edu/courses/ocw-scholar/">OCW Scholar Courses</a></li>     <li><a href="http://ocw.mit.edu/courses/this-course-at-mit/">This Course at MIT</a></li>     <li><a href="http://ocw.mit.edu/resources/">Supplemental Resources</a></li>     <li><a href="http://ocw.mit.edu/courses/translated-courses/">Translated Courses</a></li>     <li><a href="http://ocw.mit.edu/courses/">View All Courses</a></li> </ul>
</div> <div class="grid_2" id="foot-c2">
<h4 class="footer">About</h4> <ul class="foot-bullet">
<li><a href="http://ocw.mit.edu/about/">About OpenCourseWare</a></li>     <li><a href="http://ocw.mit.edu/about/site-statistics/">Site Stats</a></li>     <li><a href="http://ocw.mit.edu/about/ocw-stories/">OCW Stories</a></li>     <li><a href="http://ocw.mit.edu/about/media-coverage/">Media Coverage</a></li>     <li><a href="http://ocw.mit.edu/about/newsletter/">Newsletter</a></li>     <li><a href="http://ocw.mit.edu/about/media-coverage/press-releases/">Press Releases</a></li> </ul>
</div> <div class="grid_2" id="foot-c3">
<h4 class="footer">Donate</h4> <ul class="foot-bullet">
<li><a href="http://ocw.mit.edu/donate">Make a Donation</a></li>     <li><a href="http://ocw.mit.edu/donate/why-donate/">Why Donate?</a></li>     <li><a href="http://ocw.mit.edu/donate/our-supporters/">Our Supporters</a></li>     <li><a href="http://ocw.mit.edu/donate/other-ways-to-contribute/">Other Ways to Contribute</a></li>     <li><a href="http://ocw.mit.edu/donate/shop-ocw/">Shop OCW</a></li>     <li><a href="http://ocw.mit.edu/support/">Become a Corporate Sponsor</a></li> </ul>
</div> <div class="grid_2" id="foot-c4">
<h4 class="footer">Featured Sites</h4> <ul class="foot-bullet">
<li><a href="http://ocw.mit.edu/high-school/">Highlights for High School</a></li>     <li><a href="http://ocw.mit.edu/educator/">OCW Educator</a></li>     <li><a href="http://ocw.mit.edu/courses/crosslinks/">MIT Crosslinks and OCW</a></li>     <li><a href="http://ocw.mit.edu/ans7870/featured/mitx-courses-on-edx.htm">MITx Courses on edX</a></li>     <li><a href="http://teachingexcellence.mit.edu/">Teaching Excellence at MIT</a></li>     <li><a href="http://www.oeconsortium.org/">Open Education Consortium</a></li> </ul>
<h4 style="margin-top: 14px;" class="footer">Tools</h4> <ul class="foot-bullet">
<li><a href="http://ocw.mit.edu/help/">Help &amp; FAQs</a></li>     <li><a href="../../../common/jsp/feedback.htm">Contact Us</a></li>     <li><a href="../../../common/search/AdvancedSearch.htm">Advanced Search</a></li>     <li><a href="http://ocw.mit.edu/help/site-map/">Site Map</a></li>     <li><a href="../../../common/terms/index.htm">Privacy &amp; Terms of Use</a></li>     <li><a href="http://ocw.mit.edu/help/rss/">RSS Feeds</a></li> </ul>
</div> <div class="grid_4 omega" id="foot-c5">
<h4 class="footer">Our Corporate Supporters</h4> <!-- HOME_CORP_LOGO_1 --> <div class="sponsors_google_ads_even" id="div-gpt-ad-1388181177156-0"><script type="text/javascript">
googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-0'); });
</script></div> <!-- HOME_CORP_LOGO_2 --> <div class="sponsors_google_ads_odd" id="div-gpt-ad-1388181177156-1"><script type="text/javascript">
googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-1'); });
</script></div> <!-- HOME_CORP_LOGO_3 --> <div class="sponsors_google_ads_even" id="div-gpt-ad-1388181177156-2"><script type="text/javascript">
googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-2'); });
</script></div> <!-- HOME_CORP_LOGO_4 --> <div class="sponsors_google_ads_odd" id="div-gpt-ad-1388181177156-3"><script type="text/javascript">
googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-3'); });
</script></div> <!-- HOME_CORP_LOGO_5 --> <div class="sponsors_google_ads_even" id="div-gpt-ad-1388181177156-4"><script type="text/javascript">
googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-4'); });
</script></div> <!-- HOME_CORP_LOGO_6 --> <div class="sponsors_google_ads_odd" id="div-gpt-ad-1388181177156-5"><script type="text/javascript">
googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-5'); });
</script></div>
</div> <div class="grid_12 alpha omega" style="border-top: thin solid #d5c9ba; padding-top: 24px; margin-bottom: 10px; text-align: center;"><p style="font-family: TitilliumText22LRegular,Verdana; text-align: center; font-size: 1.1em;">Support for <span style="letter-spacing: 0.5px;"><strong>MIT OPENCOURSEWARE'S 15th anniversary</strong></span> is provided by <a href="http://www.sapientnitro.com/en-us.html#home"><img style="width: 145px; height: 35px; vertical-align: middle; margin-left: 7px;" alt="SapientNitro logo and nameplate." src="../../../common/images/logo_sapient.png"></a></p></div> <div itemtype="http://schema.org/CollegeOrUniversity" itemscope="" itemprop="publisher" class="grid_12 alpha omega">
<h4 style="border-top: thin solid #d5c9ba; padding-top: 10px; margin-bottom: 10px;" class="footer">About <span itemprop="name">MIT OpenCourseWare</span>
</h4> <p itemprop="description" style="color: #999; font-size: 1em; line-height: 1.5em; margin-top: 10px;">MIT OpenCourseWare makes the materials used in the teaching of almost all of MIT's subjects available on the Web, free of charge. With more than 2,200 courses available, OCW is delivering on the promise of open sharing of knowledge. <a href="http://ocw.mit.edu/about/">Learn more »</a></p>
</div> <div style="border-top: none;" class="grid_12 alpha omega" id="foot-copy">
<a href="http://web.mit.edu"><img style="width: 195; height: 44;" alt="Massachusetts Institute of Technology logo and name." src="../../../common/images/logo_mit.png"></a><a href="http://odl.mit.edu"><img style="width: 289; height: 54; vertical-align: top;" alt="MIT Office of Digital Learning logo and name." src="http://ocw.mit.edu/images/logo_odl.png"></a><a href="http://www.oeconsortium.org/"><img style="width: 219px; height: 59px; vertical-align: top;" alt="Open Education Consortium logo." src="http://ocw.mit.edu/images/logo_oec.png"></a><a itemprop="useRightsUrl" rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/"><img style="width: 126px; height: 44px; margin-right: 0; margin-left: 13px;" alt="Creative Commons logo with terms BY-NC-SA." src="../../../common/images/cc_by-nc-sa.png"></a> <p class="copyright">© 2001–2015<br> Massachusetts Institute of Technology</p> <p style="font-size: 0.9em; margin-bottom: 15px;">Your use of the MIT OpenCourseWare site and materials is subject to our <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/">Creative Commons License</a> and other <a rel="cc:morePermissions" href="../../../common/terms/index.htm">terms of use</a>.</p>
</div>
</div>
</div></div> <!--googleon: index-->
</div>

</div>





                
			</div> <!-- bottom grid end -->
		</div>
<!-- bottom end -->
		
		
   </body>
</html>
