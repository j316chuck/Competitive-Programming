<!DOCTYPE html><html lang="en">
<head>
<meta charset="utf-8">
<meta name="format-detection" content="telephone=no">
<title>Lecture 25: Advanced Topics (cont.) - Discussion of Follow-on Classes | Video Lectures | Introduction to Algorithms (SMA 5503) | Electrical Engineering and Computer Science | MIT OpenCourseWare</title>
<!-- Begin Automatic Metadata Insertion --><meta content="6-046j-introduction-to-algorithms-sma-5503-fall-2005" name="WT.cg_n">
<meta content="Lecture 25: Advanced Topics (cont.) - Discussion of Follow-on Classes" name="WT.cg_s">
<meta content="" name="Description">
<meta content="Leiserson, Charles" name="Author">
<meta content="Demaine, Erik" name="Author">
<meta content="algorithms,efficient algorithms,sorting,search trees,heaps,hashing,divide-and-conquer,dynamic programming,amortized analysis,graph algorithms,shortest paths,network flow,computational geometry,number-theoretic algorithms,polynomial and matrix calculations,caching,parallel computing,Algorithms and Data Structures" name="keywords">
<meta content="6.046J Introduction to Algorithms (SMA 5503) | Lecture 25: Advanced Topics (cont.) - Discussion of Follow-on Classes" name="Search_Display">
<meta content="Algorithms and Data Structures" itemprop="about">
<!-- End Automatic Metadata Insertion --><link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/grid.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/base.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/menu.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/jquery.bubblepopup.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/courses.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/courses_new.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/jquery.jscrollpane.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/media_tabs.css">
<link href="http://ocw.mit.edu/xml/ocwcc.rdf" type="application/rdf+xml" rel="metadata">
<link rel="canonical" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-046j-introduction-to-algorithms-sma-5503-fall-2005/video-lectures/lecture-25-advanced-topics-cont.-discussion-of-follow-on-classes">
<link rel="apple-touch-icon" href="../../../common/images/apple-touch-icon.png">
<script type="text/javascript" src="../../../common/scripts/jquery.js"></script><script type="text/javascript" src="../../../common/scripts/ocw-media-utils-offline.js"></script><script type="text/javascript" src="../../../common/scripts/ocw-offline.js"></script><script type="text/javascript" src="../../../common/scripts/jquery.bubblepopup.min.js"></script><script type="text/javascript" src="../../../common/scripts/jquery-ui.min.js"></script><script type="text/javascript" src="../../../common/scripts/jquery.jscrollpane.min.js"></script><script type="text/javascript" src="../../../common/scripts/bubble-popup-offline.js"></script><script type="text/javascript">
      $(document).ready(function() {
        $("#tabs").tabs();
        IpadScroller();
      });
    </script>
</head>
<body itemscope itemtype="http://schema.org/WebPage">
        
	

        <div id="top">
			<div id="grid">
				
				
					
<div id="portletwrapper-6f63772e746f70706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d686561646572" class="portletWrapper kssattr-portlethash-6f63772e746f70706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d686561646572">
<div class="portletStaticText portlet-static-site-header">
<!--googleoff: index-->
<div class="grid_6 alpha" role="banner" id="banner"><a href="http://ocw.mit.edu/"><img class="logo" alt="MIT OpenCourseWare, Massachusetts Institute of Technology" src="../../../common/images/ocw_mast.png"></a></div>
<div class="grid_6 omega" role="form toolbar" id="subscribe">
<div class="module">
<table class="social"><tbody><tr>
<td class="socialbutton"><a href="http://ocw.mit.edu/subscribe/index.htm?utm_source=header"><img src="../../../common/images/trans.gif" alt="An icon depicting an envelope.">Subscribe to the OCW Newsletter</a></td>
            <td>
<a href="https://plus.google.com/104567381989352550847/posts"><img alt="Click to visit our Google+ page." src="../../../common/images/icon_gp.png"></a><a href="https://www.pinterest.com/mitocw/pins/"><img alt="Click to visit our Pinterest page." src="../../../common/images/icon_pin.png"></a><a href="http://facebook.com/mitocw"><img alt="Click to visit our Facebook page." src="../../../common/images/icon_fb.png"></a><a href="http://twitter.com/mitocw"><img alt="Click to visit our Twitter feed." src="../../../common/images/icon_tw.png"></a>
</td>
        </tr></tbody></table>
</div>
<p class="helplinks"><a href="http://ocw.mit.edu/help">Help</a>   |   <a href="../../../common/jsp/feedback.htm">Contact Us</a></p>
</div>
<div class="clear"> </div>
<!--googleon: index-->
</div>

</div>





<!--googleoff: index-->
<div id="mega" role="navigation" class="grid_8 alpha">        
	<ul id="menu">
<li id="menu_home">
            <a href="http://ocw.mit.edu/"><img src="../../../common/images/top-nav_home.png" class="home_icon" alt="Click for site home page."></a><!-- Begin Home Item -->
        </li>
<!-- End Home Item -->        
        <li class="selected">
            <a href="#" class="drop">Find Courses</a><!-- Begin 5 columns Item -->
            <div class="dropdown_5columns-a mega-courses">                    
                <div class="col_1a">
                    <div class="row_1a">
                        <div class="quart">
                            <h2 class="nav">Find courses by:</h2>
                            <ul class="nav-bullet find_by">
<li><a href="http://ocw.mit.edu/courses/find-by-topic/">Topic</a></li>
                                <li><a href="http://ocw.mit.edu/courses/find-by-number/">MIT Course Number</a></li>
                                <li><a href="http://ocw.mit.edu/courses/find-by-department/">Department</a></li>
                            </ul>
<ul style="margin-top: 88px;" class="nav-bullet find_by">
<li style="font-weight: normal; font-size: 1em;"><a href="http://ocw.mit.edu/courses/">View All Courses</a></li>
							</ul>
</div>
                        <div class="quart">
                            <h2 class="nav">Collections</h2>
                            <ul class="nav-bullet">
<li><a href="http://ocw.mit.edu/courses/audio-video-courses/">Audio/Video Lectures</a></li>
                                <li><a href="http://ocw.mit.edu/courses/online-textbooks/">Online Textbooks</a></li>
                                <li><a href="http://ocw.mit.edu/courses/new-courses/">New Courses</a></li>
                                <li><a href="http://ocw.mit.edu/courses/most-visited-courses/">Most Visited Courses</a></li>
                                <li><a href="http://ocw.mit.edu/courses/ocw-scholar/">OCW Scholar Courses</a></li>
                                <li><a href="http://ocw.mit.edu/courses/this-course-at-mit/">This Course at MIT</a></li>
                                <li><a href="http://ocw.mit.edu/resources/">Supplemental Resources</a></li>
                            </ul>
</div>
                        <div class="clear"> </div>
                    </div>
                    <div class="row_1b">
                        <h2 class="nav">Cross-Disciplinary Topic Lists</h2>
                        <div class="quart">
                        <ul class="nav-bullet">
<li><a href="http://ocw.mit.edu/courses/energy-courses">Energy</a></li>
                            <li><a href="http://ocw.mit.edu/courses/entrepreneurship">Entrepreneurship</a></li>
                            <li><a href="http://ocw.mit.edu/courses/environment-courses">Environment</a></li>
                        </ul>
</div>    
                        <div class="quart">
                        <ul class="nav-bullet">
<li><a href="http://ocw.mit.edu/courses/intro-programming">Introductory Programming</a></li>
                            <li><a href="http://ocw.mit.edu/courses/life-sciences">Life Sciences</a></li>
                            <li><a href="http://ocw.mit.edu/courses/transportation-courses">Transportation</a></li>
                        </ul>
</div>
                        <div class="clear"> </div>
                    </div>
                    <div class="clear"> </div>
                </div>
                <div class="col_1b">
                    <h2 class="nav">Translated Courses</h2>
                    <ul class="nav-bullet">
<li><a href="http://ocw.mit.edu/courses/translated-courses/traditional-chinese">繁體字 / Traditional Chinese</a></li>
                        <li><a href="http://ocw.mit.edu/courses/translated-courses/spanish">Español / Spanish</a></li>
                        <li><a href="http://ocw.mit.edu/courses/translated-courses/portuguese">Português / Portuguese</a></li>
                        <li><a href="http://ocw.mit.edu/courses/translated-courses/persian">فارسی / Persian</a></li>
                        <li><a href="http://ocw.mit.edu/courses/translated-courses/turkish">Türkçe / Turkish</a></li>
                        <li><a href="http://ocw.mit.edu/courses/translated-courses/korean">(비디오)한국 / Korean</a></li>
                        <li><a href="http://ocw.mit.edu/courses/translated-courses">More...</a></li>
                    </ul>
</div>
            </div>
        </li>
        <li>
            <a href="" class="drop">About</a>
            <div class="dropdown_1column-a">
                <div class="col_1">
                    <ul class="nav-bullet mega-div-bottom">
<li><a href="http://ocw.mit.edu/about/">About MIT OpenCourseWare</a></li>
                    </ul>
<ul class="nav-bullet mega-div-bottom">
<li><a href="http://ocw.mit.edu/about/site-statistics/">Site Stats</a></li>
                        <li><a href="http://ocw.mit.edu/about/ocw-stories/">OCW Stories</a></li>                        
                    </ul>
<ul class="nav-bullet">
<li><a href="http://ocw.mit.edu/about/media-coverage/">Media Coverage</a></li>
                        <li><a href="http://ocw.mit.edu/about/newsletter/">Newsletter</a></li>                        
                    </ul>
</div>
            </div>  
        </li>    
        <li>
            <a href="" class="drop">Donate</a>        
            <div class="dropdown_1column-a">
                    <div class="col_1">
                        <ul class="nav-bullet mega-div-bottom">
<li><a href="http://ocw.mit.edu/donate/">Make a Donation</a></li>
                            <li><a href="http://ocw.mit.edu/donate/why-donate/">Why Donate?</a></li>
                            <li><a href="http://ocw.mit.edu/donate/our-supporters/">Our Supporters</a></li>
                            <li><a href="http://ocw.mit.edu/donate/other-ways-to-contribute/">Other Ways to Contribute</a></li>
                            <li><a href="http://ocw.mit.edu/donate/shop-ocw">Shop OCW</a></li>
                        </ul>
<ul class="nav-bullet">
<li><a href="http://ocw.mit.edu/support/">Become a Corporate Sponsor</a></li>
                        </ul>
</div>
            </div>            
        </li>        
        <li>
            <a href="" class="drop">Featured Sites</a>        
            <div class="dropdown_1column-a">
                <div class="col_1">
                    <ul class="nav-bullet mega-div-bottom">
<li><a href="http://ocw.mit.edu/high-school/">Highlights for High School</a></li>
                        <li><a href="http://ocw.mit.edu/educator/">OCW Educator</a></li>
                        <li><a href="http://ocw.mit.edu/courses/crosslinks/">MIT Crosslinks and OCW</a></li>                        
                    </ul>
<ul class="nav-bullet mega-div-top">
<li><a href="http://ocw.mit.edu/ans7870/featured/mitx-courses-on-edx.htm">MITx Courses on edX</a></li>
                        <li><a href="http://teachingexcellence.mit.edu/">Teaching Excellence at MIT</a></li>
						<li><a href="http://www.oeconsortium.org/">Open Education Consortium</a></li>
                    </ul>
</div>
            </div>            
        </li>
    </ul>
</div>
<div id="search" role="search" class="grid_4 omega">
    
    <form method="get" action="../../../common/search/AdvancedSearch.htm">
     	 <table class="search"><tbody><tr>
<td class="black"><input type="text" onblur="fillSearchBox()" onfocus="clearSearchBox()" maxlength="255" value="Search" name="q" class="greytext searchField" id="terms"></td> 			 
                    <td class="black"><input type="image" src="../../../common/images/button_search.png" name="btnG" class="sub_button"></td>			 
                    <td class="text2"><a href="../../../common/search/AdvancedSearch.htm">Advanced<br>Search</a></td>
                </tr></tbody></table>
</form>
</div>
<div class="clear"></div>
<!--googleon: index-->
<!-- *end header* -->  

				
				
			</div>
<!-- top grid end -->
		</div>
<!-- top end -->
			
		<div id="center_media">
      	<div id="grid">
      		<div id="left">
        		<div id="breadcrumb_media">
                	<p>

    <a href="http://ocw.mit.edu/">Home</a>
    
        »
        
    
    
        
            <a href="http://ocw.mit.edu/courses">Courses</a>
            
                »
                
            
            
         
    
    
        
            <a href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science">Electrical Engineering and Computer Science</a>
            
                »
                
            
            
         
    
    
        
            <a href="../../../contents/index.htm">Introduction to Algorithms (SMA 5503)</a>
            
                »
                
            
            
         
    
    
        
            <a href="../../../contents/video-lectures/index.htm">Video Lectures</a>
            
                »
                
            
            
         
    
    
        
            
            
            Lecture 25: Advanced Topics (cont.) - Discussion of Follow-on Cla
         
    
</p>

            	</div>
            	<div class="clear"></div>
        		<div id="media_title">
        		<h1 class="title" itemprop="name" property="dct:title">
        <span class="" id="parent-fieldname-title">
            Lecture 25: Advanced Topics (cont.) - Discussion of Follow-on Classes
        </span>
    </h1>
        		</div>
           		<div class="clear"></div>
           		<div id="course_wrapper_media">
           			<div id="course_nav">
           				<script language="javascript" type="text/javascript">
function toggleMenu(objID) {
  if (!document.getElementById) return;
  var ob = document.getElementById(objID);
  ob.className = (ob.className == 'selected')?'': 'selected';
}
function toggleClass(id)
{
  var divtoggleClass= document.getElementById(id);
  divtoggleClass.className = (divtoggleClass.className == 'mO')?'mC': 'mO';
  return false;
}
function changeAlt(id)
{
  id.alt = (id.alt == 'Expand Menu')?'Collapse Menu' : 'Expand Menu';
  id.title = (id.title == 'Expand Menu')?'Collapse Menu' : 'Expand Menu';
}
</script><!--Left Nav Starts --><ul>
<li class="">
			   			<a href="../../../contents/index.htm">
		                  Course Home  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/syllabus/index.htm">
		                  Syllabus  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/calendar/index.htm">
		                  Calendar  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/readings/index.htm">
		                  Readings  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/assignments/index.htm">
		                  Assignments  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/exams/index.htm">
		                  Exams  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="selected">
			   			<a href="../../../contents/video-lectures/index.htm">
		                  Video Lectures  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    
		    
         	
	<!--second tal block close-->  
	
</ul>
<!--Left Nav Ends -->
</div>
           			<div id="course_inner_media">
      					 
        <div class="" id="parent-fieldname-text">
            
            
        </div>
    
      					 

<script type="text/javascript">var caption_embed_1 ={'English - US': '/courses/electrical-engineering-and-computer-science/6-046j-introduction-to-algorithms-sma-5503-fall-2005/video-lectures/lecture-25-advanced-topics-cont.-discussion-of-follow-on-classes/zjUDy6a5vx4.srt'}</script><div id="media-embed">
         <div class="attention_message" id="embed_1">
<p>Flash and JavaScript are required for this feature.</p>
<p>Download the video from <a href="https://itunes.apple.com/us/itunes-u/id341597754">iTunes U</a> or the <a href="http://www.archive.org/download/MIT6.046JF05MPEG4/ocw-6.046-14dec2005-220k.mp4">Internet Archive</a>.</p>
</div>
     </div>
    
     <script type="text/javascript">ocw_embed_chapter_media('embed_1', 'http://www.youtube.com/v/zjUDy6a5vx4', 'youtube', '/courses/electrical-engineering-and-computer-science/6-046j-introduction-to-algorithms-sma-5503-fall-2005/video-lectures/lecture-25-advanced-topics-cont.-discussion-of-follow-on-classes', 'http://img.youtube.com/vi/zjUDy6a5vx4/0.jpg',0,0, 'http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-046j-introduction-to-algorithms-sma-5503-fall-2005/video-lectures/lecture-25-advanced-topics-cont.-discussion-of-follow-on-classes/zjUDy6a5vx4.srt')</script><div id="transcript1"></div>
				 <script type="text/javascript">setThreePlayTranscriptPlugin(2, 703413)</script><script type="text/javascript" src="http://p3.3playmedia.com/p3.js"></script><div id="media_resource_next_prev_nav" style="margin-top: 1em;">
        <p>
        
            <a href="../../../contents/video-lectures/lecture-24-advanced-topics-cont./index.htm">
                <img src="../../../common/images/btn_previous_resource.png" style="margin: 0 30px 0 50px;" alt="Previous track" title="Previous track"></a>
     	
     	
        
       </p>
     </div>
 


<script type="text/javascript">
		window.onload=function(){
		init();
		
		}
		var tabLinks = new Array();
		var contentDivs = new Array();
		function init() {
		  // Grab the tab links and content divs from the page
		  var tabListItems = document.getElementById('tabs').childNodes;
		  for ( var i = 0; i < tabListItems.length; i++ ) {
			if ( tabListItems[i].nodeName == "LI" ) {
			  var tabLink = getFirstChildWithTagName( tabListItems[i], 'A' );
			  var id = getHash( tabLink.getAttribute('href') );
			  tabLinks[id] = tabLink;
			  contentDivs[id] = document.getElementById( id );
			}
		  }
		  // Assign onclick events to the tab links, and
		  // highlight the first tab
		  var i = 0;
		  for ( var id in tabLinks ) {
			tabLinks[id].onclick = showTab;
			tabLinks[id].onfocus = function() { this.blur() };
			if ( i == 0 ) tabLinks[id].className = 'selected';
			i++;
		  }
		  // Hide all content divs except the first
		  var i = 0;
		  for ( var id in contentDivs ) {
			if ( i != 0 ) contentDivs[id].className = 'tabContent hide';
			i++;
		  }
		}
		function showTab() {
		  var selectedId = getHash( this.getAttribute('href') );
		  // Highlight the selected tab, and dim all others.
		  // Also show the selected content div, and hide all others.
		  for ( var id in contentDivs ) {
			if ( id == selectedId ) {
			  tabLinks[id].className = 'selected';
			  contentDivs[id].className = 'tabContent';
			} else {
			  tabLinks[id].className = '';
			  contentDivs[id].className = 'tabContent hide';
			}
		  }
		  // Stop the browser following the link
		  return false;
		}
		function getFirstChildWithTagName( element, tagName ) {
		  for ( var i = 0; i < element.childNodes.length; i++ ) {
			if ( element.childNodes[i].nodeName == tagName ) return element.childNodes[i];
		  }
		}
		function getHash( url ) {
		  var hashPos = url.lastIndexOf ( '#' );
		  return url.substring( hashPos + 1 );
		}
 </script><div id="media_tabs">
     
        <ul id="tabs">
<li class="first">
                <a href="#vid_about" class="selected">About this Video</a>
            </li>
            <li class="">
                <a href="#vid_index" class="">Playlist</a>
            </li>
            <li class="">
                <a href="#vid_playlist" class="">Related Resources</a>
            </li>
            <li class="">
                <a href="#vid_related" class="">Transcript</a>
            </li>
            <li class="">
                <a href="#vid_transcript" class="">Download this Video</a>
            </li>
        </ul>
<div id="vid_about" itemprop="description" class="tabContent">
<p><strong>Topics covered:</strong> Advanced Topics (cont.) - Discussion of Follow-on Classes</p>                                            <p><strong>Instructors:</strong> Prof. Erik Demaine, Prof. Charles Leiserson</p>
</div>
        <div id="vid_index" itemprop="description" class="tabContent hide">
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-1-administrivia-introduction-analysis-of-algorithms-insertion-sort-mergesort/index.htm">
<img src="../../../contents/video-lectures/lecture-1-administrivia-introduction-analysis-of-algorithms-insertion-sort-mergesort/6_046J_lec01_th.jpg" title="Lecture 1: Administrivia; Introduction; Analysis of Algorithms, Insertion Sort, Mergesort" alt="Lecture 1: Administrivia; Introduction; Analysis of Algorithms, Insertion Sort, Mergesort"><p>Lecture 1: Administrivia; I...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-2-asymptotic-notation-recurrences-substitution-master-method/index.htm">
<img src="../../../contents/video-lectures/lecture-2-asymptotic-notation-recurrences-substitution-master-method/6_046J_lec02_th.jpg" title="Lecture 2: Asymptotic Notation; Recurrences; Substitution, Master Method" alt="Lecture 2: Asymptotic Notation; Recurrences; Substitution, Master Method"><p>Lecture 2: Asymptotic Notat...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-3-divide-and-conquer-strassen-fibonacci-polynomial-multiplication/index.htm">
<img src="../../../contents/video-lectures/lecture-3-divide-and-conquer-strassen-fibonacci-polynomial-multiplication/6_046J_lec03_th.jpg" title="Lecture 3: Divide-and-Conquer: Strassen, Fibonacci, Polynomial Multiplication" alt="Lecture 3: Divide-and-Conquer: Strassen, Fibonacci, Polynomial Multiplication"><p>Lecture 3: Divide-and-Conqu...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-4-quicksort-randomized-algorithms/index.htm">
<img src="../../../contents/video-lectures/lecture-4-quicksort-randomized-algorithms/6_046J_lec04_th.jpg" title="Lecture 4: Quicksort, Randomized Algorithms" alt="Lecture 4: Quicksort, Randomized Algorithms"><p>Lecture 4: Quicksort, Rando...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-5-linear-time-sorting-lower-bounds-counting-sort-radix-sort/index.htm">
<img src="../../../contents/video-lectures/lecture-5-linear-time-sorting-lower-bounds-counting-sort-radix-sort/6_046J_lec05_th.jpg" title="Lecture 5: Linear-time Sorting: Lower Bounds, Counting Sort, Radix Sort" alt="Lecture 5: Linear-time Sorting: Lower Bounds, Counting Sort, Radix Sort"><p>Lecture 5: Linear-time Sort...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-6-order-statistics-median/index.htm">
<img src="../../../contents/video-lectures/lecture-6-order-statistics-median/6_046J_lec06_th.jpg" title="Lecture 6: Order Statistics, Median" alt="Lecture 6: Order Statistics, Median"><p>Lecture 6: Order Statistics...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-7-hashing-hash-functions/index.htm">
<img src="../../../contents/video-lectures/lecture-7-hashing-hash-functions/6_046J_lec07_th.jpg" title="Lecture 7: Hashing, Hash Functions" alt="Lecture 7: Hashing, Hash Functions"><p>Lecture 7: Hashing, Hash Fu...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-8-universal-hashing-perfect-hashing/index.htm">
<img src="../../../contents/video-lectures/lecture-8-universal-hashing-perfect-hashing/6_046J_lec08_th.jpg" title="Lecture 8: Universal Hashing, Perfect Hashing" alt="Lecture 8: Universal Hashing, Perfect Hashing"><p>Lecture 8: Universal Hashin...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-9-relation-of-bsts-to-quicksort-analysis-of-random-bst/index.htm">
<img src="../../../contents/video-lectures/lecture-9-relation-of-bsts-to-quicksort-analysis-of-random-bst/6_046J_lec09_th.jpg" title="Lecture 9: Relation of BSTs to Quicksort - Analysis of Random BST" alt="Lecture 9: Relation of BSTs to Quicksort - Analysis of Random BST"><p>Lecture 9: Relation of BSTs...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-10-red-black-trees-rotations-insertions-deletions/index.htm">
<img src="../../../contents/video-lectures/lecture-10-red-black-trees-rotations-insertions-deletions/6_046J_lec10_th.jpg" title="Lecture 10: Red-black Trees, Rotations, Insertions, Deletions" alt="Lecture 10: Red-black Trees, Rotations, Insertions, Deletions"><p>Lecture 10: Red-black Trees...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-11-augmenting-data-structures-dynamic-order-statistics-interval-trees/index.htm">
<img src="../../../contents/video-lectures/lecture-11-augmenting-data-structures-dynamic-order-statistics-interval-trees/6_046J_lec11_th.jpg" title="Lecture 11: Augmenting Data Structures, Dynamic Order Statistics, Interval Trees" alt="Lecture 11: Augmenting Data Structures, Dynamic Order Statistics, Interval Trees"><p>Lecture 11: Augmenting Data...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-12-skip-lists/index.htm">
<img src="../../../contents/video-lectures/lecture-12-skip-lists/6_046J_lec12_th.jpg" title="Lecture 12: Skip Lists" alt="Lecture 12: Skip Lists"><p>Lecture 12: Skip Lists</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-13-amortized-algorithms-table-doubling-potential-method/index.htm">
<img src="../../../contents/video-lectures/lecture-13-amortized-algorithms-table-doubling-potential-method/6_046J_lec13_th.jpg" title="Lecture 13: Amortized Algorithms, Table Doubling, Potential Method" alt="Lecture 13: Amortized Algorithms, Table Doubling, Potential Method"><p>Lecture 13: Amortized Algor...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-14-competitive-analysis-self-organizing-lists/index.htm">
<img src="../../../contents/video-lectures/lecture-14-competitive-analysis-self-organizing-lists/6_046J_lec14_th.jpg" title="Lecture 14: Competitive Analysis: Self-organizing Lists" alt="Lecture 14: Competitive Analysis: Self-organizing Lists"><p>Lecture 14: Competitive Ana...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-15-dynamic-programming-longest-common-subsequence/index.htm">
<img src="../../../contents/video-lectures/lecture-15-dynamic-programming-longest-common-subsequence/6_046J_lec15_th.jpg" title="Lecture 15: Dynamic Programming, Longest Common Subsequence" alt="Lecture 15: Dynamic Programming, Longest Common Subsequence"><p>Lecture 15: Dynamic Program...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-16-greedy-algorithms-minimum-spanning-trees/index.htm">
<img src="../../../contents/video-lectures/lecture-16-greedy-algorithms-minimum-spanning-trees/6_046J_lec16_th.jpg" title="Lecture 16: Greedy Algorithms, Minimum Spanning Trees" alt="Lecture 16: Greedy Algorithms, Minimum Spanning Trees"><p>Lecture 16: Greedy Algorith...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-17-shortest-paths-i-properties-dijkstras-algorithm-breadth-first-search/index.htm">
<img src="../../../contents/video-lectures/lecture-17-shortest-paths-i-properties-dijkstras-algorithm-breadth-first-search/6_046J_lec17_th.jpg" title="Lecture 17: Shortest Paths I: Properties, Dijkstra's Algorithm, Breadth-first Search" alt="Lecture 17: Shortest Paths I: Properties, Dijkstra's Algorithm, Breadth-first Search"><p>Lecture 17: Shortest Paths ...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-18-shortest-paths-ii-bellman-ford-linear-programming-difference-constraints/index.htm">
<img src="../../../contents/video-lectures/lecture-18-shortest-paths-ii-bellman-ford-linear-programming-difference-constraints/6_046J_lec18_th.jpg" title="Lecture 18: Shortest Paths II: Bellman-Ford, Linear Programming, Difference Constraints" alt="Lecture 18: Shortest Paths II: Bellman-Ford, Linear Programming, Difference Constraints"><p>Lecture 18: Shortest Paths ...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-19-shortest-paths-iii-all-pairs-shortest-paths-matrix-multiplication-floyd-warshall-johnson/index.htm">
<img src="../../../contents/video-lectures/lecture-19-shortest-paths-iii-all-pairs-shortest-paths-matrix-multiplication-floyd-warshall-johnson/6_046J_lec19_th.jpg" title="Lecture 19: Shortest Paths III: All-pairs Shortest Paths, Matrix Multiplication, Floyd-Warshall, Johnson" alt="Lecture 19: Shortest Paths III: All-pairs Shortest Paths, Matrix Multiplication, Floyd-Warshall, Johnson"><p>Lecture 19: Shortest Paths ...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-22-advanced-topics/index.htm">
<img src="../../../contents/video-lectures/lecture-22-advanced-topics/6_046J_lec22_th.jpg" title="Lecture 22: Advanced Topics" alt="Lecture 22: Advanced Topics"><p>Lecture 22: Advanced Topics</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-23-advanced-topics-cont./index.htm">
<img src="../../../contents/video-lectures/lecture-23-advanced-topics-cont./6_046J_lec23_th.jpg" title="Lecture 23: Advanced Topics (cont.)" alt="Lecture 23: Advanced Topics (cont.)"><p>Lecture 23: Advanced Topics...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-24-advanced-topics-cont./index.htm">
<img src="../../../contents/video-lectures/lecture-24-advanced-topics-cont./6_046J_lec24_th.jpg" title="Lecture 24: Advanced Topics (cont.)" alt="Lecture 24: Advanced Topics (cont.)"><p>Lecture 24: Advanced Topics...</p></a>
</div>
<div class="related-media-thumbnail-nolink">
<div class="now-playing-resource">Now Playing</div>
<img src="../../../contents/video-lectures/lecture-25-advanced-topics-cont.-discussion-of-follow-on-classes/6_046J_lec25_th.jpg" title="Lecture 25: Advanced Topics (cont.) - Discussion of Follow-on Classes" alt="Lecture 25: Advanced Topics (cont.) - Discussion of Follow-on Classes"><p>Lecture 25: Advanced Topics...</p>
</div>
</div>
        <div id="vid_playlist" itemprop="description" class="tabContent hide">
<h2 class="subhead">Related Resources</h2>
<p><a href="../../../contents/assignments/index.htm">Assignments</a><br><a href="../../../contents/exams/index.htm">Exams</a></p>
</div>
        <div id="vid_related" itemprop="description" class="tabContent hide">
<ul><li><a class="transcript-link" title="Open in a new window." alt="Open in a new window." style="text-decoration: none; font-size: 1.0em;" target="_blank" text-decoration: none font-size: href="../../../contents/video-lectures/lecture-25-advanced-topics-cont.-discussion-of-follow-on-classes/zjUDy6a5vx4.pdf"> Download this transcript - PDF (English - US)</a></li></ul>
<p><span m="8000">The last lecture of 6.046. We are here today to talk more</span> <span m="13000">about cache oblivious algorithms.</span> </p>
<p><span m="30000">Last class, we saw several cache oblivious algorithms,</span> <span m="34000">although none of them quite too difficult.</span> </p>
<p><span m="37000">Today we will see two difficult cache oblivious algorithms,</span> <span m="42000">a little bit more advanced. I figure we should do something</span> <span m="46000">advanced for the last class just to get to some exciting climax.</span> </p>
<p><span m="51000">So without further ado, let's get started.</span> </p>
<p><span m="55000">Last time, we looked at the binary search problem.</span> </p>
<p><span m="60000">Or, we looked at binary search, rather.</span> </p>
<p><span m="62000">And so, the binary search did not do so well in the cache</span> <span m="66000">oblivious context. And, some people asked me after</span> <span m="70000">class, is it possible to do binary search while cache</span> <span m="74000">obliviously? And, indeed it is with</span> <span m="76000">something called static search trees.</span> </p>
<p><span m="79000">So, this is really binary search.</span> </p>
<p><span m="81000">So, I mean, the abstract problem is I give you N items,</span> <span m="85000">say presorted, build some static data</span> <span m="88000">structure so that you can search among those N items quickly.</span> </p>
<p><span m="94000">And quickly, I claim, means log base B of N.</span> </p>
<p><span m="97000">We know that with B trees, our goal is to get log base B</span> <span m="101000">of N. We know that we can achieve</span> <span m="104000">that with B trees when we know B.</span> </p>
<p><span m="106000">We'd like to do that when we don't know B.</span> </p>
<p><span m="109000">And that's what cache oblivious static search trees achieve.</span> </p>
<p><span m="114000">So here's what we're going to do.</span> </p>
<p><span m="118000">As you might suspect, we're going to use a tree.</span> </p>
<p><span m="122000">So, we're going to store our N elements in a complete binary</span> <span m="127000">tree. We can't use B trees because we</span> <span m="130000">don't know what B is. So, we'll use a binary tree.</span> </p>
<p><span m="135000">And the key is how we lay out a binary tree.</span> </p>
<p><span m="139000">The binary tree will have N nodes.</span> </p>
<p><span m="142000">Or, you can put the data in the leaves.</span> </p>
<p><span m="145000">It doesn't really matter. So, here's our tree.</span> </p>
<p><span m="150000">There are the N nodes. And we're storing them,</span> <span m="153000">I didn't say, in order, you know,</span> <span m="155000">in the usual way, in order in a binary tree,</span> <span m="158000">which makes it a binary search tree.</span> </p>
<p><span m="161000">So we now had a search in this thing.</span> </p>
<p><span m="163000">So, the search will just start at the root and a walk down some</span> <span m="167000">root-to-leaf path. OK, and each point you know</span> <span m="171000">whether to go left or to go right because things are in</span> <span m="174000">order. So we're assuming here that we</span> <span m="177000">have an ordered universe of keys.</span> </p>
<p><span m="181000">So that's easy. We know that that will take log</span> <span m="184000">N time. The question is how many memory</span> <span m="187000">transfers? We'd like a lot of the nodes</span> <span m="190000">near the root to be somehow closer and one block.</span> </p>
<p><span m="193000">But we don't know what the block size is.</span> </p>
<p><span m="196000">So are going to do is carve the tree in the middle level.</span> </p>
<p><span m="201000">We're going to use divide and conquer for our layout of the</span> <span m="205000">tree, how we order the nodes in memory.</span> </p>
<p><span m="208000">And the divide and conquer is based on cutting in the middle,</span> <span m="213000">which is a bit weird. It's not our usual divide and</span> <span m="218000">conquer. And we'll see this more than</span> <span m="222000">once today. So, when you cut on the middle</span> <span m="225000">level, if the height of your original tree is log N,</span> <span m="230000">maybe log N plus one or something, it's roughly log N,</span> <span m="235000">then the top half will be log N over two.</span> </p>
<p><span m="240000">And at the height of the bottom pieces will be log N over two.</span> </p>
<p><span m="245000">How many nodes will there be in the top tree?</span> </p>
<p><span m="250000">N over two? Not quite.</span> </p>
<p><span m="252000">Two to the log N over two, square root of N.</span> </p>
<p><span m="256000">OK, so it would be about root N nodes over here.</span> </p>
<p><span m="261000">And therefore, there will be about root N</span> <span m="264000">subtrees down here, one for each,</span> <span m="268000">or a couple for each leaf. OK, so we have these subtrees</span> <span m="274000">of root N, and there are about root N of them.</span> </p>
<p><span m="278000">OK, this is how we are carving our tree.</span> </p>
<p><span m="282000">Now, we're going to recurse on each of the pieces.</span> </p>
<p><span m="286000">I'd like to redraw this slightly, sorry,</span> <span m="290000">just to make it a little bit clearer.</span> </p>
<p><span m="293000">These triangles are really trees, and they are connected by</span> <span m="298000">edges to this tree up here. So what we are really doing is</span> <span m="304000">carving in the middle level of edges in the tree.</span> </p>
<p><span m="308000">And if N is not exactly a power of two, you have to round your</span> <span m="312000">level by taking floors or ceilings.</span> </p>
<p><span m="315000">But you cut roughly in the middle level of edges.</span> </p>
<p><span m="319000">There is a lot of edges here. You conceptually slice there.</span> </p>
<p><span m="323000">That gives you a top tree and the bottom tree,</span> <span m="327000">several bottom trees, each of size roughly root N.</span> </p>
<p><span m="332000">OK, and then we are going to recursively layout these root N</span> <span m="339000">plus one subtrees, and then concatenate.</span> </p>
<p><span m="345000">So, this is the idea of the recursive layout.</span> </p>
<p><span m="350000">We sought recursive layouts with matrices last time.</span> </p>
<p><span m="357000">This is doing the same thing for a tree.</span> </p>
<p><span m="364000">So, I want to recursively layout the top tree.</span> </p>
<p><span m="367000">So here's the top tree. And I imagine it being somehow</span> <span m="371000">squashed down into a linear array recursively.</span> </p>
<p><span m="374000">And then I do the same thing for each of the bottom trees.</span> </p>
<p><span m="378000">So here are all the bottom trees.</span> </p>
<p><span m="381000">And I squashed each of them down into some linear order.</span> </p>
<p><span m="385000">And then I concatenate those linear orders.</span> </p>
<p><span m="388000">That's the linear order of the street.</span> </p>
<p><span m="392000">And you need a base case. And the base case,</span> <span m="395000">just a single node, is stored in the only order of</span> <span m="399000">a single node there is. OK, so that's a recursive</span> <span m="403000">layout of a binary search tree. It turns out this works really</span> <span m="408000">well. And let's quickly do a little</span> <span m="411000">example just so it's completely clear what this layout is</span> <span m="416000">because it's a bit bizarre maybe the first time you see it.</span> </p>
<p><span m="422000">So let me draw my favorite picture.</span> </p>
<p><span m="435000">So here's a tree of height four or three depending on how you</span> <span m="439000">count. We divide in the middle level,</span> <span m="442000">and we say, OK, that's the top tree.</span> </p>
<p><span m="445000">And then these are the bottom trees.</span> </p>
<p><span m="447000">So there's four bottom trees. So there are four children</span> <span m="452000">hanging off the root tree. They each have the same size in</span> <span m="456000">this case. They should all roughly be the</span> <span m="459000">same size. And the first we layout the top</span> <span m="461000">thing where we divide on the middle level.</span> </p>
<p><span m="463000">We say, OK, this comes first. And then, the bottom subtrees</span> <span m="467000">come next, two and three. So, I'm writing down the order</span> <span m="470000">in which these nodes are stored in an array.</span> </p>
<p><span m="472000">And then, we visit this tree so we get four, five,</span> <span m="475000">six. And then we visit this one so</span> <span m="477000">we get seven, eight, nine.</span> </p>
<p><span m="480000">And then the subtree, 10, 11, 12, and then the last</span> <span m="483000">subtree. So that's the order in which</span> <span m="486000">you store these 15 nodes. And you can build that up</span> <span m="489000">recursively. OK, so the structure is fairly</span> <span m="493000">simple, just a binary structure which we know and love,</span> <span m="497000">but store it in this funny order.</span> </p>
<p><span m="499000">This is not depth research order or level order,</span> <span m="502000">lots of natural things you might try, none of which work in</span> <span m="507000">cache oblivious context. This is pretty much the only</span> <span m="511000">thing that works. And the intuition as,</span> <span m="513000">well, we are trying to mimic all kinds of B trees.</span> </p>
<p><span m="516000">So, if you want a binary tree, well, that's the original tree.</span> </p>
<p><span m="519000">It doesn't matter how you store things.</span> </p>
<p><span m="521000">If you want a tree where the branching factor is four,</span> <span m="524000">well, then here it is. These blocks give you a</span> <span m="527000">branching factor of four. If we had more leaves down</span> <span m="530000">here, there would be four children hanging off of that</span> <span m="533000">node. And these are all clustered</span> <span m="534000">together consecutively in memory.</span> </p>
<p><span m="536000">So, if your block size happens to be three, then this is a</span> <span m="539000">perfect way to store things for a block size of three.</span> </p>
<p><span m="544000">If you're block size happens to be probably 15,</span> <span m="547000">right, if we count the number of, right, the number of nodes</span> <span m="552000">in here is 15, if you're block size happens to</span> <span m="556000">be 15, then this recursion will give you a perfect blocking in</span> <span m="561000">terms of 15. And in general,</span> <span m="563000">it's actually mimicking block sizes of 2^K-1.</span> </p>
<p><span m="567000">Think powers of two. OK, that's the intuition.</span> </p>
<p><span m="572000">Let me give you the formal analysis to make it clearer.</span> </p>
<p><span m="577000">So, we claim that there are order, log base B of N memory</span> <span m="582000">transfers. That's what we want to prove no</span> <span m="585000">matter what B is. So here's what we're going to</span> <span m="589000">do. You may recall last time when</span> <span m="592000">we analyzed divide and conquer algorithms, we wrote our</span> <span m="597000">recurrence, and that the base case was the key.</span> </p>
<p><span m="603000">Here, in fact, we are only going to think</span> <span m="605000">about the base case in a certain sense.</span> </p>
<p><span m="607000">We don't have, really, recursion in the</span> <span m="608000">algorithm. The algorithm is just walking</span> <span m="610000">down some root-to-leaf path. We only have a recursion in a</span> <span m="613000">definition of the layout. So, we can be a little bit more</span> <span m="616000">flexible. We don't have to look at our</span> <span m="618000">recurrence. We are just going to think</span> <span m="620000">about the base case. I want to imagine,</span> <span m="622000">you start with the big triangle.</span> </p>
<p><span m="624000">That you cut it in the middle; you get smaller triangles.</span> </p>
<p><span m="626000">Imagine the point at which you keep recursively cutting.</span> </p>
<p><span m="631000">So imagine this process. Big triangles halve in height</span> <span m="634000">each time. They're getting smaller and</span> <span m="637000">smaller, stop cutting at the point where a triangle fits in a</span> <span m="641000">block. OK, and look at that time.</span> </p>
<p><span m="644000">OK, the recursion actually goes all the way, but in the analysis</span> <span m="648000">let's think about the point where the chunk fits in a block</span> <span m="653000">in one of these triangles, one of these boxes fits in a</span> <span m="657000">block. So, I'm going to call this a</span> <span m="659000">recursive level. So, I'm imagining expanding all</span> <span m="665000">of the recursions in parallel. This is some level of detail,</span> <span m="670000">some level of refinement of the trees at which the tree you're</span> <span m="676000">looking at, the triangle, has size.</span> </p>
<p><span m="679000">In other words, there is a number of nodes in</span> <span m="684000">that triangle is less than or equal to B.</span> </p>
<p><span m="689000">OK, so let me draw a picture. So, I want to draw sort of this</span> <span m="694000">picture but where instead of nodes, I have little triangles</span> <span m="699000">of size, at most, B.</span> </p>
<p><span m="701000">So, the picture looks something like this.</span> </p>
<p><span m="704000">We have a little triangle of size, at most,</span> <span m="708000">B. It has a bunch of children</span> <span m="710000">which are subtrees of size, at most, B, the same size.</span> </p>
<p><span m="715000">And then, these are in a chunk, and then we have other chunks</span> <span m="720000">that look like that in recursion potentially.</span> </p>
<p><span m="749000">OK, so I haven't drawn everything.</span> </p>
<p><span m="751000">There would be a whole bunch of, between B and B^2,</span> <span m="754000">in fact, subtrees, other squares of this size.</span> </p>
<p><span m="757000">So here, I had to refine the entire tree here.</span> </p>
<p><span m="760000">And then I refined each of the subtrees here and here at these</span> <span m="764000">levels. And then it turned out after</span> <span m="767000">these two recursive levels, everything fits in a block.</span> </p>
<p><span m="770000">Everything has the same size, so at some point they will all</span> <span m="774000">fit within a block. And they might actually be</span> <span m="777000">quite a bit smaller than the block.</span> </p>
<p><span m="779000">How small? So, what I'm doing is cutting</span> <span m="785000">the number of levels and half at each point.</span> </p>
<p><span m="789000">And I stop when the height of one of these trees is</span> <span m="795000">essentially at most log B because that's when the number</span> <span m="801000">of nodes at there will be B roughly.</span> </p>
<p><span m="805000">So, how small can the height be?</span> </p>
<p><span m="810000">I keep dividing at half and stopping when it's,</span> <span m="812000">at most, log B. Log B over two.</span> </p>
<p><span m="814000">So it's, at most, log B, it's at least half log</span> <span m="817000">B. Therefore, the number of nodes</span> <span m="819000">it here could be between the square root of B and B.</span> </p>
<p><span m="822000">So, this could be a lot smaller and less than a constant factor</span> <span m="826000">of a block, a claim that doesn't matter.</span> </p>
<p><span m="829000">It's OK. This could be a small square</span> <span m="831000">root of B. I'm not even going to write</span> <span m="833000">that it could be a small square root of B because that doesn't</span> <span m="837000">play a role in the analysis. It's a worry,</span> <span m="840000">but it's OK essentially because our bound only involves log B.</span> </p>
<p><span m="844000">It doesn't involve B. So, here's what we do.</span> </p>
<p><span m="849000">We know that each of the height of one of these triangles of</span> <span m="856000">size, at most, B is at least a half log B.</span> </p>
<p><span m="860000">And therefore, if you look at a search path,</span> <span m="865000">so, when we do a search in this tree, we're going to start up</span> <span m="872000">here. And I'm going to mess up the</span> <span m="876000">diagram now. We're going to follow some</span> <span m="879000">path, maybe I should have drawn it going down here.</span> </p>
<p><span m="882000">We visit through some of these triangles, but it's a</span> <span m="886000">root-to-node path in the tree. So, how many of the triangles</span> <span m="891000">could it visit? Well, the height of the tree</span> <span m="894000">divided by the height of one of the triangles.</span> </p>
<p><span m="898000">So, this visits, at most, log N over half log B</span> <span m="901000">triangles, which looks good. This is log base B of N,</span> <span m="907000">mind you off factor of two. Now, what we worry about is how</span> <span m="912000">many blocks does a triangle occupy?</span> </p>
<p><span m="915000">One of these triangles should fit in a block.</span> </p>
<p><span m="919000">We know by the recursive layout, it is stored in a</span> <span m="923000">consecutive region in memory. So, how many blocks could</span> <span m="928000">occupy? Two, because of alignment,</span> <span m="932000">it might fall across the boundary of a block,</span> <span m="935000">but at most, one boundary.</span> </p>
<p><span m="937000">So, it fits in two blocks. So, each triangle fits in one</span> <span m="942000">block, but is in, at most, two blocks,</span> <span m="945000">memory blocks, size B depending on alignment.</span> </p>
<p><span m="949000">So, the number of memory transfers, in other words,</span> <span m="953000">a number of blocks we read, because all we are doing here</span> <span m="957000">is reading in a search, is at most two blocks per</span> <span m="961000">triangle. There are this many triangles,</span> <span m="965000">so it's at most, 4 log base B of N,</span> <span m="967000">OK, which is order log base B of N.</span> </p>
<p><span m="969000">And there are papers about decreasing this constant 4 with</span> <span m="973000">more sophisticated data structures.</span> </p>
<p><span m="975000">You can get it down to a little bit less than two I think.</span> </p>
<p><span m="978000">So, there you go. So not quite as good as B trees</span> <span m="981000">in terms of the constant, but pretty good.</span> </p>
<p><span m="984000">And what's good is that this data structure works for all B</span> <span m="987000">at the same time. This analysis works for all B.</span> </p>
<p><span m="992000">So, we have a multilevel memory hierarchy, no problem.</span> </p>
<p><span m="997000">Any questions about this data structure?</span> </p>
<p><span m="1001000">This is already pretty sophisticated,</span> <span m="1004000">but we are going to get even more sophisticated.</span> </p>
<p><span m="1008000">Next, OK, good, no questions.</span> </p>
<p><span m="1011000">This is either perfectly clear, or a little bit difficult,</span> <span m="1016000">or both. So, now, I debated with myself</span> <span m="1019000">what exactly I would cover next. There are two natural things I</span> <span m="1025000">could cover, both of which are complicated.</span> </p>
<p><span m="1028000">My first result in the cache oblivious world is making this</span> <span m="1031000">data structure dynamic. So, there is a dynamic B tree</span> <span m="1034000">that's cache oblivious that works for all values of B.</span> </p>
<p><span m="1038000">And it gets log base B of N, insert, delete,</span> <span m="1040000">and search. So, this just gets search in</span> <span m="1043000">log base B of N. That data structure,</span> <span m="1045000">our first paper was damn complicated, and then it got</span> <span m="1048000">simplified. It's now not too hard,</span> <span m="1051000">but it takes a couple of lectures in an advanced</span> <span m="1055000">algorithms class to teach it. So, I'm not going to do that.</span> </p>
<p><span m="1060000">But there you go. It exists.</span> </p>
<p><span m="1062000">Instead, we're going to cover our favorite problem sorting in</span> <span m="1067000">the cache oblivious context. And this is quite complicated,</span> <span m="1072000">more than you'd expect, OK, much more complicated than</span> <span m="1076000">it is in a multithreaded setting to get the right answer,</span> <span m="1081000">anyway. Maybe to get the best answer in</span> <span m="1085000">a multithreaded setting is also complicated.</span> </p>
<p><span m="1088000">The version we got last week was pretty easy.</span> </p>
<p><span m="1091000">But before we go to cache oblivious sorting,</span> <span m="1093000">let me talk about cache aware sorting because we need to know</span> <span m="1098000">what bound we are aiming for. And just to warn you,</span> <span m="1101000">I may not get to the full analysis of the full cache</span> <span m="1104000">oblivious sorting. But I want to give you an idea</span> <span m="1108000">of what goes into it because it's pretty cool,</span> <span m="1111000">I think, a lot of ideas. So, how might you sort?</span> </p>
<p><span m="1115000">So, cache aware, we assume we can do everything.</span> </p>
<p><span m="1119000">Basically, this means we have B trees.</span> </p>
<p><span m="1121000">That's the only other structure we know.</span> </p>
<p><span m="1124000">How would you sort N numbers, given that that's the only data</span> <span m="1129000">structure you have? Right, just add them into the B</span> <span m="1132000">tree, and then do an in-order traversal.</span> </p>
<p><span m="1135000">That's one way to sort, perfectly reasonable.</span> </p>
<p><span m="1140000">We'll call it repeated insertion into a B tree.</span> </p>
<p><span m="1144000">OK, we know in the usual setting, and the BST sort,</span> <span m="1148000">where you use a balanced binary search tree, like red-black</span> <span m="1153000">trees, that takes N log N time, log N per operation,</span> <span m="1157000">and that's an optimal sorting algorithm in the comparison</span> <span m="1162000">model, only thinking about comparison model here.</span> </p>
<p><span m="1168000">So, how many memory transfers does this data structure takes?</span> </p>
<p><span m="1179000">Sorry, this algorithm for sorting?</span> </p>
<p><span m="1185000">The number of memory transfers is a function of N,</span> <span m="1194000">and B_M of N is? This is easy.</span> </p>
<p><span m="1201000">N insertions, OK, you have to think about N</span> <span m="1207000">order traversal. You have to remember back your</span> <span m="1213000">analysis of B trees, but this is not too hard.</span> </p>
<p><span m="1220000">How long does the insertion take, the N insertions?</span> </p>
<p><span m="1227000">N log base B of N. How long does the traversal</span> <span m="1232000">take? Less time.</span> </p>
<p><span m="1233000">If we think about it, you can get away with N over B</span> <span m="1237000">memory transfers, so quite a bit less than this.</span> </p>
<p><span m="1240000">This is bigger than N, which is actually pretty bad.</span> </p>
<p><span m="1244000">N memory transfers means essentially you're doing random</span> <span m="1247000">access, visiting every element in some random order.</span> </p>
<p><span m="1251000">It's even worse. There's even a log factor.</span> </p>
<p><span m="1254000">Now, the log factor goes down by this log B factor.</span> </p>
<p><span m="1257000">But, this is actually a really bad sorting bound.</span> </p>
<p><span m="1262000">So, unlike normal algorithms, where using a search tree is a</span> <span m="1266000">good way to sort, in cache oblivious or cache</span> <span m="1270000">aware sorting it's really, really bad.</span> </p>
<p><span m="1273000">So, what's another natural algorithm you might try,</span> <span m="1277000">given what we know for sorting? And, even cache oblivious,</span> <span m="1282000">all the algorithms we've seen are cache oblivious.</span> </p>
<p><span m="1286000">So, what's a good one to try? Merge sort.</span> </p>
<p><span m="1290000">OK, we did merge sort in multithreaded algorithms.</span> </p>
<p><span m="1294000">Let's try a merge sort, a good divide and conquer</span> <span m="1297000">thing. So, I'm going to call it binary</span> <span m="1300000">merge sort because it splits the array into two pieces,</span> <span m="1304000">and it recurses on the two pieces.</span> </p>
<p><span m="1306000">So, you get a binary recursion tree.</span> </p>
<p><span m="1309000">So, let's analyze it. So the number of memory</span> <span m="1312000">transfers on N elements, so I mean it has a pretty good</span> <span m="1316000">recursive layout, right?</span> </p>
<p><span m="1317000">The two subarrays that we get what we partition our array are</span> <span m="1322000">consecutive. So, we're recursing on this,</span> <span m="1325000">recursing on this. So, it's a nice cache oblivious</span> <span m="1330000">layout. And this is even for cache</span> <span m="1333000">aware. This is a pretty good</span> <span m="1335000">algorithm, a lot better than this one, as we'll see.</span> </p>
<p><span m="1339000">But, what is the recurrence we get?</span> </p>
<p><span m="1342000">So, here we have to go back to last lecture when we were</span> <span m="1347000">thinking about recurrences for recursive cache oblivious</span> <span m="1351000">algorithms.</span> </p>
<p><span m="1366000">I mean, the first part should be pretty easy.</span> </p>
<p><span m="1370000">There's an O. Well, OK, let's put the O at</span> <span m="1375000">the end, the divide and the conquer part at the end.</span> </p>
<p><span m="1380000">The recursion is 2MT of N over two, good.</span> </p>
<p><span m="1386000">All right, that's just like the merge sort recurrence,</span> <span m="1389000">and that's the additive term that you're thinking about.</span> </p>
<p><span m="1392000">OK, so normally, we would pay a linear additive</span> <span m="1395000">term here, order N because merging takes order N time.</span> </p>
<p><span m="1399000">Now, we are merging, which is three parallel scans,</span> <span m="1402000">the two inputs and the output. OK, they're not quite parallel</span> <span m="1406000">interleaved. They're a bit funnily</span> <span m="1408000">interleaved, but as long as your cache stores at least three</span> <span m="1411000">blocks, this is also linear time in this setting,</span> <span m="1415000">which means you visit each block a constant number of</span> <span m="1418000">times. OK, that's the recurrence.</span> </p>
<p><span m="1421000">Now, we also need a base case, of course.</span> </p>
<p><span m="1424000">We've seen two base cases, one MT of B,</span> <span m="1427000">and the other, MT of whatever fits in cache.</span> </p>
<p><span m="1430000">So, let's look at that one because it's better.</span> </p>
<p><span m="1433000">So, for some constant, C, if I have an array of size</span> <span m="1436000">M, this fits in cache, actually, probably C is one</span> <span m="1440000">here, but I'll just be careful. For some constant,</span> <span m="1443000">this fits in cache. A problem of this size fits in</span> <span m="1450000">cache, and in that case, the number of memory transfers</span> <span m="1458000">is, anyone remember? We've used this base case more</span> <span m="1465000">than once before. Do you remember?</span> </p>
<p><span m="1471000">Sorry? CM over B.</span> </p>
<p><span m="1472000">I've got a big O, so M over B.</span> </p>
<p><span m="1473000">Order M over B because this is the size of the data.</span> </p>
<p><span m="1477000">So, I mean, just to read it all in takes M over B.</span> </p>
<p><span m="1480000">Once it's in cache, it doesn't really matter what I</span> <span m="1483000">do as long as I use linear space for the right constant here.</span> </p>
<p><span m="1487000">As long as I use linear space in that algorithm,</span> <span m="1490000">I'll stay in cache, and therefore,</span> <span m="1493000">not have to write anything out until the very end and I spend M</span> <span m="1497000">over B to write it out. OK, so I can't really spend</span> <span m="1502000">more than M over B almost no matter what algorithm I have,</span> <span m="1507000">so long as it uses linear space.</span> </p>
<p><span m="1509000">So, this is a base case that's useful pretty much in any</span> <span m="1514000">algorithm. OK, that's a recurrence.</span> </p>
<p><span m="1517000">Now we just have to solve it. OK, let's see how good binary</span> <span m="1522000">merge sort is. OK, and again,</span> <span m="1524000">I'm going to just give the intuition behind the solution to</span> <span m="1529000">this recurrence. And I won't use the</span> <span m="1533000">substitution method to prove it formally.</span> </p>
<p><span m="1536000">But this one's actually pretty simple.</span> </p>
<p><span m="1538000">So, we have, at the top, actually I'm going</span> <span m="1541000">to write it over here. Otherwise I won't be able to</span> <span m="1544000">see. So, at the top of the</span> <span m="1546000">recursion, we have N over B costs.</span> </p>
<p><span m="1548000">I'll ignore the constants. There is probably also on</span> <span m="1552000">additive one, which I'm ignoring here.</span> </p>
<p><span m="1555000">Then we split into two problems of half the size.</span> </p>
<p><span m="1558000">So, we get a half N over B, and a half N over B.</span> </p>
<p><span m="1563000">OK, usually this was N, half N, half N.</span> </p>
<p><span m="1565000">You should regard it as from lecture one.</span> </p>
<p><span m="1568000">So, the total on this level is N over B.</span> </p>
<p><span m="1570000">The total on this level is N over B.</span> </p>
<p><span m="1572000">And, you can prove by induction, that every level is N</span> <span m="1576000">over B. The question is how many levels</span> <span m="1578000">are there? Well, at the bottom,</span> <span m="1580000">so, dot, dot, dot, at the bottom of this</span> <span m="1583000">recursion tree we should get something of size M,</span> <span m="1586000">and then we're paying M over B. Actually here we're paying M</span> <span m="1590000">over B. So, it's a good thing those</span> <span m="1594000">match. They should.</span> </p>
<p><span m="1595000">So here, we have a bunch of leaves, all the size M over B.</span> </p>
<p><span m="1600000">You can also compute the number of leaves here is N over M.</span> </p>
<p><span m="1604000">If you want to be extra sure, you should always check the</span> <span m="1609000">leaf level. It's a good idea.</span> </p>
<p><span m="1611000">So we have N over M leaves, each costing M over B.</span> </p>
<p><span m="1615000">This is an M. So, this is N over B also.</span> </p>
<p><span m="1620000">So, every level here is N over B memory transfers.</span> </p>
<p><span m="1624000">And the number of levels is one N over B?</span> </p>
<p><span m="1628000">Log N over B. Yep, that's right.</span> </p>
<p><span m="1631000">I just didn't hear it right. OK, we are starting at N.</span> </p>
<p><span m="1636000">We're getting down to M. So, you can think of it as log</span> <span m="1641000">N, the whole binary tree minus the subtrees log M,</span> <span m="1646000">and that's the same as log N over M, OK, or however you want</span> <span m="1651000">to think about it. The point is that this is a log</span> <span m="1657000">base two. That's where we are not doing</span> <span m="1660000">so great. So this is actually a pretty</span> <span m="1662000">good algorithm. So let me write the solution</span> <span m="1666000">over here. So, the number of memory</span> <span m="1668000">transfers on N items is going to be the number of levels times</span> <span m="1673000">the cost of each level. So, this is N over B times log</span> <span m="1676000">base two of N over M, which is a lot better than</span> <span m="1680000">repeated insertion into a B tree.</span> </p>
<p><span m="1684000">Here, we were getting N times log N over log B,</span> <span m="1687000">OK, so N log N over log B. We're getting a log B savings</span> <span m="1692000">over not proving anything, and here we are getting a</span> <span m="1696000">factor of B savings, N log N over B.</span> </p>
<p><span m="1699000">In fact, we even made it a little bit smaller by dividing</span> <span m="1704000">this N by M. That doesn't matter too much.</span> </p>
<p><span m="1708000">This dividing by B is a big one.</span> </p>
<p><span m="1712000">OK, so we're almost there. This is almost an optimal</span> <span m="1715000">algorithm. It's even cache oblivious,</span> <span m="1717000">which is pretty cool. And that extra little step,</span> <span m="1720000">which is that you should be able to get on other log B</span> <span m="1723000">factor improvement, I want to combine these two</span> <span m="1726000">ideas. I want to keep this factor B</span> <span m="1728000">improvement over N log N, and I want to keep this factor</span> <span m="1731000">log B improvement over N log N, and get them together.</span> </p>
<p><span m="1734000">So, first, before we do that cache obliviously,</span> <span m="1737000">let's do it cache aware. So, this is the third cache</span> <span m="1743000">aware algorithm. This one was also cache</span> <span m="1747000">oblivious. So, how should I modify a merge</span> <span m="1751000">sort in order to do better? I mean, I have this log base</span> <span m="1758000">two, and I want a log base B, more or less.</span> </p>
<p><span m="1762000">So, how would I do that with merge sort?</span> </p>
<p><span m="1767000">Yeah? Split into B subarrays,</span> <span m="1770000">yeah. Instead of doing binary merge</span> <span m="1772000">sort, this is what I was hinting at here, instead of splitting it</span> <span m="1775000">into two pieces, and recursing on the two</span> <span m="1777000">pieces, and then merging them, I could split potentially into</span> <span m="1780000">more pieces. OK, and to do that,</span> <span m="1782000">I'm going to use my cache. So the idea is B pieces.</span> </p>
<p><span m="1785000">This is actually not the best thing to do, although B pieces</span> <span m="1788000">does work. And, it's what I was hinting at</span> <span m="1790000">because I was saying I want a log B.</span> </p>
<p><span m="1792000">It's actually not quite log B. It's log M over B.</span> </p>
<p><span m="1795000">OK, but let's see. So, what is the most pieces I</span> <span m="1797000">could split into? Right, well,</span> <span m="1801000">I could split into N pieces. That would be good,</span> <span m="1806000">wouldn't it, at only one recursive level?</span> </p>
<p><span m="1811000">I can't split into N pieces. Why?</span> </p>
<p><span m="1814000">What happens wrong when I split into N pieces?</span> </p>
<p><span m="1819000">That would be the ultimate. You can't merge,</span> <span m="1824000">exactly. So, if I have N pieces,</span> <span m="1827000">you can't merge in cache. I mean, so in order to merge in</span> <span m="1833000">cache, what I need is to be able to store an entire block from</span> <span m="1837000">each of the lists that I'm merging.</span> </p>
<p><span m="1840000">If I can store an entire block in cache for each of the lists,</span> <span m="1843000">then it's a bunch of parallel scans.</span> </p>
<p><span m="1846000">So this is like testing the limit of parallel scanning</span> <span m="1849000">technology. If you have K parallel scans,</span> <span m="1852000">and you can fit K blocks in cache, then all is well because</span> <span m="1855000">you can scan through each of those K arrays,</span> <span m="1858000">and have one block from each of the K arrays in cache at the</span> <span m="1862000">same time. So, that's the idea.</span> </p>
<p><span m="1865000">Now, how many blocks can I fit in cache?</span> </p>
<p><span m="1869000">M over B. That's the biggest I could do.</span> </p>
<p><span m="1873000">So this will give the best running time among these kinds</span> <span m="1878000">of merge sort algorithms. This is an M over B way merge</span> <span m="1884000">sort. OK, so now we get somewhat</span> <span m="1887000">better recurrence. We split into M over B</span> <span m="1891000">subproblems now, each of size,</span> <span m="1894000">well, it's N divided by M over B without thinking.</span> </p>
<p><span m="1898000">And, the claim is that the merge time is still linear</span> <span m="1903000">because we have barely enough, OK, maybe I should describe</span> <span m="1908000">this algorithm. So, we divide,</span> <span m="1910000">because we've never really done non-binary merge sort.</span> </p>
<p><span m="1915000">We divide into M over B equal size subarrays instead of two.</span> </p>
<p><span m="1920000">Here, we are clearly doing a cache aware algorithm.</span> </p>
<p><span m="1926000">We are assuming we know what M over B is.</span> </p>
<p><span m="1931000">So, then we recursively sort each subarray,</span> <span m="1937000">and then we conquer. We merge.</span> </p>
<p><span m="1941000">And, the reason merge works is because we can afford one block</span> <span m="1949000">in cache. So, let's call it one cache</span> <span m="1954000">block per subarray. OK, actually,</span> <span m="1956000">if you're careful, you also need one block for the</span> <span m="1960000">output of the merged array before you write it out.</span> </p>
<p><span m="1964000">So, it should be M over B minus one.</span> </p>
<p><span m="1967000">But, let's ignore some additive constants.</span> </p>
<p><span m="1970000">OK, so this is the recurrence we get.</span> </p>
<p><span m="1973000">The base case is the same. And, what improves here?</span> </p>
<p><span m="1979000">I mean, the per level cost doesn't change,</span> <span m="1982000">I claim, because at the top we get N over B.</span> </p>
<p><span m="1986000">This does before. Then we split into M over B</span> <span m="1989000">subproblems, each of which costs a one over M over B factor times</span> <span m="1995000">N over B. OK, so you add all those up,</span> <span m="1998000">you still get N over B because we are not decreasing the number</span> <span m="2003000">of elements. We're just splitting them.</span> </p>
<p><span m="2006000">There's now M over B subproblems, each of one over M</span> <span m="2011000">over B the size. So, just like before,</span> <span m="2016000">each level will sum to N over B.</span> </p>
<p><span m="2019000">What changes is the number of levels because now we have</span> <span m="2024000">bigger branching factor. Instead of log base two,</span> <span m="2029000">it's now log base the branching factor.</span> </p>
<p><span m="2033000">So, the height of this tree is log base M over B of N over M,</span> <span m="2039000">I believe. Let me make sure that agrees</span> <span m="2043000">with me. Yeah.</span> </p>
<p><span m="2046000">OK, and if you're careful, this counts not quite the</span> <span m="2052000">number of levels, but the number of levels minus</span> <span m="2058000">one. So, I'm going to one plus one</span> <span m="2062000">here. And the reason why is this is</span> <span m="2066000">not quite the bound that I want. So, we have log base M over B.</span> </p>
<p><span m="2077000">What I really want, actually, is N over B.</span> </p>
<p><span m="2085000">I claim that these are the same because we have minus,</span> <span m="2095000">yeah, that's good. OK, this should come as rather</span> <span m="2101000">mysterious, but it's because I know what the sorting bound</span> <span m="2105000">should be as I'm doing this arithmetic.</span> </p>
<p><span m="2107000">So, I'm taking log base M over B of N over M.</span> </p>
<p><span m="2110000">I'm not changing the base of the log.</span> </p>
<p><span m="2112000">I'm just saying, well, N over M,</span> <span m="2114000">that is N over B divided by M over B because then the B's</span> <span m="2117000">cancel, and the M goes on the bottom.</span> </p>
<p><span m="2120000">So, if I do that in the logs, I get log of N over B minus log</span> <span m="2123000">of M over B minus, because I'm dividing.</span> </p>
<p><span m="2126000">OK, now, log base M over B of M over B is one.</span> </p>
<p><span m="2130000">So, these cancel, and I get log base M over B,</span> <span m="2133000">N over B, which is what I was aiming for.</span> </p>
<p><span m="2136000">Why? Because that's the right bound</span> <span m="2139000">as it's normally written. OK, that's what we will be</span> <span m="2143000">trying to get cache obliviously. So, that's the height of the</span> <span m="2148000">search tree, and at each level we are paying N over B memory</span> <span m="2153000">transfers. So, the overall number of</span> <span m="2156000">memory transfers for this M over B way merge sort is the sorting</span> <span m="2161000">bound.</span> </p>
<p><span m="2173000">This is, I'll put it in a box. This is the sorting bound,</span> <span m="2179000">and it's very special because it is the optimal number of</span> <span m="2185000">memory transfers for sorting N items cache aware.</span> </p>
<p><span m="2191000">This has been known since, like, 1983.</span> </p>
<p><span m="2193000">OK, this is the best thing to do.</span> </p>
<p><span m="2195000">It's a really weird bound, but if you ignore all the</span> <span m="2198000">divided by B's, it's sort of like N times log</span> <span m="2201000">base M of N. So, that's little bit more</span> <span m="2204000">reasonable. But, there's lots of divided by</span> <span m="2206000">B's. So, the number of the blocks in</span> <span m="2209000">the input times log base the number of blocks in the cache of</span> <span m="2213000">the number of blocks in the input.</span> </p>
<p><span m="2215000">That's a little bit more intuitive.</span> </p>
<p><span m="2217000">That is the bound. And that's what we are aiming</span> <span m="2222000">for. So, this algorithm,</span> <span m="2224000">crucially, assume that we knew what M over B was.</span> </p>
<p><span m="2228000">Now, we are going to try and do it without knowing M over B,</span> <span m="2232000">do it cache obliviously. And that is the result of only</span> <span m="2237000">a few years ago. Are you ready?</span> </p>
<p><span m="2239000">Everything clear so far? It's a pretty natural</span> <span m="2243000">algorithm. We were going to try to mimic</span> <span m="2246000">it essentially and do a merge sort, but not M over B way merge</span> <span m="2251000">sort because we don't know how. We're going to try and do it</span> <span m="2256000">essentially a square root of N way merge sort.</span> </p>
<p><span m="2259000">If you play around, that's the natural thing to do.</span> </p>
<p><span m="2263000">The tricky part is that it's hard to merge square root of N</span> <span m="2266000">lists at the same time, in a cache efficient way.</span> </p>
<p><span m="2270000">We know that if the square root of N is bigger than M over B,</span> <span m="2274000">you're hosed if you just do a straightforward merge.</span> </p>
<p><span m="2277000">So, we need a fancy merge. We are going to do a divide and</span> <span m="2282000">conquer merge. It's a lot like the</span> <span m="2285000">multithreaded algorithms of last week, try and do a divide and</span> <span m="2290000">conquer merge so that no matter how many lists are merging,</span> <span m="2294000">as long as it's less than the square root of N,</span> <span m="2298000">or actually cubed root of N, we can do it cache efficiently,</span> <span m="2303000">OK? So, we'll do this,</span> <span m="2304000">we need a bit of setup. But that's where we're going,</span> <span m="2308000">cache oblivious sorting. So, we want to get the sorting</span> <span m="2313000">bound, and, yeah. It turns out,</span> <span m="2316000">to do cache oblivious sorting, you need an assumption about</span> <span m="2320000">the cache size. This is kind of annoying,</span> <span m="2322000">because we said, well, cache oblivious</span> <span m="2325000">algorithms should work for all values of B and all values of M.</span> </p>
<p><span m="2329000">But, you can actually prove you need an additional assumption in</span> <span m="2333000">order to get this bound cache obliviously.</span> </p>
<p><span m="2335000">That's the result of, like, last year by Garrett</span> <span m="2338000">Brodel. So, and the assumption is,</span> <span m="2341000">well, the assumption is fairly weak.</span> </p>
<p><span m="2344000">That's the good news. OK, we've actually made an</span> <span m="2347000">assumption several times. We said, well,</span> <span m="2350000">assuming the cache can store at least three blocks,</span> <span m="2353000">or assuming the cache can store at least four blocks,</span> <span m="2357000">yeah, it's reasonable to say the cache can store at least</span> <span m="2361000">four blocks, or at least any constant number of blocks.</span> </p>
<p><span m="2365000">This is that the number of blocks that your cache can store</span> <span m="2369000">is at least B to the epsilon blocks.</span> </p>
<p><span m="2373000">This is saying your cache isn't, like, really narrow.</span> </p>
<p><span m="2376000">It's about as tall as it is wide.</span> </p>
<p><span m="2377000">This actually gives you a lot of sloth.</span> </p>
<p><span m="2380000">And, we're going to use a simple version of this</span> <span m="2382000">assumption that M is at least B^2.</span> </p>
<p><span m="2384000">OK, this is pretty natural. It's saying that your cache is</span> <span m="2388000">at least as tall as it is wide where these are the blocks.</span> </p>
<p><span m="2391000">OK, the number of blocks is it least the size of a block.</span> </p>
<p><span m="2394000">That's a pretty reasonable assumption, and if you look at</span> <span m="2397000">caches these days, they all satisfy this,</span> <span m="2400000">at least for some epsilon. Pretty much universally,</span> <span m="2404000">M is at least B^2 or so. OK, and in fact,</span> <span m="2408000">if you think from our speed of light arguments from last time,</span> <span m="2412000">B^2 or B^3 is actually the right thing to do.</span> </p>
<p><span m="2416000">As you go out, I guess in 3-D,</span> <span m="2418000">B^2 would be the surface area of the sphere out there.</span> </p>
<p><span m="2423000">OK, so this is actually the natural thing of how much space</span> <span m="2427000">you should have at a particular distance.</span> </p>
<p><span m="2432000">Assuming we live in a constant dimensional space,</span> <span m="2435000">that assumption would be true. This even allows going up to 42</span> <span m="2440000">dimensions or whatever, OK, so a pretty reasonable</span> <span m="2443000">assumption. Good.</span> </p>
<p><span m="2444000">Now, we are going to achieve this bound.</span> </p>
<p><span m="2447000">And what we are going to try to do is use an N to the epsilon</span> <span m="2452000">way merge sort for some epsilon. And, if we assume that M is at</span> <span m="2456000">least B^2, the epsilon will be one third, it turns out.</span> </p>
<p><span m="2462000">So, we are going to do the cubed root of N way merge sort.</span> </p>
<p><span m="2468000">I'll start by giving you and analyzing the sorting</span> <span m="2474000">algorithms, assuming that we know how to do merge in a</span> <span m="2480000">particular bound. OK, then we'll do the merge.</span> </p>
<p><span m="2485000">The merge is the hard part. OK, so the merge,</span> <span m="2491000">I'm going to give you the black box first of all.</span> </p>
<p><span m="2494000">First of all, what does merge do?</span> </p>
<p><span m="2496000">The K way merger is called the K funnel just because it looks</span> <span m="2500000">like a funnel, which you'll see.</span> </p>
<p><span m="2502000">So, a K funnel is a data structure, or is an algorithm,</span> <span m="2505000">let's say, that looks like a data structure.</span> </p>
<p><span m="2508000">And it merges K sorted lists. So, supposing you already have</span> <span m="2512000">K lists, and they're sorted, and assuming that the lists are</span> <span m="2516000">relatively long, so we need some additional</span> <span m="2519000">assumptions for this black box to work, and we'll be able to</span> <span m="2523000">get them as we sort. We want the total size of those</span> <span m="2529000">lists. You add up all the elements,</span> <span m="2532000">and all the lists should have size at least K^3 is the</span> <span m="2537000">assumption. Then, it merges these lists</span> <span m="2541000">using essentially the sorting bound.</span> </p>
<p><span m="2545000">Actually, I should really say theta K^3.</span> </p>
<p><span m="2550000">I also don't want to be too much bigger than K^3.</span> </p>
<p><span m="2556000">Sorry about that. So, the number of memory</span> <span m="2562000">transfers that this funnel merger uses is the sorting bound</span> <span m="2570000">on K^3, so K^3 over B, log base M over B of K^3 over</span> <span m="2577000">B, plus another K memory transfers.</span> </p>
<p><span m="2583000">Now, K memory transfers is pretty reasonable.</span> </p>
<p><span m="2586000">You've got to at least start reading each list,</span> <span m="2589000">so you got to pay one memory transfer per list.</span> </p>
<p><span m="2592000">OK, but our challenge in some sense will be getting rid of</span> <span m="2596000">this plus K. This is how fast we can merge.</span> </p>
<p><span m="2599000">We'll do that after. Now, assuming we have this,</span> <span m="2602000">let me tell you how to sort. This is, eventually enough,</span> <span m="2606000">called funnel sort. But in a certain sense,</span> <span m="2611000">it's really cubed root of N way merge sort.</span> </p>
<p><span m="2616000">OK, but we'll analyze it using this.</span> </p>
<p><span m="2621000">OK, so funnel sort, we are going to define K to be</span> <span m="2627000">N to the one third, and apply this merger.</span> </p>
<p><span m="2632000">So, what do we do? It's just like here.</span> </p>
<p><span m="2636000">We're going to divide our array into N to the one third.</span> </p>
<p><span m="2645000">I mean, it they should be consecutive subarrays.</span> </p>
<p><span m="2649000">I'll call them segments of the array.</span> </p>
<p><span m="2653000">OK, for cache oblivious, it's really crucial how these</span> <span m="2658000">things are laid out. We're going to cut and get</span> <span m="2662000">consecutive chunks of the array, N to the one third of them.</span> </p>
<p><span m="2668000">Then I'm going to recursively sort them, and then I'm going to</span> <span m="2674000">merge. OK, and I'm going to merge</span> <span m="2677000">using the K funnel, the N to the one third funnel</span> <span m="2681000">because, now, why do I use one third?</span> </p>
<p><span m="2683000">Well, because of this three. OK, in order to use the N to</span> <span m="2688000">the one third funnel, I need to guarantee that the</span> <span m="2691000">total number of elements that I'm merging is at least the cube</span> <span m="2695000">of this number, K^3.</span> </p>
<p><span m="2697000">The cube of this number is N. That's exactly how many</span> <span m="2701000">elements I have in total. OK, so this is exactly what I</span> <span m="2705000">can apply the funnel. It's going to require that I</span> <span m="2708000">have it least K^3 elements, so that I can only use an N to</span> <span m="2711000">the one third funnel. I mean, if it didn't have this</span> <span m="2714000">requirement, I could just say, well, I have N lists each of</span> <span m="2717000">size one. OK, that's clearly not going to</span> <span m="2720000">work very well for our merger, I mean, intuitively because</span> <span m="2723000">this plus K will kill you. That will be a plus M which is</span> <span m="2726000">way too big. But we can use an N to the one</span> <span m="2730000">third funnel, and this is how we would sort.</span> </p>
<p><span m="2735000">So, let's analyze this algorithm.</span> </p>
<p><span m="2738000">Hopefully, it will give the sorting bound if I did</span> <span m="2742000">everything correctly. OK, this is pretty easy.</span> </p>
<p><span m="2747000">The only thing that makes this messy as I have to write the</span> <span m="2752000">sorting bound over and over. OK, this is the cost of the</span> <span m="2758000">merge. So that's at the root.</span> </p>
<p><span m="2762000">But K^3 in this case is N. So at the root of the</span> <span m="2767000">recursion, let me write the recurrence first.</span> </p>
<p><span m="2771000">Sorry. So, we have memory transfers on</span> <span m="2775000">N elements is N to the one third.</span> </p>
<p><span m="2779000">Let me get this right. Yeah, N to the one third</span> <span m="2784000">recursions, each of size N to the two thirds,</span> <span m="2788000">OK, plus this time, except K^3 is N.</span> </p>
<p><span m="2794000">So, this is plus N over B, log base M over B of N over B</span> <span m="2800000">plus cubed root of M. This is additive plus K term.</span> </p>
<p><span m="2806000">OK, so that's my recurrence. The base case will be the</span> <span m="2812000">usual. MT is some constant times M is</span> <span m="2817000">order M over B. So, we sort of know what we</span> <span m="2822000">should get here. Well, not really.</span> </p>
<p><span m="2826000">So, in all the previous recurrence is,</span> <span m="2829000">we have the same costs at every level, and that's where we got</span> <span m="2835000">our log factor. Now, we already have a log</span> <span m="2840000">factor, so we better not get another one.</span> </p>
<p><span m="2844000">Right, this is the bound we want to prove.</span> </p>
<p><span m="2848000">So, let me cheat here for a second.</span> </p>
<p><span m="2853000">All right, indeed. You may already be wondering,</span> <span m="2856000">this N to the one third seems rather large.</span> </p>
<p><span m="2859000">If it's bigger than this, we are already in trouble at</span> <span m="2863000">the very top level of the recursion.</span> </p>
<p><span m="2865000">So, I claim that that's OK. Let's look at N to the one</span> <span m="2869000">third. OK, there is a base case here</span> <span m="2871000">which covers all values of N that are, at most,</span> <span m="2874000">some constant times N. So, if I'm in this case,</span> <span m="2878000">I know that N is at least as big as the cache up to some</span> <span m="2882000">constant. OK, now the cache is it least</span> <span m="2886000">B^2, we've assumed. And you can do this with B to</span> <span m="2890000">the one plus epsilon if you're more careful.</span> </p>
<p><span m="2893000">So, N is at least B^2, OK?</span> </p>
<p><span m="2895000">And then, I always have trouble with these.</span> </p>
<p><span m="2899000">So this means that N divided by B is omega root N.</span> </p>
<p><span m="2903000">OK, there's many things you could say here,</span> <span m="2906000">and only one of them is right. So, why?</span> </p>
<p><span m="2910000">So this says that the square root of N is at least B,</span> <span m="2914000">and so N divided by B is at most N divided by square root of</span> <span m="2918000">N. So that's at least the square</span> <span m="2921000">root of N if you check that all out.</span> </p>
<p><span m="2923000">I'm going to go through this arithmetic relatively quickly</span> <span m="2928000">because it's tedious but necessary.</span> </p>
<p><span m="2930000">OK, the square root of N is strictly bigger than cubed root</span> <span m="2934000">of N. OK, so that means that N over B</span> <span m="2937000">is strictly bigger than N to the one third.</span> </p>
<p><span m="2942000">Here we have N over B times something that's bigger than</span> <span m="2945000">one. So this term definitely</span> <span m="2947000">dominates this term in this case.</span> </p>
<p><span m="2950000">As long as I'm not in the base case, I know N is at least order</span> <span m="2954000">M. This term disappears from my</span> <span m="2956000">recurrence. OK, so, good.</span> </p>
<p><span m="2958000">That was a bit close. Now, what we want to get is</span> <span m="2961000">this running time overall. So, the recursive cost better</span> <span m="2965000">be small, better be less than the constant factor increase</span> <span m="2969000">over this. So, let's write the recurrence.</span> </p>
<p><span m="2975000">So, we get N over B, log base M over B,</span> <span m="2979000">N over B at the root. Then, we split into a lot of</span> <span m="2984000">subproblems, N to the one third subproblems here,</span> <span m="2989000">and each one costs essentially this but with N replaced by N to</span> <span m="2995000">the two thirds. OK, so N to the two thirds log</span> <span m="3000000">base M over B, oops I forgot to divide it by B</span> <span m="3004000">out here, of N to the two thirds divided by B.</span> </p>
<p><span m="3011000">That's the cost of one of these nodes, N to the one third of</span> <span m="3014000">them. What should they add up to?</span> </p>
<p><span m="3017000">Well, there is N to the one third, and there's an N to the</span> <span m="3020000">two thirds here that multiplies out to N.</span> </p>
<p><span m="3023000">So, we get N over B. This looks bad.</span> </p>
<p><span m="3025000">This looks the same. And we don't want to lose</span> <span m="3028000">another log factor. But the good news is we have</span> <span m="3031000">two thirds in here. OK, this is what we get in</span> <span m="3035000">total at this level. It looks like the sorting</span> <span m="3038000">bound, but in the log there's still a two thirds.</span> </p>
<p><span m="3041000">Now, a power of two thirds and a log comes out as a multiple of</span> <span m="3045000">two thirds. So, this is in fact two thirds</span> <span m="3048000">times N over B, log base M over B of N over B,</span> <span m="3051000">the sorting bound. So, this is two thirds of the</span> <span m="3054000">sorting bound. And this is the sorting bound,</span> <span m="3057000">one times the sorting bound. So, it's going down</span> <span m="3061000">geometrically, yea!</span> </p>
<p><span m="3062000">OK, I'm not going to prove it, but it's true.</span> </p>
<p><span m="3065000">This went down by a factor of two thirds.</span> </p>
<p><span m="3068000">The next one will also go down by a factor of two thirds by</span> <span m="3072000">induction. OK, if you prove it at one</span> <span m="3074000">level, it should be true at all of them.</span> </p>
<p><span m="3077000">And I'm going to skip the details there.</span> </p>
<p><span m="3079000">So, we could check the leaf level just to make sure.</span> </p>
<p><span m="3083000">That's always a good sanity check.</span> </p>
<p><span m="3085000">At the leaves, we know our cost is M over B.</span> </p>
<p><span m="3090000">OK, and how many leaves are there?</span> </p>
<p><span m="3092000">Just like before, in some sense,</span> <span m="3094000">we have N/M leaves. OK, so in fact the total cost</span> <span m="3098000">at the bottom is N over B. And it turns out that that's</span> <span m="3101000">what you get. So, you essentially,</span> <span m="3104000">it looks funny, because you'd think that this</span> <span m="3107000">would actually be smaller than this at some intuitive level.</span> </p>
<p><span m="3111000">It's not. In fact, what's happening is</span> <span m="3114000">you have this N over B times this log thing,</span> <span m="3117000">whatever the log thing is. We don't care too much.</span> </p>
<p><span m="3120000">Let's just call it log. What you are taking at the next</span> <span m="3125000">level is two thirds times that log.</span> </p>
<p><span m="3128000">And at the next level, it's four ninths times that log</span> <span m="3131000">and so on. So, it's geometrically</span> <span m="3133000">decreasing until the log gets down to one.</span> </p>
<p><span m="3136000">And then you stop the recursion.</span> </p>
<p><span m="3137000">And that's what you get N over B here with no log.</span> </p>
<p><span m="3141000">So, what you're doing is decreasing the log,</span> <span m="3143000">not the N over B stuff. The two thirds should really be</span> <span m="3147000">over here. In fact, the number of levels</span> <span m="3149000">here is log, log N. It's the number of times you</span> <span m="3154000">have to divide a log by three halves before you get down to</span> <span m="3159000">one, OK? So, we don't actually need</span> <span m="3162000">that. We don't care how many levels</span> <span m="3165000">are because it's geometrically decreasing.</span> </p>
<p><span m="3169000">It could be infinitely many levels.</span> </p>
<p><span m="3172000">It's geometrically decreasing, and we get this as our running</span> <span m="3178000">time. MT of N is the sorting bound</span> <span m="3181000">for funnel sort. So, this is great.</span> </p>
<p><span m="3185000">As long as we can get a funnel that merges this quickly,</span> <span m="3189000">we get a sorting algorithm that sorts as fast as it possibly</span> <span m="3194000">can. I didn't write that on the</span> <span m="3197000">board that this is asymptotically optimal.</span> </p>
<p><span m="3200000">Even if you knew what B and M were, this is the best that you</span> <span m="3205000">could hope to do. And here, we are doing it no</span> <span m="3208000">matter what, B and M are. Good.</span> </p>
<p><span m="3212000">Get ready for the funnel. The funnel will be another</span> <span m="3215000">recursion. So, this is a recursive</span> <span m="3217000">algorithm in a recursive algorithm.</span> </p>
<p><span m="3219000">It's another divide and conquer, kind of like the static</span> <span m="3223000">search trees we saw at the beginning of this lecture.</span> </p>
<p><span m="3226000">So, these all tie together.</span> </p>
<p><span m="3243000">All right, the K funnel, so, I'm calling it K funnel</span> <span m="3246000">because I want to think of it at some recursive level,</span> <span m="3250000">not just N to the one third. OK, we're going to recursively</span> <span m="3254000">use, in fact, the square root of K funnel.</span> </p>
<p><span m="3257000">So, here's, and I need to achieve that bound.</span> </p>
<p><span m="3261000">So, the recursion is like the static search tree,</span> <span m="3264000">and a little bit hard to draw on one board,</span> <span m="3267000">but here we go. So, we have a square root of K</span> <span m="3274000">funnel. Recursively,</span> <span m="3277000">we have a buffer up here. This is called the output</span> <span m="3284000">buffer, and it has size K^3, and just for kicks,</span> <span m="3290000">let's suppose it that filled up a little bit.</span> </p>
<p><span m="3297000">And, we have some more buffers. And, let's suppose they've been</span> <span m="3306000">filled up by different amounts. And each of these has size K to</span> <span m="3313000">the three halves, of course.</span> </p>
<p><span m="3316000">Halves, these are called buffers, let's say,</span> <span m="3321000">with the intermediate buffers. And, then hanging off of them,</span> <span m="3328000">we have more funnels, the square root of K funnel</span> <span m="3334000">here, and a square root of K funnel here, one for each</span> <span m="3340000">buffer, one for each child of this funnel.</span> </p>
<p><span m="3347000">OK, and then hanging off of these funnels are the input</span> <span m="3353000">arrays.</span> </p>
<p><span m="3367000">OK, I'm not going to draw all K of them, but there are K input</span> <span m="3372000">arrays, input lists let's call them down at the bottom.</span> </p>
<p><span m="3376000">OK, so the idea is we are going to merge bottom-up in this</span> <span m="3381000">picture. We start with our K input</span> <span m="3383000">arrays of total size at least K^3.</span> </p>
<p><span m="3386000">That's what we're assuming we have up here.</span> </p>
<p><span m="3391000">We are clustering them into groups of size square root of K,</span> <span m="3394000">so, the square root of K groups, throw each of them into</span> <span m="3397000">a square root of K funnel that recursively merges those square</span> <span m="3400000">root of K lists. The output of those funnels we</span> <span m="3403000">are putting into a buffer to sort of accumulate what the</span> <span m="3406000">answer should be. These buffers have besides</span> <span m="3409000">exactly K to the three halves, which might not be perfect</span> <span m="3412000">because we know that on average, there should be K to the three</span> <span m="3415000">halves elements in each of these because there's K^3 total,</span> <span m="3419000">and the square root of K groups.</span> </p>
<p><span m="3422000">So, it should be K^3 divided by the square root of K,</span> <span m="3425000">which is K to the three halves on average.</span> </p>
<p><span m="3427000">But some of these will be bigger.</span> </p>
<p><span m="3429000">Some of them will be smaller. I've drawn it here.</span> </p>
<p><span m="3432000">Some of them had emptied a bit more depending on how you merge</span> <span m="3435000">things. But on average,</span> <span m="3436000">these will all fill at the same time.</span> </p>
<p><span m="3438000">And then, we plug them into a square root of K funnel,</span> <span m="3442000">and that we get the output of size K^3.</span> </p>
<p><span m="3444000">So, that is roughly what we should have happen.</span> </p>
<p><span m="3448000">OK, but in fact, some of these might fill first,</span> <span m="3451000">and we have to do some merging in order to empty a buffer,</span> <span m="3456000">make room for more stuff coming up.</span> </p>
<p><span m="3459000">That's the picture. Now, before I actually tell you</span> <span m="3463000">what the algorithm is, or analyze the algorithm,</span> <span m="3467000">let's first just think about space, a very simple warm-up</span> <span m="3471000">analysis. So, let's look at the space</span> <span m="3474000">excluding the inputs and outputs, those buffers.</span> </p>
<p><span m="3480000">OK, why do I want to exclude input and output buffers?</span> </p>
<p><span m="3482000">Well, because I want to only count each buffer once,</span> <span m="3485000">and this buffer is actually the input to this one and the output</span> <span m="3489000">to this one. So, in order to recursively</span> <span m="3491000">count all the buffers exactly once, I'm only going to count</span> <span m="3494000">these middle buffers. And then separately,</span> <span m="3496000">I'm going to have to think of the overall output and input</span> <span m="3500000">buffers. But those are sort of given.</span> </p>
<p><span m="3502000">I mean, I need K^3 for the output.</span> </p>
<p><span m="3503000">I need K^3 for the input. So ignore those overall.</span> </p>
<p><span m="3506000">And that if I count the middle buffers recursively,</span> <span m="3509000">I'll get all the buffers. So, then we get a very simple</span> <span m="3514000">recurrence for space. S of K is roughly square root</span> <span m="3519000">of K plus one times S of square root of K plus order K^2,</span> <span m="3525000">K^2 because we have the square root of K of these buffers,</span> <span m="3531000">each of size K to the three halves.</span> </p>
<p><span m="3534000">Work that out, does that sound right?</span> </p>
<p><span m="3538000">That sounds an awful lot like K^3, but maybe,</span> <span m="3542000">all right. Oh, no, that's right.</span> </p>
<p><span m="3546000">It's K to the three halves times the square root of K,</span> <span m="3549000">which is K to the three halves plus a half, which is K to the</span> <span m="3553000">four halves, which is K^2. Phew, OK, good.</span> </p>
<p><span m="3556000">I'm just bad with my arithmetic here.</span> </p>
<p><span m="3558000">OK, so K^2 total buffering here.</span> </p>
<p><span m="3560000">You add them up for each level, each recursion,</span> <span m="3563000">and the plus one here is to take into account the top guy,</span> <span m="3567000">the square root of K bottom guys, so the square root of K</span> <span m="3571000">plus one. If this were,</span> <span m="3573000">well, let me just draw the recurrence tree.</span> </p>
<p><span m="3576000">There's many ways you could solve this recurrence.</span> </p>
<p><span m="3579000">A natural one is instead of looking at K,</span> <span m="3581000">you look at log K, because here at log K is</span> <span m="3584000">getting divided by two. I just going to draw the</span> <span m="3587000">recursion trees, so you can see the intuition.</span> </p>
<p><span m="3590000">But if you are going to solve it, you should probably take the</span> <span m="3593000">logs, substitute by log. So, we have the square root of</span> <span m="3597000">K. plus one branching factor.</span> </p>
<p><span m="3600000">And then, the problem is size square root of K,</span> <span m="3603729">so this is going to be K, I believe, for each of these.</span> </p>
<p><span m="3608108">This is square root of K squared is the cost of these</span> <span m="3612324">levels. And, you keep going.</span> </p>
<p><span m="3614513">I don't particularly care what the bottom looks like because at</span> <span m="3619540">the top we have K^2. That we have K times root K</span> <span m="3623351">plus one cost at the next level. This is K to the three halves</span> <span m="3628297">plus K. OK, so we go from K^2 to K to</span> <span m="3632664">the three halves plus K. This is a super-geometric.</span> </p>
<p><span m="3637257">It's like an exponential geometric decrease.</span> </p>
<p><span m="3641207">This is decreasing really fast. So, it's order K^2.</span> </p>
<p><span m="3645800">That's my hand-waving argument. OK, so the cost is basically</span> <span m="3651220">the size of the buffers at the top level, the total space.</span> </p>
<p><span m="3656456">We're going to need this. It's actually theta K^2 because</span> <span m="3661601">I have a theta K^2 here. We are going to be this in</span> <span m="3666398">order to analyze the time. That's why it mentioned it.</span> </p>
<p><span m="3669249">It's not just a good feeling that the space is not too big.</span> </p>
<p><span m="3672368">In fact, the funnel is a lot smaller than a total input size.</span> </p>
<p><span m="3675595">The input size is K^3. But that's not so crucial.</span> </p>
<p><span m="3678177">What's crucial is that it's K^2, and we'll use that in the</span> <span m="3681243">analysis. OK, naturally,</span> <span m="3682480">this thing is laid out recursively.</span> </p>
<p><span m="3684308">You recursively store the funnel, top funnel.</span> </p>
<p><span m="3686675">Then, for example, you write out each buffer as a</span> <span m="3689256">consecutive array, in this case.</span> </p>
<p><span m="3692000">There's no recursion there. So just write them all out one</span> <span m="3694748">by one. Don't interleave them or</span> <span m="3696243">anything. Store them in order.</span> </p>
<p><span m="3697642">And that, you write out recursively these funnels,</span> <span m="3700005">the bottom funnels. OK, any way you do it</span> <span m="3701934">recursively, as long as each funnel remains a consecutive</span> <span m="3704634">chunk of memory, each buffer remains a</span> <span m="3706418">consecutive chuck of memory, the time analysis that we are</span> <span m="3709167">about to do will work.</span> </p>
<p><span m="3734000">OK, let me actually give you the algorithm that we're</span> <span m="3738062">analyzing. In order to make the funnel go,</span> <span m="3741265">what we do is say, initially, all the buffers are</span> <span m="3745015">empty. Everything is at the bottom.</span> </p>
<p><span m="3747671">And what we are going to do is, say, fill the root buffer.</span> </p>
<p><span m="3752125">Fill this one. And, that's a recursive</span> <span m="3756040">algorithm, which I'll define in a second, how to fill a buffer.</span> </p>
<p><span m="3761542">Once it's filled, that means everything has been</span> <span m="3765713">pulled up, and then it's merged. OK, so that's how we get</span> <span m="3770682">started. So, merge means to merge</span> <span m="3773522">algorithm is fill the topmost buffer, the topmost output</span> <span m="3778402">buffer. OK, and now,</span> <span m="3781002">here's how you fill a buffer. So, in general,</span> <span m="3784678">if you expand out this recursion all the way,</span> <span m="3788355">in the base case, I didn't mention you sort of</span> <span m="3792114">get a little node there. So, if you look at an arbitrary</span> <span m="3796710">buffer in this picture that you want to fill,</span> <span m="3800386">so this one's empty and you want to fill it,</span> <span m="3803979">then immediately below it will be a vertex who has two</span> <span m="3808407">children, two other buffers. OK, maybe they look like this.</span> </p>
<p><span m="3814434">You have no idea how big they are, except they are the same</span> <span m="3819141">size. It could be a lot smaller than</span> <span m="3821981">this one, a lot bigger, we don't know.</span> </p>
<p><span m="3824984">But in the end, you do get a binary structure</span> <span m="3828554">out of this just like we did with the binary search tree at</span> <span m="3833261">the beginning. So, how do we fill this buffer?</span> </p>
<p><span m="3836913">Well, we just merge these two child buffers as long as we can.</span> </p>
<p><span m="3843000">So, we merge the two children buffers as long as they are both</span> <span m="3848854">non-empty. So, in general,</span> <span m="3851253">the invariant will be that this buffer, let me write down a</span> <span m="3856820">sentence. As long as a buffer is</span> <span m="3859795">non-empty, or whatever is in that buffer, and hasn't been</span> <span m="3865170">used already, it's a prefix of the merged</span> <span m="3869009">output of the entire subtree beneath it.</span> </p>
<p><span m="3874000">OK, so this is a partially merged subsequence of everything</span> <span m="3877567">down here. This is a partially merged</span> <span m="3879781">subsequence of everything down here.</span> </p>
<p><span m="3881933">I can just merge element by element off the top,</span> <span m="3884824">and that will give me outputs to put there until one of them</span> <span m="3888453">gets emptied. And, we have no idea which one</span> <span m="3891096">will empty first just because it depends on the order.</span> </p>
<p><span m="3894357">OK, whenever one of them empties, we recursively fill it,</span> <span m="3897801">and that's it. That's the algorithm.</span> </p>
<p><span m="3901000">Whenever one empties --</span> <span m="3916000">-- we recursively fill it. And at the base case at the</span> <span m="3920391">leaves, there's sort of nothing to do.</span> </p>
<p><span m="3923456">I believe you just sort of directly read from an input</span> <span m="3927846">list. So, at the very bottom,</span> <span m="3930167">if you have some note here that's trying to merge between</span> <span m="3934807">these two, that's just a straightforward merge between</span> <span m="3939198">two lists. We know how to do that with two</span> <span m="3942595">parallel scans. So, in fact,</span> <span m="3944832">we can merge the entire thing here and just spit it out to the</span> <span m="3949886">buffer. Well, it depends how big the</span> <span m="3952786">buffer is. We can only merge it until the</span> <span m="3956100">buffer fills. Whenever a buffer is full,</span> <span m="3961445">we stop and we pop up the recursive layers.</span> </p>
<p><span m="3965394">OK, so we keep doing this merge until the buffer we are trying</span> <span m="3971131">to fill fills, and that we stop,</span> <span m="3974047">pop up. OK, that's the algorithm for</span> <span m="3977338">merging. Now, we just have to analyze</span> <span m="3980724">the algorithm. It's actually not too hard,</span> <span m="3984579">but it's a pretty clever analysis.</span> </p>
<p><span m="3989000">And, to top it off, it's an amortization,</span> <span m="3991898">your favorite. OK, so we get one last practice</span> <span m="3995159">at amortized analysis in the context of cache oblivious</span> <span m="3999072">algorithms. So, this is going to be a bit</span> <span m="4001971">sophisticated. We are going to combine all the</span> <span m="4005231">ideas we've seen. The main analysis idea we've</span> <span m="4008492">seen is that we are doing this recursion in the construction,</span> <span m="4012840">and if we imagine, we take our K funnel,</span> <span m="4015666">we split it in the middle level, make a whole bunch of</span> <span m="4019507">square root of K funnels, and so on, and then we cut</span> <span m="4023202">those in the middle level, get fourth root of K funnels,</span> <span m="4027188">and so on, and so on, at some point the funnel we</span> <span m="4030666">look at fits in cache. OK, before we said if it's in a</span> <span m="4035816">block. Now, we're going to say that at</span> <span m="4037984">some point, one of these funnels will fit in cache.</span> </p>
<p><span m="4040913">Each of the funnels at that recursive level of detail will</span> <span m="4044253">fit in cache. We are going to analyze that</span> <span m="4046656">level. We'll call that level J.</span> </p>
<p><span m="4049000">So, consider the first recursive level of detail,</span> <span m="4057266">and I'll call it J, at which every J funnel we have</span> <span m="4065877">fits, let's say, not only does it fit in cache,</span> <span m="4073800">but four of them fit in cache. It fits in one quarter of the</span> <span m="4082337">cache. OK, but we need to leave some</span> <span m="4085158">cache extra for doing other things.</span> </p>
<p><span m="4087899">But I want to make sure that the J funnel fits.</span> </p>
<p><span m="4091607">OK, now what does that mean? Well, we've analyzed space.</span> </p>
<p><span m="4096040">We know that the space of a J funnel is about J^2,</span> <span m="4099988">some constant times J^2. We'll call it C times J^2.</span> </p>
<p><span m="4104020">OK, so this is saying that C times J^2 is at most,</span> <span m="4107969">M over 4, one quarter of the cache.</span> </p>
<p><span m="4112000">OK, that means a J funnel that happens at the size sits in the</span> <span m="4115915">quarter of the cache. OK, at some point in the</span> <span m="4118803">recursion, we'll have this big tree of J funnels,</span> <span m="4121884">with all sorts of buffers in between them,</span> <span m="4124515">and each of the J funnels will fit.</span> </p>
<p><span m="4126697">So, let's think about one of those J funnels.</span> </p>
<p><span m="4129520">Suppose J is like the square root of K.</span> </p>
<p><span m="4131960">So, this is the picture because otherwise I have to draw a</span> <span m="4135618">bigger one. So, suppose this is a J funnel.</span> </p>
<p><span m="4138314">It has a bunch of input buffers, has one output buffer.</span> </p>
<p><span m="4143000">So, we just want to think about how the J funnel executes.</span> </p>
<p><span m="4146366">And, for a long time, as long as these buffers are</span> <span m="4149259">all full, this is just a merger. It's doing something</span> <span m="4152330">recursively, but we don't really care.</span> </p>
<p><span m="4154515">As soon as this whole thing swaps in, and actually,</span> <span m="4157468">I should be drawing this, as soon as the funnel,</span> <span m="4160243">the output buffer, and the input buffer swap in,</span> <span m="4163019">in other words, you bring all those blocks in,</span> <span m="4165676">you can just merge, and you can go on your merry</span> <span m="4168452">way merging until something empties or you fill the output.</span> </p>
<p><span m="4173000">So, let's analyze that. Suppose everything is in</span> <span m="4176323">memory, because we know it fits. OK, well I have to be a little</span> <span m="4180707">bit careful. The input buffers are actually</span> <span m="4183676">pretty big in total size because the total size is K to the three</span> <span m="4188202">halves here versus K to the one half.</span> </p>
<p><span m="4190747">Actually, this is of size K. Let me draw a general picture.</span> </p>
<p><span m="4194848">We have a J funnel, because otherwise the</span> <span m="4197676">arithmetic is going to get messy.</span> </p>
<p><span m="4201000">We have a J funnel. Its size is C times J^2,</span> <span m="4204854">we're supposing. The number of inputs is J,</span> <span m="4208619">and the size of them is pretty big.</span> </p>
<p><span m="4211666">Where did we define that? We have a K funnel.</span> </p>
<p><span m="4215610">The total input size is K^3. So, the total input size here</span> <span m="4220719">would be J^3. We can't afford to put all that</span> <span m="4224663">in cache. That's an extra factor of J.</span> </p>
<p><span m="4227980">But, we can afford to one block per input.</span> </p>
<p><span m="4233000">And for merging, that's all we need.</span> </p>
<p><span m="4235035">I claim that I can fit the first block of each of these</span> <span m="4238176">input arrays in cash at the same time along with the J funnel.</span> </p>
<p><span m="4241724">And so, for that duration, as long as all of that is in</span> <span m="4244864">cache, this thing can merge at full speed just like we were</span> <span m="4248238">doing parallel scans. You use up all the blocks down</span> <span m="4251204">here, and one of them empties. You go to the next block in the</span> <span m="4254752">input buffer and so on, just like the normal merge</span> <span m="4257602">analysis of parallel arrays, at this point we assume that</span> <span m="4260859">everything here is fitting in cache.</span> </p>
<p><span m="4264000">So, it's just like before. Of course, in fact,</span> <span m="4268485">it's recursive but we are analyzing it at this level.</span> </p>
<p><span m="4273668">OK, I need to prove that you can fit one block per input.</span> </p>
<p><span m="4279250">It's not hard. It's just computation.</span> </p>
<p><span m="4282839">And, it's basically the way that these funnels were designed</span> <span m="4288720">was so that you could fit one block per input buffer.</span> </p>
<p><span m="4295000">And, here's the argument. So, the claim is you can also</span> <span m="4301607">fit one memory block in the cache per input buffer.</span> </p>
<p><span m="4307725">So, this is in addition to one J funnel.</span> </p>
<p><span m="4312497">You could also fit one block for each of its input buffers.</span> </p>
<p><span m="4319594">OK, this is of the J funnel. It's not any funnel because</span> <span m="4326230">bigger funnels are way too big. OK, so here's how we prove</span> <span m="4330938">that. J^2 is at most a quarter M.</span> </p>
<p><span m="4333581">That's what we assumed here, actually CJ2.</span> </p>
<p><span m="4336967">I'm not going to bother with the C because that's going to</span> <span m="4341675">make my life even harder. OK, I think this is even a</span> <span m="4345887">weaker constraint. So, the size of our funnel</span> <span m="4349522">proves about J^2. That's at most a quarter of the</span> <span m="4355110">cache. That implies that J,</span> <span m="4357719">if we take square roots of both sides, is at most a half square</span> <span m="4363941">root of M. OK, also, we know that B is at</span> <span m="4367955">most square root of M because M is at least B squared.</span> </p>
<p><span m="4373273">So, we put these together, and we get J times B is at most</span> <span m="4378993">a half M. OK, now I claim that what we</span> <span m="4382611">are asking for here is J times B because in a J funnel,</span> <span m="4385718">there are J input arrays. And so, if you want one block</span> <span m="4388825">each, that costs a space of B each.</span> </p>
<p><span m="4390781">So, for each input buffer we have one block of size B,</span> <span m="4393831">and the claim is that that whole thing fits in half the</span> <span m="4396938">cache. And, we've only used a quarter</span> <span m="4399009">of the cache. So in total,</span> <span m="4400448">we use three quarters of the cache and that's all we'll use.</span> </p>
<p><span m="4403843">OK, so that's good news. We can also fit one more block</span> <span m="4406950">to the output. Not too big a deal.</span> </p>
<p><span m="4410000">So now, as long as this J funnel is running,</span> <span m="4413401">if it's all in cache, all is well.</span> </p>
<p><span m="4416012">What does that mean? Let me first analyze how long</span> <span m="4419889">it takes for us to swap in this funnel.</span> </p>
<p><span m="4422895">OK, so how long does it take for us to read all the stuff in</span> <span m="4427563">a J funnel and one block per input buffer?</span> </p>
<p><span m="4430806">That's what it would take to get started.</span> </p>
<p><span m="4435000">So, this is swapping in a J funnel, which means reading the</span> <span m="4442344">J funnel in its entirety, and reading one block per input</span> <span m="4449434">buffer. OK, the cost of the swap in is</span> <span m="4454120">pretty natural. The size of the buffer divided</span> <span m="4459818">by B, because that's just sort of a linear scan to read it in,</span> <span m="4467542">and we need to read one block per buffer.</span> </p>
<p><span m="4474000">These buffers could be all over the place because they're pretty</span> <span m="4478463">big. So, let's say we pay one memory</span> <span m="4480942">transfer for each input buffer just to get started to read the</span> <span m="4485264">first block. OK, the claim is,</span> <span m="4487318">and here we need to do some more arithmetic.</span> </p>
<p><span m="4490365">This is, at most, J^3 over B.</span> </p>
<p><span m="4492348">OK, why is it, at most, J^3 over B?</span> </p>
<p><span m="4494757">Well, this was the first level at which things fit in cache.</span> </p>
<p><span m="4500000">That means the next level bigger, which is J^2,</span> <span m="4504119">which has size J^4, should be bigger than cache.</span> </p>
<p><span m="4508327">Otherwise we would have stopped then.</span> </p>
<p><span m="4511552">OK, so this is just more arithmetic.</span> </p>
<p><span m="4514686">You can either believe me or follow the arithmetic.</span> </p>
<p><span m="4519164">We know that J^4 is at least M. So, this means that,</span> <span m="4523731">and we know that M is at least B^2.</span> </p>
<p><span m="4526776">Therefore, J^2, instead of J^4,</span> <span m="4529462">we take the square root of both sides, J^2 is at least B.</span> </p>
<p><span m="4536000">OK, so certainly J^2 over B is at most J^3 over B.</span> </p>
<p><span m="4539379">But also J is at most J^3 over B because J^2 is at least B.</span> </p>
<p><span m="4543379">Hopefully that should be clear. That's just algebra.</span> </p>
<p><span m="4546896">OK, so we're not going to use this bound because that's kind</span> <span m="4550965">of complicated. We're just going to say,</span> <span m="4553655">well, it causes J^3 over B to get swapped in.</span> </p>
<p><span m="4556689">Now, why is J^3 over B a good thing?</span> </p>
<p><span m="4560000">Because we know the total size of inputs to the J funnel is</span> <span m="4563972">J^3. So, to read all of the inputs</span> <span m="4566232">to the J funnel takes J^3 over B.</span> </p>
<p><span m="4568424">So, this is really just a linear extra cost to get the</span> <span m="4572054">whole thing swapped in. It sounds good.</span> </p>
<p><span m="4574657">To do the merging would also cost J^3 over B.</span> </p>
<p><span m="4577671">So, the swap-in causes J^3 over B to merge all these J^3</span> <span m="4581438">elements. If they were all there in the</span> <span m="4584041">inputs, it would take J^3 over B because once everything is</span> <span m="4588013">there, you're merging at full speed, one per B items per</span> <span m="4591780">memory transfer on average. OK, the problem is you're going</span> <span m="4596859">to swap out, which you may have imagined.</span> </p>
<p><span m="4599260">As soon as one of your input buffers empties,</span> <span m="4601899">let's say this one's almost gone, as soon as it empties,</span> <span m="4605199">you're going to totally obliterate that funnel and swap</span> <span m="4608439">in this one in order to merge all the stuff there,</span> <span m="4611380">and fill this buffer back up. This is where the amortization</span> <span m="4614920">comes in. And this is where the log</span> <span m="4616960">factor comes in because so far it we've basically paid a linear</span> <span m="4620680">cost. We are almost done.</span> </p>
<p><span m="4627034">So, we charge, sorry, I'm jumping ahead of</span> <span m="4637897">myself. So, when an input buffer</span> <span m="4646111">empties, we swap out. And we recursively fill that</span> <span m="4655169">buffer. OK, I'm going to assume that</span> <span m="4657881">there is absolutely no reuse, that is recursive filling</span> <span m="4662065">completely swapped everything out and I have to start from</span> <span m="4666481">scratch for this funnel. So, when that happens,</span> <span m="4670046">I feel this buffer, and then I come back and I say,</span> <span m="4673920">well, I go swap it back in. So when the recursive call</span> <span m="4678026">finishes, I swap back in. OK, so I recursively fill,</span> <span m="4681978">and then I swap back in. And, at the swapping back in</span> <span m="4688031">costs J^3 over B. I'm going to charge that cost</span> <span m="4693012">to the elements that just got filled.</span> </p>
<p><span m="4696910">So this is an amortized charging argument.</span> </p>
<p><span m="4728000">How many are there? It's the only question.</span> </p>
<p><span m="4731322">It turns out, things are really good,</span> <span m="4734169">like here, for the square root of K funnel, we have each buffer</span> <span m="4739073">has size K to the three halves. OK, so this is a bit</span> <span m="4744063">complicated. But I claim that the number of</span> <span m="4748395">elements here that fill the buffer is J^3.</span> </p>
<p><span m="4752624">So, if you have a J funnel, each of the input buffers has</span> <span m="4758401">size J^3. It should be correct if you</span> <span m="4762114">work it out. So, we're charging this J^3</span> <span m="4766137">over B cost to J^3 elements, which sounds like you're</span> <span m="4771501">charging, essentially, one over B to each element.</span> </p>
<p><span m="4778000">Sounds great. That means that,</span> <span m="4779951">so you're thinking overall, I mean, there are N elements,</span> <span m="4783718">and to each one you charge a one over B cost.</span> </p>
<p><span m="4786678">That sounds like the total running time is N over B.</span> </p>
<p><span m="4790110">It's a bit too fast for sorting.</span> </p>
<p><span m="4792195">We lost the log factor. So, what's going on is that</span> <span m="4795559">we're actually charging to one element more than once.</span> </p>
<p><span m="4800000">And, this is something that we don't normally do,</span> <span m="4802729">never done it in this class, but you can do it as long as</span> <span m="4805913">you bound that the number of times you charge.</span> </p>
<p><span m="4808471">OK, and wherever you do a charging argument,</span> <span m="4810916">you say, well, this doesn't happen too many</span> <span m="4813304">times because whenever this happens, this happens.</span> </p>
<p><span m="4816090">You should say, you should prove that the thing</span> <span m="4818705">that you're charging to, Ito charged to that think very</span> <span m="4821775">many times. So here, I have a quantifiable</span> <span m="4824107">thing that I'm charging to: elements.</span> </p>
<p><span m="4826153">So, I'm saying that for each element that happened to come</span> <span m="4829394">into this buffer, I'm going to charge it a one</span> <span m="4831952">over B cost. How many times does one element</span> <span m="4835992">get charged? Well, each time it gets charged</span> <span m="4838755">to, it's moved into a new buffer.</span> </p>
<p><span m="4840812">How many buffers could it move through?</span> </p>
<p><span m="4843254">Well, it's just going up all the time.</span> </p>
<p><span m="4845632">Merging always goes up. So, we start here and you go to</span> <span m="4849102">the next buffer, and you go to the next buffer.</span> </p>
<p><span m="4852059">The number of buffers you visit is the right log,</span> <span m="4855143">it turns out. I don't know which log that is.</span> </p>
<p><span m="4859000">So, the number of charges of a one over B cost to each element</span> <span m="4865199">is the number of buffers it visits, and that's a log factor.</span> </p>
<p><span m="4871196">That's where we get an extra log factor on the running time.</span> </p>
<p><span m="4877193">It is, this is the number of levels of J funnels that you can</span> <span m="4883291">visit. So, it's log K divided by log</span> <span m="4886849">J, if I got it right. OK, and we're almost done.</span> </p>
<p><span m="4893228">Let's wrap up a bit. Just a little bit more</span> <span m="4898442">arithmetic, unfortunately. So, log K over log J.</span> </p>
<p><span m="4904278">Now, J^2 is like M, roughly.</span> </p>
<p><span m="4907630">It might be square root of M. But, log J is basically log M.</span> </p>
<p><span m="4914956">There's some constants there. So, the number of charges here</span> <span m="4922281">is theta, log K over log M. So, now this is a bit,</span> <span m="4928299">we haven't seen this in amortization necessarily,</span> <span m="4931135">but we just need to count up total amount of charging.</span> </p>
<p><span m="4934265">All work gets charged to somebody, except we didn't</span> <span m="4937219">charge the very initial swapping in to everybody.</span> </p>
<p><span m="4940054">But, every time we do some swapping in, we charge it to</span> <span m="4943244">someone. So, how many times does</span> <span m="4945075">everything it charged? Well, there are N elements.</span> </p>
<p><span m="4947970">Each gets charged to a one over B cost, and the number of times</span> <span m="4951632">it gets charged is its log K over log M.</span> </p>
<p><span m="4955000">So therefore, the total cost is number of</span> <span m="4959246">elements times a one over B times this log thing.</span> </p>
<p><span m="4964342">OK, it's actually plus K. We forgot about a plus K,</span> <span m="4969650">but that's just to get started in the very beginning,</span> <span m="4975171">and start on all of the input lists.</span> </p>
<p><span m="4978886">OK, this is an amortization analysis to prove this bound.</span> </p>
<p><span m="4986000">Sorry, what was N here? I assumed that I started out</span> <span m="4990914">with K cubed elements at the bottom.</span> </p>
<p><span m="4994286">The total number of elements in the bottom was K^3 theta.</span> </p>
<p><span m="4999682">OK, so I should have written K^3 not M.</span> </p>
<p><span m="5003343">This should be almost the same as this, OK, but not quite.</span> </p>
<p><span m="5008835">This is log based M of K, and if you do a little bit of</span> <span m="5014039">arithmetic, this should be K^3 over B times log base M over B</span> <span m="5019820">of K over B plus K. That's what I want to prove.</span> </p>
<p><span m="5025747">Actually there's a K^3 here instead of a K,</span> <span m="5029867">but that's just a factor of three.</span> </p>
<p><span m="5033105">And this follows because we assume we are not in the base</span> <span m="5038600">case. So, K is at least M,</span> <span m="5041052">which is at least B^2, and therefore K over B is omega</span> <span m="5046252">square root of K. OK, so K over B is basically</span> <span m="5050716">the same as K when you put it in a log.</span> </p>
<p><span m="5053045">So here we have log base M. I turned it into log base M</span> <span m="5056354">over B. That's even worse.</span> </p>
<p><span m="5057887">It doesn't matter. And, I have log of K.</span> </p>
<p><span m="5060277">I replaced it with K over B, but K over B is basically</span> <span m="5063525">square root of K. So in a log,</span> <span m="5065303">that's just a factor of a half. So that concludes the analysis</span> <span m="5070261">of the funnel. We get this crazy running time,</span> <span m="5073654">which is basically sorting bound plus a little bit.</span> </p>
<p><span m="5077424">We plug that into our funnel sort, and we get,</span> <span m="5080817">magically, optimal cache oblivious sorting just in time.</span> </p>
<p><span m="5084964">Tuesday is the final. The final is more in the style</span> <span m="5088809">of quiz one, so not too much creativity, mostly mastery of</span> <span m="5093107">material. It covers everything.</span> </p>
<p><span m="5095369">You don't have to worry about the details of funnel sort,</span> <span m="5099591">but everything else. So it's like quiz one but for</span> <span m="5103285">the entire class. It's three hours long,</span> <span m="5107664">and good luck. It's been a pleasure having</span> <span m="5110766">you, all the students. I'm sure Charles agrees,</span> <span m="5114247">so thanks everyone. It was a lot of fun.</span> </p>
</div>
        <div id="vid_transcript" itemprop="description" class="tabContent hide">
<h2 class="subhead">Free Downloads</h2>
<h3 class="subsubhead">Video</h3>
<ul>
<li>iTunes U (<a href="https://itunes.apple.com/us/itunes-u/id341597754">MP4 - 179MB</a>)</li>
<li>Internet Archive (<a href="http://www.archive.org/download/MIT6.046JF05MPEG4/ocw-6.046-14dec2005-220k.mp4">MP4 - 351MB</a>)</li>
</ul>
<br><h3 class="subsubhead">Free Streaming</h3>
<ul><li><a href="http://videolectures.net/mit6046jf05_introduction_algorithms/">VideoLectures.net</a></li></ul>
<br><h3 class="subsubhead">Subtitle</h3>
<ul><li>English - US (<a href="../../../contents/video-lectures/lecture-25-advanced-topics-cont.-discussion-of-follow-on-classes/zjUDy6a5vx4.srt">SRT</a>)</li></ul>
</div>
    
   </div>  




      					 
        <div class="" id="parent-fieldname-bottom_html_area">
            
            
        </div>
    
                    </div>
<!--Course_inner_chip tag close -->
           		</div>
<!--Course_wrapper tag close --> 
            </div>
<!--left tag close -->
            <div id="right">
                <!--Begin Right Portion -->
                    <div>
    
<div id="portletwrapper-6f63772e7269676874746f70706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a646f6e617465" class="portletWrapper kssattr-portlethash-6f63772e7269676874746f70706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a646f6e617465">
<div class="portletStaticText portlet-static-donate"><p class="zero"><a href="http://ocw.mit.edu/donate"><img src="../../../common/images/button_donate-now.png" alt="Donate Now." class="donate"></a></p></div>

</div>




</div>

                	<div>
    



</div>


        <div class="" id="parent-fieldname-rsi_top_html_area">
            
            
        </div>
    

<!-- RSI google ad space-->


<div id="google_ads">    
    <script type="text/javascript" src="http://partner.googleadservices.com/gampad/google_service.js"></script><script type="text/javascript">GS_googleAddAdSenseService("ca-pub-6588555046597237");GS_googleEnableAllServices();</script><script type="text/javascript">GA_googleAddSlot("ca-pub-6588555046597237", "VIDEO_INDIVIDUAL_SLOT_A_DL");GA_googleAddSlot("ca-pub-6588555046597237", "VIDEO_INDIVIDUAL_SLOT_B_DL");GA_googleAddSlot("ca-pub-6588555046597237", "VIDEO_INDIVIDUAL_SLOT_C_DL");</script><script type="text/javascript">GA_googleFetchAds();</script><script language="javascript" type="text/javascript">
GA_googleAddAttr("TYPE","HOUSE");
GA_googleAddAttr("DEPARTMENT","6");
GA_googleAddAttr("CRS_BEG2","04");
GA_googleAddAttr("CRS_END","6J");
GA_googleAddAttr("SESSION","F");
GA_googleAddAttr("YEAR","05");
</script><script type="text/javascript">GA_googleFillSlot("VIDEO_INDIVIDUAL_SLOT_A_DL");</script><script type="text/javascript">GA_googleFillSlot("VIDEO_INDIVIDUAL_SLOT_B_DL");</script><script type="text/javascript">GA_googleFillSlot("VIDEO_INDIVIDUAL_SLOT_C_DL");</script>
</div>

<!-- End RSI ads--> 

<div>
    



</div>

            </div>
<!--Right div close -->
            <div class="clear"></div> 
        </div>
<!--grid tag close --> 
      </div>
		
		<div id="bottom">
			<div id="grid">
				
<div id="portletwrapper-6f63772e626f74746f6d706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d666f6f746572" class="portletWrapper kssattr-portlethash-6f63772e626f74746f6d706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d666f6f746572">
<div class="portletStaticText portlet-static-site-footer">
<!--googleoff: index--> <div id="bottom"><div id="grid">
<!-- *begin footer* --> <div role="navigation sitemap" id="footer">
<div class="grid_2 alpha" id="foot-c1">
<h4 class="footer">Find Courses</h4> <ul class="foot-bullet">
<li><a href="http://ocw.mit.edu/courses/find-by-topic/">Find by Topic</a></li>     <li><a href="http://ocw.mit.edu/courses/find-by-number/">Find by Course Number</a></li>     <li><a href="http://ocw.mit.edu/courses/find-by-department/">Find by Department</a></li>     <li><a href="http://ocw.mit.edu/courses/audio-video-courses/">Audio/Video Courses</a></li>     <li><a href="http://ocw.mit.edu/courses/subtitled/">Courses with Subtitles</a></li>     <li><a href="http://ocw.mit.edu/courses/online-textbooks/">Online Textbooks</a></li>     <li><a href="http://ocw.mit.edu/courses/new-courses/">New Courses</a></li>     <li><a href="http://ocw.mit.edu/courses/most-visited-courses/">Most Visited Courses</a></li>     <li><a href="http://ocw.mit.edu/courses/ocw-scholar/">OCW Scholar Courses</a></li>     <li><a href="http://ocw.mit.edu/courses/this-course-at-mit/">This Course at MIT</a></li>     <li><a href="http://ocw.mit.edu/resources/">Supplemental Resources</a></li>     <li><a href="http://ocw.mit.edu/courses/translated-courses/">Translated Courses</a></li>     <li><a href="http://ocw.mit.edu/courses/">View All Courses</a></li> </ul>
</div> <div class="grid_2" id="foot-c2">
<h4 class="footer">About</h4> <ul class="foot-bullet">
<li><a href="http://ocw.mit.edu/about/">About OpenCourseWare</a></li>     <li><a href="http://ocw.mit.edu/about/site-statistics/">Site Stats</a></li>     <li><a href="http://ocw.mit.edu/about/ocw-stories/">OCW Stories</a></li>     <li><a href="http://ocw.mit.edu/about/media-coverage/">Media Coverage</a></li>     <li><a href="http://ocw.mit.edu/about/newsletter/">Newsletter</a></li>     <li><a href="http://ocw.mit.edu/about/media-coverage/press-releases/">Press Releases</a></li> </ul>
</div> <div class="grid_2" id="foot-c3">
<h4 class="footer">Donate</h4> <ul class="foot-bullet">
<li><a href="http://ocw.mit.edu/donate">Make a Donation</a></li>     <li><a href="http://ocw.mit.edu/donate/why-donate/">Why Donate?</a></li>     <li><a href="http://ocw.mit.edu/donate/our-supporters/">Our Supporters</a></li>     <li><a href="http://ocw.mit.edu/donate/other-ways-to-contribute/">Other Ways to Contribute</a></li>     <li><a href="http://ocw.mit.edu/donate/shop-ocw/">Shop OCW</a></li>     <li><a href="http://ocw.mit.edu/support/">Become a Corporate Sponsor</a></li> </ul>
</div> <div class="grid_2" id="foot-c4">
<h4 class="footer">Featured Sites</h4> <ul class="foot-bullet">
<li><a href="http://ocw.mit.edu/high-school/">Highlights for High School</a></li>     <li><a href="http://ocw.mit.edu/educator/">OCW Educator</a></li>     <li><a href="http://ocw.mit.edu/courses/crosslinks/">MIT Crosslinks and OCW</a></li>     <li><a href="http://ocw.mit.edu/ans7870/featured/mitx-courses-on-edx.htm">MITx Courses on edX</a></li>     <li><a href="http://teachingexcellence.mit.edu/">Teaching Excellence at MIT</a></li>     <li><a href="http://www.oeconsortium.org/">Open Education Consortium</a></li> </ul>
<h4 style="margin-top: 14px;" class="footer">Tools</h4> <ul class="foot-bullet">
<li><a href="http://ocw.mit.edu/help/">Help &amp; FAQs</a></li>     <li><a href="../../../common/jsp/feedback.htm">Contact Us</a></li>     <li><a href="../../../common/search/AdvancedSearch.htm">Advanced Search</a></li>     <li><a href="http://ocw.mit.edu/help/site-map/">Site Map</a></li>     <li><a href="../../../common/terms/index.htm">Privacy &amp; Terms of Use</a></li>     <li><a href="http://ocw.mit.edu/help/rss/">RSS Feeds</a></li> </ul>
</div> <div class="grid_4 omega" id="foot-c5">
<h4 class="footer">Our Corporate Supporters</h4> <!-- HOME_CORP_LOGO_1 --> <div class="sponsors_google_ads_even" id="div-gpt-ad-1388181177156-0"><script type="text/javascript">
googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-0'); });
</script></div> <!-- HOME_CORP_LOGO_2 --> <div class="sponsors_google_ads_odd" id="div-gpt-ad-1388181177156-1"><script type="text/javascript">
googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-1'); });
</script></div> <!-- HOME_CORP_LOGO_3 --> <div class="sponsors_google_ads_even" id="div-gpt-ad-1388181177156-2"><script type="text/javascript">
googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-2'); });
</script></div> <!-- HOME_CORP_LOGO_4 --> <div class="sponsors_google_ads_odd" id="div-gpt-ad-1388181177156-3"><script type="text/javascript">
googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-3'); });
</script></div> <!-- HOME_CORP_LOGO_5 --> <div class="sponsors_google_ads_even" id="div-gpt-ad-1388181177156-4"><script type="text/javascript">
googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-4'); });
</script></div> <!-- HOME_CORP_LOGO_6 --> <div class="sponsors_google_ads_odd" id="div-gpt-ad-1388181177156-5"><script type="text/javascript">
googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-5'); });
</script></div>
</div> <div class="grid_12 alpha omega" style="border-top: thin solid #d5c9ba; padding-top: 24px; margin-bottom: 10px; text-align: center;"><p style="font-family: TitilliumText22LRegular,Verdana; text-align: center; font-size: 1.1em;">Support for <span style="letter-spacing: 0.5px;"><strong>MIT OPENCOURSEWARE'S 15th anniversary</strong></span> is provided by <a href="http://www.sapientnitro.com/en-us.html#home"><img style="width: 145px; height: 35px; vertical-align: middle; margin-left: 7px;" alt="SapientNitro logo and nameplate." src="../../../common/images/logo_sapient.png"></a></p></div> <div itemtype="http://schema.org/CollegeOrUniversity" itemscope="" itemprop="publisher" class="grid_12 alpha omega">
<h4 style="border-top: thin solid #d5c9ba; padding-top: 10px; margin-bottom: 10px;" class="footer">About <span itemprop="name">MIT OpenCourseWare</span>
</h4> <p itemprop="description" style="color: #999; font-size: 1em; line-height: 1.5em; margin-top: 10px;">MIT OpenCourseWare makes the materials used in the teaching of almost all of MIT's subjects available on the Web, free of charge. With more than 2,200 courses available, OCW is delivering on the promise of open sharing of knowledge. <a href="http://ocw.mit.edu/about/">Learn more »</a></p>
</div> <div style="border-top: none;" class="grid_12 alpha omega" id="foot-copy">
<a href="http://web.mit.edu"><img style="width: 195; height: 44;" alt="Massachusetts Institute of Technology logo and name." src="../../../common/images/logo_mit.png"></a><a href="http://odl.mit.edu"><img style="width: 289; height: 54; vertical-align: top;" alt="MIT Office of Digital Learning logo and name." src="http://ocw.mit.edu/images/logo_odl.png"></a><a href="http://www.oeconsortium.org/"><img style="width: 219px; height: 59px; vertical-align: top;" alt="Open Education Consortium logo." src="http://ocw.mit.edu/images/logo_oec.png"></a><a itemprop="useRightsUrl" rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/"><img style="width: 126px; height: 44px; margin-right: 0; margin-left: 13px;" alt="Creative Commons logo with terms BY-NC-SA." src="../../../common/images/cc_by-nc-sa.png"></a> <p class="copyright">© 2001–2015<br> Massachusetts Institute of Technology</p> <p style="font-size: 0.9em; margin-bottom: 15px;">Your use of the MIT OpenCourseWare site and materials is subject to our <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/">Creative Commons License</a> and other <a rel="cc:morePermissions" href="../../../common/terms/index.htm">terms of use</a>.</p>
</div>
</div>
</div></div> <!--googleon: index-->
</div>

</div>





                
			</div> <!-- bottom grid end -->
		</div>
<!-- bottom end -->
		
		
   </body>
</html>
