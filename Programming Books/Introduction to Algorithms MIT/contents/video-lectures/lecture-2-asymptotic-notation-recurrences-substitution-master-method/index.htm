<!DOCTYPE html><html lang="en">
<head>
<meta charset="utf-8">
<meta name="format-detection" content="telephone=no">
<title>Lecture 2: Asymptotic Notation; Recurrences; Substitution, Master Method | Video Lectures | Introduction to Algorithms (SMA 5503) | Electrical Engineering and Computer Science | MIT OpenCourseWare</title>
<!-- Begin Automatic Metadata Insertion --><meta content="6-046j-introduction-to-algorithms-sma-5503-fall-2005" name="WT.cg_n">
<meta content="Lecture 2: Asymptotic Notation; Recurrences; Substitution, Master Method" name="WT.cg_s">
<meta content="" name="Description">
<meta content="Leiserson, Charles" name="Author">
<meta content="Demaine, Erik" name="Author">
<meta content="algorithms,efficient algorithms,sorting,search trees,heaps,hashing,divide-and-conquer,dynamic programming,amortized analysis,graph algorithms,shortest paths,network flow,computational geometry,number-theoretic algorithms,polynomial and matrix calculations,caching,parallel computing,Algorithms and Data Structures" name="keywords">
<meta content="6.046J Introduction to Algorithms (SMA 5503) | Lecture 2: Asymptotic Notation; Recurrences; Substitution, Master Method" name="Search_Display">
<meta content="Algorithms and Data Structures" itemprop="about">
<!-- End Automatic Metadata Insertion --><link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/grid.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/base.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/menu.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/jquery.bubblepopup.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/courses.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/courses_new.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/jquery.jscrollpane.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/media_tabs.css">
<link href="http://ocw.mit.edu/xml/ocwcc.rdf" type="application/rdf+xml" rel="metadata">
<link rel="canonical" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-046j-introduction-to-algorithms-sma-5503-fall-2005/video-lectures/lecture-2-asymptotic-notation-recurrences-substitution-master-method">
<link rel="apple-touch-icon" href="../../../common/images/apple-touch-icon.png">
<script type="text/javascript" src="../../../common/scripts/jquery.js"></script><script type="text/javascript" src="../../../common/scripts/ocw-media-utils-offline.js"></script><script type="text/javascript" src="../../../common/scripts/ocw-offline.js"></script><script type="text/javascript" src="../../../common/scripts/jquery.bubblepopup.min.js"></script><script type="text/javascript" src="../../../common/scripts/jquery-ui.min.js"></script><script type="text/javascript" src="../../../common/scripts/jquery.jscrollpane.min.js"></script><script type="text/javascript" src="../../../common/scripts/bubble-popup-offline.js"></script><script type="text/javascript">
      $(document).ready(function() {
        $("#tabs").tabs();
        IpadScroller();
      });
    </script>
</head>
<body itemscope itemtype="http://schema.org/WebPage">
        
	

        <div id="top">
			<div id="grid">
				
				
					
<div id="portletwrapper-6f63772e746f70706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d686561646572" class="portletWrapper kssattr-portlethash-6f63772e746f70706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d686561646572">
<div class="portletStaticText portlet-static-site-header">
<!--googleoff: index-->
<div class="grid_6 alpha" role="banner" id="banner"><a href="http://ocw.mit.edu/"><img class="logo" alt="MIT OpenCourseWare, Massachusetts Institute of Technology" src="../../../common/images/ocw_mast.png"></a></div>
<div class="grid_6 omega" role="form toolbar" id="subscribe">
<div class="module">
<table class="social"><tbody><tr>
<td class="socialbutton"><a href="http://ocw.mit.edu/subscribe/index.htm?utm_source=header"><img src="../../../common/images/trans.gif" alt="An icon depicting an envelope.">Subscribe to the OCW Newsletter</a></td>
            <td>
<a href="https://plus.google.com/104567381989352550847/posts"><img alt="Click to visit our Google+ page." src="../../../common/images/icon_gp.png"></a><a href="https://www.pinterest.com/mitocw/pins/"><img alt="Click to visit our Pinterest page." src="../../../common/images/icon_pin.png"></a><a href="http://facebook.com/mitocw"><img alt="Click to visit our Facebook page." src="../../../common/images/icon_fb.png"></a><a href="http://twitter.com/mitocw"><img alt="Click to visit our Twitter feed." src="../../../common/images/icon_tw.png"></a>
</td>
        </tr></tbody></table>
</div>
<p class="helplinks"><a href="http://ocw.mit.edu/help">Help</a>   |   <a href="../../../common/jsp/feedback.htm">Contact Us</a></p>
</div>
<div class="clear"> </div>
<!--googleon: index-->
</div>

</div>





<!--googleoff: index-->
<div id="mega" role="navigation" class="grid_8 alpha">        
	<ul id="menu">
<li id="menu_home">
            <a href="http://ocw.mit.edu/"><img src="../../../common/images/top-nav_home.png" class="home_icon" alt="Click for site home page."></a><!-- Begin Home Item -->
        </li>
<!-- End Home Item -->        
        <li class="selected">
            <a href="#" class="drop">Find Courses</a><!-- Begin 5 columns Item -->
            <div class="dropdown_5columns-a mega-courses">                    
                <div class="col_1a">
                    <div class="row_1a">
                        <div class="quart">
                            <h2 class="nav">Find courses by:</h2>
                            <ul class="nav-bullet find_by">
<li><a href="http://ocw.mit.edu/courses/find-by-topic/">Topic</a></li>
                                <li><a href="http://ocw.mit.edu/courses/find-by-number/">MIT Course Number</a></li>
                                <li><a href="http://ocw.mit.edu/courses/find-by-department/">Department</a></li>
                            </ul>
<ul style="margin-top: 88px;" class="nav-bullet find_by">
<li style="font-weight: normal; font-size: 1em;"><a href="http://ocw.mit.edu/courses/">View All Courses</a></li>
							</ul>
</div>
                        <div class="quart">
                            <h2 class="nav">Collections</h2>
                            <ul class="nav-bullet">
<li><a href="http://ocw.mit.edu/courses/audio-video-courses/">Audio/Video Lectures</a></li>
                                <li><a href="http://ocw.mit.edu/courses/online-textbooks/">Online Textbooks</a></li>
                                <li><a href="http://ocw.mit.edu/courses/new-courses/">New Courses</a></li>
                                <li><a href="http://ocw.mit.edu/courses/most-visited-courses/">Most Visited Courses</a></li>
                                <li><a href="http://ocw.mit.edu/courses/ocw-scholar/">OCW Scholar Courses</a></li>
                                <li><a href="http://ocw.mit.edu/courses/this-course-at-mit/">This Course at MIT</a></li>
                                <li><a href="http://ocw.mit.edu/resources/">Supplemental Resources</a></li>
                            </ul>
</div>
                        <div class="clear"> </div>
                    </div>
                    <div class="row_1b">
                        <h2 class="nav">Cross-Disciplinary Topic Lists</h2>
                        <div class="quart">
                        <ul class="nav-bullet">
<li><a href="http://ocw.mit.edu/courses/energy-courses">Energy</a></li>
                            <li><a href="http://ocw.mit.edu/courses/entrepreneurship">Entrepreneurship</a></li>
                            <li><a href="http://ocw.mit.edu/courses/environment-courses">Environment</a></li>
                        </ul>
</div>    
                        <div class="quart">
                        <ul class="nav-bullet">
<li><a href="http://ocw.mit.edu/courses/intro-programming">Introductory Programming</a></li>
                            <li><a href="http://ocw.mit.edu/courses/life-sciences">Life Sciences</a></li>
                            <li><a href="http://ocw.mit.edu/courses/transportation-courses">Transportation</a></li>
                        </ul>
</div>
                        <div class="clear"> </div>
                    </div>
                    <div class="clear"> </div>
                </div>
                <div class="col_1b">
                    <h2 class="nav">Translated Courses</h2>
                    <ul class="nav-bullet">
<li><a href="http://ocw.mit.edu/courses/translated-courses/traditional-chinese">繁體字 / Traditional Chinese</a></li>
                        <li><a href="http://ocw.mit.edu/courses/translated-courses/spanish">Español / Spanish</a></li>
                        <li><a href="http://ocw.mit.edu/courses/translated-courses/portuguese">Português / Portuguese</a></li>
                        <li><a href="http://ocw.mit.edu/courses/translated-courses/persian">فارسی / Persian</a></li>
                        <li><a href="http://ocw.mit.edu/courses/translated-courses/turkish">Türkçe / Turkish</a></li>
                        <li><a href="http://ocw.mit.edu/courses/translated-courses/korean">(비디오)한국 / Korean</a></li>
                        <li><a href="http://ocw.mit.edu/courses/translated-courses">More...</a></li>
                    </ul>
</div>
            </div>
        </li>
        <li>
            <a href="" class="drop">About</a>
            <div class="dropdown_1column-a">
                <div class="col_1">
                    <ul class="nav-bullet mega-div-bottom">
<li><a href="http://ocw.mit.edu/about/">About MIT OpenCourseWare</a></li>
                    </ul>
<ul class="nav-bullet mega-div-bottom">
<li><a href="http://ocw.mit.edu/about/site-statistics/">Site Stats</a></li>
                        <li><a href="http://ocw.mit.edu/about/ocw-stories/">OCW Stories</a></li>                        
                    </ul>
<ul class="nav-bullet">
<li><a href="http://ocw.mit.edu/about/media-coverage/">Media Coverage</a></li>
                        <li><a href="http://ocw.mit.edu/about/newsletter/">Newsletter</a></li>                        
                    </ul>
</div>
            </div>  
        </li>    
        <li>
            <a href="" class="drop">Donate</a>        
            <div class="dropdown_1column-a">
                    <div class="col_1">
                        <ul class="nav-bullet mega-div-bottom">
<li><a href="http://ocw.mit.edu/donate/">Make a Donation</a></li>
                            <li><a href="http://ocw.mit.edu/donate/why-donate/">Why Donate?</a></li>
                            <li><a href="http://ocw.mit.edu/donate/our-supporters/">Our Supporters</a></li>
                            <li><a href="http://ocw.mit.edu/donate/other-ways-to-contribute/">Other Ways to Contribute</a></li>
                            <li><a href="http://ocw.mit.edu/donate/shop-ocw">Shop OCW</a></li>
                        </ul>
<ul class="nav-bullet">
<li><a href="http://ocw.mit.edu/support/">Become a Corporate Sponsor</a></li>
                        </ul>
</div>
            </div>            
        </li>        
        <li>
            <a href="" class="drop">Featured Sites</a>        
            <div class="dropdown_1column-a">
                <div class="col_1">
                    <ul class="nav-bullet mega-div-bottom">
<li><a href="http://ocw.mit.edu/high-school/">Highlights for High School</a></li>
                        <li><a href="http://ocw.mit.edu/educator/">OCW Educator</a></li>
                        <li><a href="http://ocw.mit.edu/courses/crosslinks/">MIT Crosslinks and OCW</a></li>                        
                    </ul>
<ul class="nav-bullet mega-div-top">
<li><a href="http://ocw.mit.edu/ans7870/featured/mitx-courses-on-edx.htm">MITx Courses on edX</a></li>
                        <li><a href="http://teachingexcellence.mit.edu/">Teaching Excellence at MIT</a></li>
						<li><a href="http://www.oeconsortium.org/">Open Education Consortium</a></li>
                    </ul>
</div>
            </div>            
        </li>
    </ul>
</div>
<div id="search" role="search" class="grid_4 omega">
    
    <form method="get" action="../../../common/search/AdvancedSearch.htm">
     	 <table class="search"><tbody><tr>
<td class="black"><input type="text" onblur="fillSearchBox()" onfocus="clearSearchBox()" maxlength="255" value="Search" name="q" class="greytext searchField" id="terms"></td> 			 
                    <td class="black"><input type="image" src="../../../common/images/button_search.png" name="btnG" class="sub_button"></td>			 
                    <td class="text2"><a href="../../../common/search/AdvancedSearch.htm">Advanced<br>Search</a></td>
                </tr></tbody></table>
</form>
</div>
<div class="clear"></div>
<!--googleon: index-->
<!-- *end header* -->  

				
				
			</div>
<!-- top grid end -->
		</div>
<!-- top end -->
			
		<div id="center_media">
      	<div id="grid">
      		<div id="left">
        		<div id="breadcrumb_media">
                	<p>

    <a href="http://ocw.mit.edu/">Home</a>
    
        »
        
    
    
        
            <a href="http://ocw.mit.edu/courses">Courses</a>
            
                »
                
            
            
         
    
    
        
            <a href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science">Electrical Engineering and Computer Science</a>
            
                »
                
            
            
         
    
    
        
            <a href="../../../contents/index.htm">Introduction to Algorithms (SMA 5503)</a>
            
                »
                
            
            
         
    
    
        
            <a href="../../../contents/video-lectures/index.htm">Video Lectures</a>
            
                »
                
            
            
         
    
    
        
            
            
            Lecture 2: Asymptotic Notation; Recurrences; Substitution, Master
         
    
</p>

            	</div>
            	<div class="clear"></div>
        		<div id="media_title">
        		<h1 class="title" itemprop="name" property="dct:title">
        <span class="" id="parent-fieldname-title">
            Lecture 2: Asymptotic Notation; Recurrences; Substitution, Master Method
        </span>
    </h1>
        		</div>
           		<div class="clear"></div>
           		<div id="course_wrapper_media">
           			<div id="course_nav">
           				<script language="javascript" type="text/javascript">
function toggleMenu(objID) {
  if (!document.getElementById) return;
  var ob = document.getElementById(objID);
  ob.className = (ob.className == 'selected')?'': 'selected';
}
function toggleClass(id)
{
  var divtoggleClass= document.getElementById(id);
  divtoggleClass.className = (divtoggleClass.className == 'mO')?'mC': 'mO';
  return false;
}
function changeAlt(id)
{
  id.alt = (id.alt == 'Expand Menu')?'Collapse Menu' : 'Expand Menu';
  id.title = (id.title == 'Expand Menu')?'Collapse Menu' : 'Expand Menu';
}
</script><!--Left Nav Starts --><ul>
<li class="">
			   			<a href="../../../contents/index.htm">
		                  Course Home  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/syllabus/index.htm">
		                  Syllabus  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/calendar/index.htm">
		                  Calendar  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/readings/index.htm">
		                  Readings  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/assignments/index.htm">
		                  Assignments  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/exams/index.htm">
		                  Exams  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="selected">
			   			<a href="../../../contents/video-lectures/index.htm">
		                  Video Lectures  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    
		    
         	
	<!--second tal block close-->  
	
</ul>
<!--Left Nav Ends -->
</div>
           			<div id="course_inner_media">
      					 
        <div class="" id="parent-fieldname-text">
            
            
        </div>
    
      					 

<script type="text/javascript">var caption_embed_1 ={'English - US': '/courses/electrical-engineering-and-computer-science/6-046j-introduction-to-algorithms-sma-5503-fall-2005/video-lectures/lecture-2-asymptotic-notation-recurrences-substitution-master-method/whjt_N9uYFI.srt'}</script><div id="media-embed">
         <div class="attention_message" id="embed_1">
<p>Flash and JavaScript are required for this feature.</p>
<p>Download the video from <a href="https://itunes.apple.com/us/itunes-u/id341597754">iTunes U</a> or the <a href="http://www.archive.org/download/MIT6.046JF05MPEG4/ocw-6.046-12sep2005-220k.mp4">Internet Archive</a>.</p>
</div>
     </div>
    
     <script type="text/javascript">ocw_embed_chapter_media('embed_1', 'http://www.youtube.com/v/whjt_N9uYFI', 'youtube', '/courses/electrical-engineering-and-computer-science/6-046j-introduction-to-algorithms-sma-5503-fall-2005/video-lectures/lecture-2-asymptotic-notation-recurrences-substitution-master-method', 'http://img.youtube.com/vi/whjt_N9uYFI/0.jpg',0,0, 'http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-046j-introduction-to-algorithms-sma-5503-fall-2005/video-lectures/lecture-2-asymptotic-notation-recurrences-substitution-master-method/whjt_N9uYFI.srt')</script><div id="transcript1"></div>
				 <script type="text/javascript">setThreePlayTranscriptPlugin(2, 1004251)</script><script type="text/javascript" src="http://p3.3playmedia.com/p3.js"></script><div id="media_resource_next_prev_nav" style="margin-top: 1em;">
        <p>
        
            <a href="../../../contents/video-lectures/lecture-1-administrivia-introduction-analysis-of-algorithms-insertion-sort-mergesort/index.htm">
                <img src="../../../common/images/btn_previous_resource.png" style="margin: 0 30px 0 50px;" alt="Previous track" title="Previous track"></a>
     	
     	
        
            <a href="../../../contents/video-lectures/lecture-3-divide-and-conquer-strassen-fibonacci-polynomial-multiplication/index.htm"> 
                <img src="../../../common/images/btn_next_resource.png" alt="Next track" title="Next track"></a>
       
       </p>
     </div>
 


<script type="text/javascript">
		window.onload=function(){
		init();
		
		}
		var tabLinks = new Array();
		var contentDivs = new Array();
		function init() {
		  // Grab the tab links and content divs from the page
		  var tabListItems = document.getElementById('tabs').childNodes;
		  for ( var i = 0; i < tabListItems.length; i++ ) {
			if ( tabListItems[i].nodeName == "LI" ) {
			  var tabLink = getFirstChildWithTagName( tabListItems[i], 'A' );
			  var id = getHash( tabLink.getAttribute('href') );
			  tabLinks[id] = tabLink;
			  contentDivs[id] = document.getElementById( id );
			}
		  }
		  // Assign onclick events to the tab links, and
		  // highlight the first tab
		  var i = 0;
		  for ( var id in tabLinks ) {
			tabLinks[id].onclick = showTab;
			tabLinks[id].onfocus = function() { this.blur() };
			if ( i == 0 ) tabLinks[id].className = 'selected';
			i++;
		  }
		  // Hide all content divs except the first
		  var i = 0;
		  for ( var id in contentDivs ) {
			if ( i != 0 ) contentDivs[id].className = 'tabContent hide';
			i++;
		  }
		}
		function showTab() {
		  var selectedId = getHash( this.getAttribute('href') );
		  // Highlight the selected tab, and dim all others.
		  // Also show the selected content div, and hide all others.
		  for ( var id in contentDivs ) {
			if ( id == selectedId ) {
			  tabLinks[id].className = 'selected';
			  contentDivs[id].className = 'tabContent';
			} else {
			  tabLinks[id].className = '';
			  contentDivs[id].className = 'tabContent hide';
			}
		  }
		  // Stop the browser following the link
		  return false;
		}
		function getFirstChildWithTagName( element, tagName ) {
		  for ( var i = 0; i < element.childNodes.length; i++ ) {
			if ( element.childNodes[i].nodeName == tagName ) return element.childNodes[i];
		  }
		}
		function getHash( url ) {
		  var hashPos = url.lastIndexOf ( '#' );
		  return url.substring( hashPos + 1 );
		}
 </script><div id="media_tabs">
     
        <ul id="tabs">
<li class="first">
                <a href="#vid_about" class="selected">About this Video</a>
            </li>
            <li class="">
                <a href="#vid_index" class="">Playlist</a>
            </li>
            <li class="">
                <a href="#vid_playlist" class="">Related Resources</a>
            </li>
            <li class="">
                <a href="#vid_related" class="">Transcript</a>
            </li>
            <li class="">
                <a href="#vid_transcript" class="">Download this Video</a>
            </li>
        </ul>
<div id="vid_about" itemprop="description" class="tabContent">
<p><strong>Topics covered:</strong> Asymptotic Notation - Recurrences - Substitution, Master Method</p>  <p><strong>Instructors:</strong> Prof. Erik Demaine, Prof. Charles Leiserson</p>
</div>
        <div id="vid_index" itemprop="description" class="tabContent hide">
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-1-administrivia-introduction-analysis-of-algorithms-insertion-sort-mergesort/index.htm">
<img src="../../../contents/video-lectures/lecture-1-administrivia-introduction-analysis-of-algorithms-insertion-sort-mergesort/6_046J_lec01_th.jpg" title="Lecture 1: Administrivia; Introduction; Analysis of Algorithms, Insertion Sort, Mergesort" alt="Lecture 1: Administrivia; Introduction; Analysis of Algorithms, Insertion Sort, Mergesort"><p>Lecture 1: Administrivia; I...</p></a>
</div>
<div class="related-media-thumbnail-nolink">
<div class="now-playing-resource">Now Playing</div>
<img src="../../../contents/video-lectures/lecture-2-asymptotic-notation-recurrences-substitution-master-method/6_046J_lec02_th.jpg" title="Lecture 2: Asymptotic Notation; Recurrences; Substitution, Master Method" alt="Lecture 2: Asymptotic Notation; Recurrences; Substitution, Master Method"><p>Lecture 2: Asymptotic Notat...</p>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-3-divide-and-conquer-strassen-fibonacci-polynomial-multiplication/index.htm">
<img src="../../../contents/video-lectures/lecture-3-divide-and-conquer-strassen-fibonacci-polynomial-multiplication/6_046J_lec03_th.jpg" title="Lecture 3: Divide-and-Conquer: Strassen, Fibonacci, Polynomial Multiplication" alt="Lecture 3: Divide-and-Conquer: Strassen, Fibonacci, Polynomial Multiplication"><p>Lecture 3: Divide-and-Conqu...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-4-quicksort-randomized-algorithms/index.htm">
<img src="../../../contents/video-lectures/lecture-4-quicksort-randomized-algorithms/6_046J_lec04_th.jpg" title="Lecture 4: Quicksort, Randomized Algorithms" alt="Lecture 4: Quicksort, Randomized Algorithms"><p>Lecture 4: Quicksort, Rando...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-5-linear-time-sorting-lower-bounds-counting-sort-radix-sort/index.htm">
<img src="../../../contents/video-lectures/lecture-5-linear-time-sorting-lower-bounds-counting-sort-radix-sort/6_046J_lec05_th.jpg" title="Lecture 5: Linear-time Sorting: Lower Bounds, Counting Sort, Radix Sort" alt="Lecture 5: Linear-time Sorting: Lower Bounds, Counting Sort, Radix Sort"><p>Lecture 5: Linear-time Sort...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-6-order-statistics-median/index.htm">
<img src="../../../contents/video-lectures/lecture-6-order-statistics-median/6_046J_lec06_th.jpg" title="Lecture 6: Order Statistics, Median" alt="Lecture 6: Order Statistics, Median"><p>Lecture 6: Order Statistics...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-7-hashing-hash-functions/index.htm">
<img src="../../../contents/video-lectures/lecture-7-hashing-hash-functions/6_046J_lec07_th.jpg" title="Lecture 7: Hashing, Hash Functions" alt="Lecture 7: Hashing, Hash Functions"><p>Lecture 7: Hashing, Hash Fu...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-8-universal-hashing-perfect-hashing/index.htm">
<img src="../../../contents/video-lectures/lecture-8-universal-hashing-perfect-hashing/6_046J_lec08_th.jpg" title="Lecture 8: Universal Hashing, Perfect Hashing" alt="Lecture 8: Universal Hashing, Perfect Hashing"><p>Lecture 8: Universal Hashin...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-9-relation-of-bsts-to-quicksort-analysis-of-random-bst/index.htm">
<img src="../../../contents/video-lectures/lecture-9-relation-of-bsts-to-quicksort-analysis-of-random-bst/6_046J_lec09_th.jpg" title="Lecture 9: Relation of BSTs to Quicksort - Analysis of Random BST" alt="Lecture 9: Relation of BSTs to Quicksort - Analysis of Random BST"><p>Lecture 9: Relation of BSTs...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-10-red-black-trees-rotations-insertions-deletions/index.htm">
<img src="../../../contents/video-lectures/lecture-10-red-black-trees-rotations-insertions-deletions/6_046J_lec10_th.jpg" title="Lecture 10: Red-black Trees, Rotations, Insertions, Deletions" alt="Lecture 10: Red-black Trees, Rotations, Insertions, Deletions"><p>Lecture 10: Red-black Trees...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-11-augmenting-data-structures-dynamic-order-statistics-interval-trees/index.htm">
<img src="../../../contents/video-lectures/lecture-11-augmenting-data-structures-dynamic-order-statistics-interval-trees/6_046J_lec11_th.jpg" title="Lecture 11: Augmenting Data Structures, Dynamic Order Statistics, Interval Trees" alt="Lecture 11: Augmenting Data Structures, Dynamic Order Statistics, Interval Trees"><p>Lecture 11: Augmenting Data...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-12-skip-lists/index.htm">
<img src="../../../contents/video-lectures/lecture-12-skip-lists/6_046J_lec12_th.jpg" title="Lecture 12: Skip Lists" alt="Lecture 12: Skip Lists"><p>Lecture 12: Skip Lists</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-13-amortized-algorithms-table-doubling-potential-method/index.htm">
<img src="../../../contents/video-lectures/lecture-13-amortized-algorithms-table-doubling-potential-method/6_046J_lec13_th.jpg" title="Lecture 13: Amortized Algorithms, Table Doubling, Potential Method" alt="Lecture 13: Amortized Algorithms, Table Doubling, Potential Method"><p>Lecture 13: Amortized Algor...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-14-competitive-analysis-self-organizing-lists/index.htm">
<img src="../../../contents/video-lectures/lecture-14-competitive-analysis-self-organizing-lists/6_046J_lec14_th.jpg" title="Lecture 14: Competitive Analysis: Self-organizing Lists" alt="Lecture 14: Competitive Analysis: Self-organizing Lists"><p>Lecture 14: Competitive Ana...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-15-dynamic-programming-longest-common-subsequence/index.htm">
<img src="../../../contents/video-lectures/lecture-15-dynamic-programming-longest-common-subsequence/6_046J_lec15_th.jpg" title="Lecture 15: Dynamic Programming, Longest Common Subsequence" alt="Lecture 15: Dynamic Programming, Longest Common Subsequence"><p>Lecture 15: Dynamic Program...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-16-greedy-algorithms-minimum-spanning-trees/index.htm">
<img src="../../../contents/video-lectures/lecture-16-greedy-algorithms-minimum-spanning-trees/6_046J_lec16_th.jpg" title="Lecture 16: Greedy Algorithms, Minimum Spanning Trees" alt="Lecture 16: Greedy Algorithms, Minimum Spanning Trees"><p>Lecture 16: Greedy Algorith...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-17-shortest-paths-i-properties-dijkstras-algorithm-breadth-first-search/index.htm">
<img src="../../../contents/video-lectures/lecture-17-shortest-paths-i-properties-dijkstras-algorithm-breadth-first-search/6_046J_lec17_th.jpg" title="Lecture 17: Shortest Paths I: Properties, Dijkstra's Algorithm, Breadth-first Search" alt="Lecture 17: Shortest Paths I: Properties, Dijkstra's Algorithm, Breadth-first Search"><p>Lecture 17: Shortest Paths ...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-18-shortest-paths-ii-bellman-ford-linear-programming-difference-constraints/index.htm">
<img src="../../../contents/video-lectures/lecture-18-shortest-paths-ii-bellman-ford-linear-programming-difference-constraints/6_046J_lec18_th.jpg" title="Lecture 18: Shortest Paths II: Bellman-Ford, Linear Programming, Difference Constraints" alt="Lecture 18: Shortest Paths II: Bellman-Ford, Linear Programming, Difference Constraints"><p>Lecture 18: Shortest Paths ...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-19-shortest-paths-iii-all-pairs-shortest-paths-matrix-multiplication-floyd-warshall-johnson/index.htm">
<img src="../../../contents/video-lectures/lecture-19-shortest-paths-iii-all-pairs-shortest-paths-matrix-multiplication-floyd-warshall-johnson/6_046J_lec19_th.jpg" title="Lecture 19: Shortest Paths III: All-pairs Shortest Paths, Matrix Multiplication, Floyd-Warshall, Johnson" alt="Lecture 19: Shortest Paths III: All-pairs Shortest Paths, Matrix Multiplication, Floyd-Warshall, Johnson"><p>Lecture 19: Shortest Paths ...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-22-advanced-topics/index.htm">
<img src="../../../contents/video-lectures/lecture-22-advanced-topics/6_046J_lec22_th.jpg" title="Lecture 22: Advanced Topics" alt="Lecture 22: Advanced Topics"><p>Lecture 22: Advanced Topics</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-23-advanced-topics-cont./index.htm">
<img src="../../../contents/video-lectures/lecture-23-advanced-topics-cont./6_046J_lec23_th.jpg" title="Lecture 23: Advanced Topics (cont.)" alt="Lecture 23: Advanced Topics (cont.)"><p>Lecture 23: Advanced Topics...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-24-advanced-topics-cont./index.htm">
<img src="../../../contents/video-lectures/lecture-24-advanced-topics-cont./6_046J_lec24_th.jpg" title="Lecture 24: Advanced Topics (cont.)" alt="Lecture 24: Advanced Topics (cont.)"><p>Lecture 24: Advanced Topics...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-25-advanced-topics-cont.-discussion-of-follow-on-classes/index.htm">
<img src="../../../contents/video-lectures/lecture-25-advanced-topics-cont.-discussion-of-follow-on-classes/6_046J_lec25_th.jpg" title="Lecture 25: Advanced Topics (cont.) - Discussion of Follow-on Classes" alt="Lecture 25: Advanced Topics (cont.) - Discussion of Follow-on Classes"><p>Lecture 25: Advanced Topics...</p></a>
</div>
</div>
        <div id="vid_playlist" itemprop="description" class="tabContent hide">
<h2 class="subhead">Related Resources</h2>
<p>Lecture Notes (<a href="../../../contents/video-lectures/lecture-2-asymptotic-notation-recurrences-substitution-master-method/lec2.pdf" target="_blank">PDF</a>)<br><a href="../../../contents/assignments/index.htm" target="_blank">Assignments</a><br><a href="../../../contents/exams/index.htm" target="_blank">Exams</a></p>
</div>
        <div id="vid_related" itemprop="description" class="tabContent hide">
<ul><li><a class="transcript-link" title="Open in a new window." alt="Open in a new window." style="text-decoration: none; font-size: 1.0em;" target="_blank" text-decoration: none font-size: href="../../../contents/video-lectures/lecture-2-asymptotic-notation-recurrences-substitution-master-method/whjt_N9uYFI.pdf"> Download this transcript - PDF (English - US)</a></li></ul>
<p><span m="1000">And I don't think it matters</span> <span m="1111">And 11111 forever is the same</span> <span m="10000"> My name is Erik Demaine. You should call me Erik.</span> <span m="13000">Welcome back to 6.046. This is Lecture 2.</span> <span m="16000">And today we are going to essentially fill in some of the</span> <span m="20000">more mathematical underpinnings of Lecture 1.</span> <span m="23000">So, Lecture 1, we just sort of barely got our</span> <span m="26000">feet wet with some analysis of algorithms, insertion sort and</span> <span m="31000">mergesort. And we needed a couple of</span> <span m="34000">tools. We had this big idea of</span> <span m="36000">asymptotics and forgetting about constants, just looking at the</span> <span m="40000">lead term. And so, today,</span> <span m="41000">we're going to develop asymptotic notation so that we</span> <span m="44000">know that mathematically. And we also ended up with a</span> <span m="47000">recurrence with mergesort, the running time of mergesort,</span> <span m="51000">so we need to see how to solve recurrences.</span> <span m="53000">And we will do those two things today.</span> <span m="55000">Question? Yes, I will speak louder.</span> <span m="58000">Thanks. Good.</span> <span m="60000">Even though I have a microphone, I am not amplified.</span> <span m="63000">OK, so let's start with asymptotic notation.</span> <span m="76000">We have seen some basic asymptotic notation.</span> <span m="79000">I am sure you have seen it in other classes before,</span> <span m="82000">things like big O-notation. And today we are going to</span> <span m="86000">really define this rigorously so we know what is true and what is</span> <span m="90000">not, what is valid and what is not.</span> <span m="100000">We are going to define, and unfortunately today is This will be true if c_1 is</span> <span m="103000">going to be really mathematical and really no algorithms today,</span> <span m="108000">which is sort of an anticlimax. But next lecture we will talk</span> <span m="112000">about real algorithms and will apply all the things we learned</span> <span m="117000">today to real algorithms. This is big O-notation,</span> <span m="124000">capital O-notation. We have f(n)=O[g(n)].</span> <span m="132000">This means that there are some suitable constants,</span> <span m="141000">c and n_o, such that f is bounded by cg(n) for all</span> <span m="150000">sufficiently large n. So, this is pretty intuitive</span> <span m="158000">notion. We have seen it before.</span> <span m="162000">We are going to assume that f(n) is non-negative here.</span> <span m="167000">And I just want f(n) to be bounded above by g(n).</span> <span m="172000">We have seen a bunch of examples, but something like</span> <span m="177000">2n^2=O(n^3) defined. And roughly this means if you</span> <span m="182000">drop leading constants and low order terms then this is less</span> <span m="187000">than or equal to that. So, big O corresponds roughly</span> <span m="190000">to less than or equal to. But this is the formalization.</span> <span m="194000">Another way to think of it formally, a funny thing about</span> <span m="198000">this notation is it is asymmetric.</span> <span m="200000">Normally, you think of equality being symmetric.</span> <span m="203000">If A=B then B=A. But it's not true here.</span> <span m="206000">We do not have n^3 being big O of n^2.</span> <span m="210000">We don't even have big O of n^3 equaling n^2.</span> <span m="213000">So, we will see exactly what that means in a second.</span> <span m="218000">But before we get there, this is a bit bizarre notation</span> <span m="223000">and you should always think about what it really means.</span> <span m="227000">Another way to think about what it really means is that f(n) is</span> <span m="233000">in some set of functions that are like g.</span> <span m="238000">You could define big O[g(n)] to be a set of functions,</span> <span m="244000">let's call it f(n), such that there exist</span> <span m="250000">constants. They are the same definition,</span> <span m="255000">I think, fancy here, c and n_o, such that we have</span> <span m="261000">the bound f(n) is between zero and cg(n).</span> <span m="274000">It is a bit of a long definition, and that is why we</span> <span m="277000">use the notation, to avoid having to write this</span> <span m="281000">over and over. You can think of instead of n^2</span> <span m="284000">being equal to big O of n^3, what we really mean is that</span> <span m="288000">2n^2 is in the set big O(n^3). When we write equal sign,</span> <span m="292000">we in some sense mean this in the set, but we are going to use</span> <span m="296000">equal sign. You could write this.</span> <span m="300000">And occasionally you see papers that write this,</span> <span m="303000">but this is the notation that we are going to use.</span> <span m="308000">That has the consequence the equal sign is asymmetric,</span> <span m="312000">just like this operator. We have some nifty ways that we</span> <span m="317000">actually use big O-notation.</span> <span m="329000">And it is using it as a macro. By the way, we have a lot to</span> <span m="333000">cover today, so I am going to go relatively fast.</span> <span m="337000">If anything is unclear, just stop, ask questions,</span> <span m="341000">then I will slow down. Otherwise, I will take this as</span> <span m="345000">all completely obvious and I can keep going at full speed.</span> <span m="350000">The convention, this is intuitive,</span> <span m="352000">I guess, if you do some macro programming or something,</span> <span m="357000">but it's a bit more mathematical.</span> <span m="369000">We have defined big O-notation and it equals big O of</span> <span m="373000">something. And so we have only defined big</span> <span m="376000">O when on the equal sign we have big O of some function.</span> <span m="380000">But it is useful to have some general expression on the</span> <span m="384000">right-hand side that involves big O.</span> <span m="388000">For example, let's say we have f(n) = n^3 +</span> <span m="394000">O(n^2). This is attempting to get an</span> <span m="399000">error bound. This is saying f(n) is</span> <span m="405000">basically n^3 but there are these lower order terms that are</span> <span m="414000">O(n^2). And so this means that there is</span> <span m="420000">a function, shorthand for a function, h(n) which is in</span> <span m="428000">O(n^2) or equals O(n^2) such that f(n) = n^3 + h(n).</span> <span m="438000">It is saying that there are some lower order terms that are</span> <span m="441000">bounded above by some constant times n^2 for sufficiently large</span> <span m="445000">n, and that is what is here. And then f(n) equals,</span> <span m="448000">now this is a true equality, n^3 plus that error term.</span> <span m="452000">This is very useful here. Essentially,</span> <span m="454000">I am expressing what the lead constant is and then saying</span> <span m="457000">well, there is other stuff and it's all at most n^2.</span> <span m="460000">Saying that f(n) therefore is also order n^3,</span> <span m="462000">but that is a bit weaker of a statement.</span> <span m="464000">This is a bit more refined. We won't need to use this too</span> <span m="467000">often, but it is useful. Sometimes we will see,</span> <span m="470000">like in last class we even had a big O inside a summation.</span> <span m="473000">So, you can use them all over the place.</span> <span m="475000">The point is they represent some function in that set.</span> <span m="480000">A bit less intuitive, and this is more subtle,</span> <span m="484000">is what it means to have big O on the left-hand side.</span> <span m="490000">It means the same thing, but there is some convention</span> <span m="495000">what equality means. And this is why equal sign is</span> <span m="500000">asymmetric. You should read equals like</span> <span m="504000">"is". Is means that everything over</span> <span m="507000">here is something over here. So, there is an implicit for</span> <span m="514000">all on the left-hand side and there exists on the right-hand</span> <span m="519000">side. This is a true statement.</span> <span m="521000">Anything that is n^2 + O(n) is also O(n^2), but not the other</span> <span m="527000">way around. So, this is a bit asymmetric.</span> <span m="530000">If you think about it, this is pretty intuitive but it</span> <span m="535000">is subtle so you should be careful.</span> <span m="555000">This says for any expansion of the macro on the left-hand side,</span> <span m="560000">which should be f(n), there is an expansion of the</span> <span m="564000">macro on the right-hand side such that we get equality.</span> <span m="570000">And what this allows you to do is if you have a chain of equal</span> <span m="574000">signs relations, a chain of "is"s,</span> <span m="576000">then the very first one is equal to or bounded by the very</span> <span m="580000">last one. So, you can chain equal signs</span> <span m="582000">the way you normally would. You just cannot flip them</span> <span m="585000">around. Good.</span> <span m="586000">So, that's big O-notation. Any questions about that?</span> <span m="598000">So, big O is great for expressing upper bounds.</span> <span m="601000">But we also want to talk about lower bounds.</span> <span m="604000">For algorithms, we usually care about upper</span> <span m="606000">bounds on their running time. Running times at most n^2 is at</span> <span m="611000">most n log n up to big O, but sometimes we need to</span> <span m="614000">express functions that are at least some quantity.</span> <span m="617000">For example, we will show that sorting</span> <span m="620000">requires at least n log n time in some model.</span> <span m="623000">So, we need some other notation for that.</span> <span m="626000">And the notation is big Omega-notation.</span> <span m="630000">And it is pretty symmetric. I will just write out the set</span> <span m="635000">definition here. And we are going to write f(n)=</span> <span m="640000">big Omega[g(n)] to mean f(n) is at least some constant times</span> <span m="646000">g(n) --</span> <span m="655000">-- for sufficiently large n.</span> <span m="669000">So, I am basically just reversing the inequality</span> <span m="672000">relation between f and g, nothing surprising,</span> <span m="676000">just to have it there. A random example,</span> <span m="679000">and now we will get a little bit more sophisticated,</span> <span m="684000">root n= big Omega(lg n). And you should read this that</span> <span m="689000">up to constant factors root n is at least log n for sufficiently</span> <span m="694000">large n. So, omega sort of corresponds</span> <span m="698000">to greater than or equal to. Let me give you some analogies.</span> <span m="703000">We have big O, we have big omega,</span> <span m="706000">this is less than or equal to, this is greater than or equal</span> <span m="711000">to. And I am going to fill in some</span> <span m="713000">more here in a moment.</span> <span m="730000">It's nice to have all the usual operators we have.</span> <span m="732000">Normally we have strict less than, strict greater than and</span> <span m="736000">equal sign. And we want those sort of</span> <span m="738000">analogs in the asymptotic world where we ignore constant factors</span> <span m="742000">and ignore lower order terms. We have, for example,</span> <span m="745000">big Theta[g(n)]. This is a capital theta which</span> <span m="748000">means you write the horizontal bar in the middle as opposed to</span> <span m="751000">all the way through. I didn't invent Greek,</span> <span m="755000">so that is the way it is. Theta means that you are less</span> <span m="760000">than or equal to and you are greater than or equal to up to</span> <span m="764000">constant factors, so it is the inner section of</span> <span m="768000">these two sets, big O and big Omega.</span> <span m="771000">That is sort of like equal sign but, of course,</span> <span m="775000">this is very different. You have things like n^2 is big</span> <span m="780000">Theta of 2(n^2) because you ignore constant factors,</span> <span m="784000">but all of these other relations, OK,</span> <span m="787000">n^2 + O(n) = Theta(n^2), but this does not hold with</span> <span m="791000">theta because square root of n is really asymptotically bigger</span> <span m="796000">than log n. And some of the other examples</span> <span m="799000">we saw like n^2 versus n^3, those don't hold with T.</span> <span m="805000">And we have some strict notation which are the little</span> <span m="809000">o-notation and little omega-notation.</span> <span m="812000">There is no little theta because there is not notion of</span> <span m="817000">strict equality versus unstrict equality.</span> <span m="821000">Little o is going to correspond roughly to less than and little</span> <span m="827000">omega is going to correspond to greater than.</span> <span m="831000">This is a notation you will just have to get used to.</span> <span m="837000">And I am not going to define it precisely here because it is</span> <span m="843000">almost exactly the same. The difference is that instead</span> <span m="848000">of saying there exists constant c and n_o, you have to say for</span> <span m="855000">every constant c there exists a constant n_o.</span> <span m="859000">The relationship between f and g, this inequality must hold for</span> <span m="866000">all c instead of just for 1. And so n_o can now depend on c.</span> <span m="872000">You can assume that really n is sufficiently large,</span> <span m="877000">but this gives you a strict inequality.</span> <span m="880000">No matter what constant you put here, in front of g,</span> <span m="885000">let's say we are doing little o, f will be still less than c</span> <span m="890000">times g for sufficiently large n.</span> <span m="893000">We have some random examples.</span> <span m="904000">We are again ignoring constants.</span> <span m="906000">n^2 is always less than n^3 for sufficiently large n.</span> <span m="911000">And it is a bit subtle here. I mean in order to prove</span> <span m="915000">something like this, it will become intuitive after</span> <span m="919000">you manipulate it a little bit. You have to figure out what n_o</span> <span m="925000">is in terms of c. I think it something like 2/c.</span> <span m="930000">If we have less than or equal to, that should be right.</span> <span m="934000">As long n is at least this big, no matter how small of a c,</span> <span m="938000">you should think of c here as being epsilon now,</span> <span m="942000">in the usual epsilon and deltas.</span> <span m="944000">No matter how small c gets, still I can bound n^2 in terms</span> <span m="949000">of n^3, upper bound, but whenever you have theta you</span> <span m="953000">do not have either of these relations.</span> <span m="957000">For example, Ωn^2 = Theta(n^2) and it is not</span> <span m="960000">little o(n^2) and it not little omega(n^2) because it is exactly</span> <span m="966000">n^2. You will get some sense in</span> <span m="968000">order relation out of this, although there are some messy</span> <span m="973000">behaviors as you will see in your problem set.</span> <span m="977000">Any questions about asymptotic notation?</span> <span m="981000">That is the quick rundown. Now we are going to use it to</span> <span m="985000">solve some recurrences. Although we won't use it that</span> <span m="991000">much today, we will use it a lot more on Wednesday.</span> <span m="995000">OK.</span> <span m="1013000">We will move onto the second topic of today,</span> <span m="1017000">which is solving recurrences. You have probably solved some</span> <span m="1022000">recurrences before in 6.042 or whatever discrete math class you</span> <span m="1026000">have taken. We are going to do more and</span> <span m="1029000">have some techniques here that are particularly useful for</span> <span m="1034000">analyzing recursive algorithms, and we will see that mostly on</span> <span m="1038000">Wednesday. There are three main methods</span> <span m="1041000">that we are going to use here for solving recurrences.</span> <span m="1045000">The first one is the substitution method.</span> <span m="1050000">There is no general procedure for solving a recurrence.</span> <span m="1052000">There is no good algorithm for solving recurrences,</span> <span m="1055000">unfortunately. We just have a bunch of</span> <span m="1057000">techniques. Some of them work some of the</span> <span m="1059000">time, and if you are lucky yours will work for your recurrence,</span> <span m="1062000">but it is sort of like solving an integral.</span> <span m="1064000">You have to just know some of them, you have to know various</span> <span m="1067000">methods for solving them. It is usually easy to check if</span> <span m="1070000">you have the right answer. Just like with integrals,</span> <span m="1073000">you just differentiate and say oh, I got the right answer.</span> <span m="1076000">And that is essentially the idea of substitution method.</span> <span m="1080000">Substitution method will always work, but unfortunately Step 1</span> <span m="1084000">is guess the answer. And you have to guess it</span> <span m="1087000">correctly. That makes it a big difficult.</span> <span m="1089000">You don't have to guess it completely.</span> <span m="1092000">You can usually get away with not knowing the constant</span> <span m="1095000">factors, which is a good thing because we don't really care</span> <span m="1099000">about the constant factors. You guess the form.</span> <span m="1102000">You say oh, it is going to be roughly n^2, and so it's some</span> <span m="1106000">constant times n^2 presumably. So, you guess that.</span> <span m="1111000">We are going to figure out the constants.</span> <span m="1114000">You try to verify whether the recurrence satisfies this bound</span> <span m="1118000">by induction, and that is the key.</span> <span m="1120000">Substitution uses induction. And from that you usually get</span> <span m="1124000">the constants for free. You figure out what the</span> <span m="1128000">constants have to be in order to make this work.</span> <span m="1131000">So, that is the general idea. You will see a few examples of</span> <span m="1135000">this. Actually, the same example</span> <span m="1137000">several times. Unfortunately,</span> <span m="1141000">this is what you might call, I don't know.</span> <span m="1144000">This is an algorithm, but it uses an oracle which is</span> <span m="1148000">knowing the right answer. But sometimes it is not too</span> <span m="1152000">hard to guess the answer. It depends.</span> <span m="1154000">If you look at this recurrence, T(n) = 4T(n/2) + n,</span> <span m="1158000">we should implicitly always have some base case of T of some</span> <span m="1163000">constant, usually 1 is a constant, so we don't really</span> <span m="1166000">care about the base case. For algorithms that is always</span> <span m="1172000">the case. And we want to solve this</span> <span m="1174000">thing. Does anyone have a guess to</span> <span m="1177000">what the solution is? Ideally someone who doesn't</span> <span m="1180000">already know how to solve this recurrence.</span> <span m="1183000">OK. How many people know how to</span> <span m="1185000">solve this recurrence? A few, OK.</span> <span m="1188000">And, of the rest, any guesses?</span> <span m="1190000">If you look at what is going on here, here you have T(n/2) and</span> <span m="1195000">let's ignore this term more or less.</span> <span m="1199000">We have n/2 here. If we double n and get T(n)</span> <span m="1202000">then we multiply the value by 4. And then there is this additive</span> <span m="1206000">end, but that doesn't matter so much.</span> <span m="1208000">What function do you know that when you double the argument the</span> <span m="1213000">output goes up by a factor of 4? Sorry?</span> <span m="1215000">n^2,yeah. You should think n^2 and you</span> <span m="1218000">would be right. But we won't prove n^2 yet.</span> <span m="1221000">Let's prove something simpler, because it turns out proving</span> <span m="1225000">that it is at most n^2 is a bit of a pain.</span> <span m="1229000">We will see that in just a few minutes.</span> <span m="1231000">But let's guess that T(n) = O(n^3) first because that will</span> <span m="1236000">be easier to prove by induction. You sort of see how it is done</span> <span m="1241000">in the easy case, and then we will actually get</span> <span m="1244000">the right answer, n^2, later.</span> <span m="1247000">I need to prove. What I am going to do is guess</span> <span m="1250000">that T(n) is some constant times n^3 at most, so I will be a</span> <span m="1255000">little more precise. I cannot use the big O-notation</span> <span m="1259000">in the substitution method so I have to expand it out to use</span> <span m="1263000">constants. I will show you why in a little</span> <span m="1268000">bit, but let me just tell you at a high level what is important</span> <span m="1273000">in not using big O-notation. Big O-notation is great if you</span> <span m="1277000">have a finite chain of big O relations, you know,</span> <span m="1281000">n^2 is big O(n^3) is big O(n^4) is big O(n^4) is big O(n^4).</span> <span m="1285000">That is all true. And so you get that n^2 is big</span> <span m="1289000">O(n^4). But if you have an infinite</span> <span m="1293000">chain of those relations then the first thing is not big O of</span> <span m="1297000">the last thing. You have to be very careful.</span> <span m="1301000">For example, this is a total aside on the</span> <span m="1304000">lecture notes. Suppose you want to prove that</span> <span m="1307000">n = O(1). This is a great relation.</span> <span m="1310000">If it were true, every algorithm would have</span> <span m="1313000">constant running time. This is not true.</span> <span m="1316000">Not in Wayne's World notation. You could "prove this by</span> <span m="1322000">induction" by saying well, base case is 1 = O(1).</span> <span m="1327000">OK, that is true. And then the induction step as</span> <span m="1332000">well, if I know that n-1, so let's suppose that n-1 =</span> <span m="1338000">O(1), well, that implies that n, which is (n-1) +1,</span> <span m="1343000">if this is O(1) and 1 = O(1), the whole thing is O(1).</span> <span m="1350000">And that is true. If you knew that (n-1) = O(1)</span> <span m="1352000">and 1 = O(1) then their sum is also O(1), but this is a false</span> <span m="1355000">proof. You cannot induct over big Os.</span> <span m="1357000">What is going on here is that the constants that are implicit</span> <span m="1360000">in here are changing. Here you have some big O of 1,</span> <span m="1363000">here you have some big O of 1. You are probably doubling the</span> <span m="1366000">constant in there every time you do this relation.</span> <span m="1369000">If you have a finite number of doubling of constants,</span> <span m="1372000">no big deal, it is just a constant,</span> <span m="1374000">two the power number of doublings.</span> <span m="1375000">But here you are doing n doublings and that is no good.</span> <span m="1380000">The constant is now depending on n.</span> <span m="1382000">So, we are avoiding this kind of problem by writing out the</span> <span m="1386000">constant. We have to make sure that</span> <span m="1388000">constant doesn't change. Good.</span> <span m="1391000">Now I have written out the constant.</span> <span m="1393000">I should be safe. I am assuming it for all k less</span> <span m="1396000">than n, now I have to prove it for k equal to n.</span> <span m="1400000">I am going to take T(n) and just expand it.</span> <span m="1403000">I am going to do the obvious thing.</span> <span m="1405000">I have this recurrence how to expand T(n).</span> <span m="1410000">Then it involves T(n/2). And I know some fact about</span> <span m="1415000">T(n/2) because n/2 is less than n.</span> <span m="1419000">So, let's expand. T(n) = 4T(n/2) + n.</span> <span m="1423000">And now I have an upper bound on this thing from the induction</span> <span m="1430000">hypothesis. This is at most 4 times c times</span> <span m="1435000">the argument cubed plus n.</span> <span m="1480000">Continuing on here. Let's expand this a little bit.</span> <span m="1488000">We have n cubed over 2 cubed. Two cubed is 8,</span> <span m="1496000">so 4 over 8 is a half. So, we have Ωcn^3 + n.</span> <span m="1505000">And what I would like this to be is, so at the bottom where I</span> <span m="1510000">would like to go is that this is at most cn3.</span> <span m="1513000">That is what I would like to prove to reestablish the</span> <span m="1518000">induction hypothesis for n. What I will do,</span> <span m="1521000">in order to see when that is case, is just write this as what</span> <span m="1526000">I want, so this is sort of the desired value,</span> <span m="1530000">cn3, minus whatever I don't want.</span> <span m="1534000">This is called the residual. Now I have to actually figure</span> <span m="1539000">this out. Let's see.</span> <span m="1541000">We have cn^3, but only Ωcn^3 here,</span> <span m="1544000">so I need to subtract off Ωcn^3 to get that lead term correct.</span> <span m="1549000">And then I have plus n and there is a minus here,</span> <span m="1554000">so it is minus n. And that is the residual.</span> <span m="1559000">In order for this to be at most this, I need that the residual</span> <span m="1564000">is non-negative. This is if the residual part is</span> <span m="1567000">greater than or equal to zero, which is pretty easy to do</span> <span m="1572000">because here I have control over c.</span> <span m="1575000">I get to pick c to be whatever I want.</span> <span m="1578000">And, as long as c is at least, oh, I don't know,</span> <span m="1582000">2, then this is a 1 at least. Then I have n^3 should be</span> <span m="1586000">greater than or equal to n. And that is always the case.</span> <span m="1593000">For example, this is true if c is at least</span> <span m="1601000">what n is, but let's say n is at least 1 just for kicks.</span> <span m="1607000">So, what we have done is proved that T(n) is at most some</span> <span m="1613000">constant times n^3. And the constant is like 1.</span> <span m="1620000">So, that is an upper bound. It is not a tight upper bound.</span> <span m="1623000">We actually believed that it is n^2, and it is,</span> <span m="1626000">but you have to be a little careful.</span> <span m="1629000">This does not mean that the answer is n^3.</span> <span m="1631000">It just means that at most n^3 is big O(n^3).</span> <span m="1634000">And this is a proof by induction.</span> <span m="1636000">Now, technically I should have put a base case in this</span> <span m="1640000">induction, so there is a little bit missing.</span> <span m="1642000">The base case is pretty easy because T(1) is some constant,</span> <span m="1646000">but it will sort of influence things.</span> <span m="1649000">If the base case T(1) is some constant.</span> <span m="1653000">And what we need is that it is at most c times one cubed,</span> <span m="1657000">which is c. And that will be true as long</span> <span m="1660000">as you choose c to be sufficiently large.</span> <span m="1663000">So, this is true if c is chosen sufficiently large.</span> <span m="1667000">Now, we don't care about constants, but the point is just</span> <span m="1672000">to be a little bit careful. It is not true that T(n) is at</span> <span m="1676000">most 1 times n^2, even though here all we need is</span> <span m="1680000">that c is at least 1. For the base case to work,</span> <span m="1685000">c actually might have to be a hundred or whatever T(1) is.</span> <span m="1690000">So, be a little bit careful there.</span> <span m="1694000">It doesn't really affect the answer, usually it won't because</span> <span m="1699000">we have very simple base cases here.</span> <span m="1703000">OK, so let's try to prove the tight bound of O(n^2).</span> <span m="1709000">I am not going to prove an omega bound, but you can prove</span> <span m="1713000">an omega n squared bound as well using substitution method.</span> <span m="1718000">I will just be satisfied for now proving an upper bound of n</span> <span m="1723000">squared. Let's try to prove that T(n),</span> <span m="1726000">this is the same recurrence, I want to prove that it is</span> <span m="1731000">O(n^2). I am going to do the same</span> <span m="1733000">thing. And I will write a bit faster</span> <span m="1736000">because this is basically copying.</span> <span m="1746000">Except now, instead of three, I have two.</span> <span m="1750000">Then I have T(n) = 4T(n/2) + n. I expand this T(n/2).</span> <span m="1757000">This is at most 4c(n/2)^2 + n. And now, instead of have 2</span> <span m="1764000">cubed, I have 2 squared, which is only 4.</span> <span m="1770000">The fours cancel. I get cn^2 + n.</span> <span m="1772000">And if you prefer to write it as desired minus residual,</span> <span m="1777000">then I have cn^2 - (-n). And I want this to be</span> <span m="1782000">non-negative. And it is damn hard for minus n</span> <span m="1786000">to be non-negative. If n is zero we are happy,</span> <span m="1790000">but unfortunately this is an induction on n.</span> <span m="1794000">It's got to hold for all n greater than or equal to 1.</span> <span m="1800000">This is not less than or equal to cn^2.</span> <span m="1802000">Notice the temptation is to write that this equals O(n^2),</span> <span m="1806000">which is true for this one step.</span> <span m="1809000">cn^2 - (-n), well, these are both order n,</span> <span m="1812000">or this is order n, this is order n squared.</span> <span m="1815000">Certainly this thing is O(n^2), that is true,</span> <span m="1818000">but it is not completing the induction.</span> <span m="1821000">To complete the induction, you have to prove the induction</span> <span m="1825000">hypothesis for n with this constant c.</span> <span m="1829000">Here you are getting a constant c of like c + 1,</span> <span m="1832000">which is not good. This is true but useless.</span> <span m="1836000">It does not finish the induction, so you can sort of</span> <span m="1840000">ignore that. This proof doesn't work,</span> <span m="1842000">which is kind of annoying because we feel,</span> <span m="1846000">in our heart of hearts, that T(n) = n^2.</span> <span m="1849000">It turns out to fix this you need to express T(n) in a</span> <span m="1853000">slightly different form. This is, again,</span> <span m="1856000">divine inspiration. And, if you have a good</span> <span m="1860000">connection to some divinity, you are all set.</span> <span m="1863000">[LAUGHTER] But it is a little bit harder for the rest of us</span> <span m="1866000">mere mortals. It turns out,</span> <span m="1868000">and maybe you could guess this, that the idea is we want to</span> <span m="1872000">strengthen the induction hypothesis.</span> <span m="1874000">We assumed this relatively weak thing, T(k) is less than or</span> <span m="1878000">equal to some constant times k^2.</span> <span m="1880000">We didn't know what the constant was,</span> <span m="1882000">that is fine, but we assumed that there were</span> <span m="1885000">no lower order terms. I want to look at lower order</span> <span m="1888000">terms. Maybe they play a role.</span> <span m="1891000">And if you look at this progression you say,</span> <span m="1893000">oh, well, I am getting something like n^2 and the</span> <span m="1896000">constants are pretty damn tight. I mean the fours are canceling</span> <span m="1900000">and the c just is preserved. How am I going to get rid of</span> <span m="1903000">this lower order term plus n? Well, maybe I could subtract</span> <span m="1906000">off a linear term in here and, if I am lucky,</span> <span m="1909000">it will cancel with this one. That is all the intuition we</span> <span m="1912000">have at this point. It turns out it works.</span> <span m="1916000">We look at T(n) and this is 4T(n/2) + n as usual.</span> <span m="1921000">Now we expand a slightly messier form.</span> <span m="1925000">We have 4[c_1*(n/2)^2 - c_2*(n/2)] + n.</span> <span m="1929000">This part is the same because the fours cancel again.</span> <span m="1934000">So, we get c_1*n^2, which is good.</span> <span m="1938000">I mean that is sort of the form we want.</span> <span m="1942000">Then we have something times n, so let's figure it out.</span> <span m="1950000">We have a plus 1 times n, so let's write it 1 minus c_2</span> <span m="1954000">over 2 times n. Oops, got that wrong.</span> <span m="1958000">There is four times a two so, in fact, the two is upstairs.</span> <span m="1963000">Let me double check. Right.</span> <span m="1966000">OK. Now we can write this as</span> <span m="1968000">desired minus residual. And we have to be a little</span> <span m="1973000">careful here because now we have a stronger induction hypothesis</span> <span m="1978000">to prove. We don't just need it is at</span> <span m="1983000">most c_1*n^2, which would be fine here</span> <span m="1987000">because we could choose c_2 to be large, but what we really</span> <span m="1992000">need is c_1*n^2 - c_2*n, and then minus some other</span> <span m="1997000">stuff. This is, again,</span> <span m="1999000">desired minus residual. And minus residual,</span> <span m="2003000">let's see, we have a minus 1 and we have a minus c_2.</span> <span m="2010000">That doesn't look so happy. Plus c_2, thank you,</span> <span m="2015000">because that again looked awfully negative.</span> <span m="2020000">It is plus c_2. I am getting my signs,</span> <span m="2024000">there is a minus here and there is one minus here,</span> <span m="2030000">so there we go. Again, I want my residual to be</span> <span m="2035000">greater than or equal to zero. And if I have that I will be</span> <span m="2043000">all set in making this inductive argument.</span> <span m="2047000">Office hours start this week, in case you are eager to go.</span> <span m="2054000">They are all held in some room in Building 24,</span> <span m="2059000">which is roughly the midpoint between here and Stata,</span> <span m="2065000">I think, for no particular reason.</span> <span m="2070000">And you can look at the Web page for details on the office</span> <span m="2074000">hours. Continuing along,</span> <span m="2075000">when is c_2 - 1 going to be greater than or equal to zero?</span> <span m="2079000">Well, that is true if c_2 is at least 1, which is no big deal.</span> <span m="2084000">Again, we get to choose the constants however we want.</span> <span m="2087000">It only has to hold for some choice of constants.</span> <span m="2091000">So, we can set c_2 greater than or equal to 1.</span> <span m="2094000">And then we are happy. That means this whole thing is</span> <span m="2099000">less than or equal to c_1*n^2 - c_2*n if c_2 is greater than or</span> <span m="2103000">equal to 1. It is kind of funny here.</span> <span m="2106000">This finishes the induction, at least the induction step.</span> <span m="2110000">We proved now that for any value of c_1,</span> <span m="2113000">and provided c_2 is at least one.</span> <span m="2116000">We have to be a little more careful that c_1 does actually</span> <span m="2120000">have to be sufficiently large. Any particular reason why?</span> <span m="2132000">c_1 better not be negative, indeed.</span> <span m="2134000">c_1 has to be positive for this to work, but it even has to be</span> <span m="2139000">larger than positive depending. Sorry.</span> <span m="2143000">I have been going so fast, I haven't asked you questions.</span> <span m="2147000">Now you are caught off guard. Yeah?</span> <span m="2150000">Because of the base case, exactly.</span> <span m="2153000">So, the base case will have T(1) is c_1 time 1 squared minus</span> <span m="2158000">c_2, we want to prove that it is at most this,</span> <span m="2162000">and T(1) is some constant we have assumed.</span> <span m="2167000">We need to choose c_1 to be sufficiently larger than c_2,</span> <span m="2171000">in fact, so c_2 has to be at least 1.</span> <span m="2174000">c_1 may have to be at least a hundred more than one if this is</span> <span m="2182000">sufficiently large. And sufficiently large now</span> <span m="2186000">means with respect to c_2. You have to be a little bit</span> <span m="2191000">careful, but in this case it doesn't matter.</span> <span m="2194000">Any questions about the substitution method?</span> <span m="2197000">That was the same example three times.</span> <span m="2200000">In the end, it turned out we got the right answer.</span> <span m="2203000">But we sort of had to know the answer in order to find it,</span> <span m="2207000">which is a bit of a pain. It would certainly be nicer to</span> <span m="2211000">just figure out the answer by some procedure,</span> <span m="2214000">and that will be the next two techniques we talk about.</span> <span m="2218000">Sorry? How would you prove a lower</span> <span m="2222000">bound? I haven't tried it for this</span> <span m="2224000">recurrence, but you should be able to do exactly the same</span> <span m="2229000">form. Argue that T(n) is greater than</span> <span m="2232000">or equal to c_1*n^2 - c_2*n. I didn't check whether that</span> <span m="2236000">particular form will work, but I think it does.</span> <span m="2240000">Try it. These other methods will give</span> <span m="2242000">you, in some sense, upper and lower bounds if you</span> <span m="2246000">are a little bit careful. But, to really check things,</span> <span m="2251000">you pretty much have to do the substitution method.</span> <span m="2253000">And you will get some practice with that.</span> <span m="2255000">Usually we only care about upper bounds.</span> <span m="2257000">Proving upper bounds like this is what we will focus on,</span> <span m="2259000">but occasionally we need lower bounds.</span> <span m="2261000">It is always nice to know that you have the right answer by</span> <span m="2263000">proving a matching lower bound.</span> <span m="2271000">The next method we will talk about is the recursion-tree</span> <span m="2274000">method. And it is a particular way of</span> <span m="2277000">adding up a recurrence, and it is my favorite way.</span> <span m="2280000">It usually just works. That's the great thing about</span> <span m="2284000">it. It provides you intuition for</span> <span m="2286000">free. It tells you what the answer is</span> <span m="2288000">pretty much. It is slightly nonrigorous,</span> <span m="2291000">this is a bit of a pain, so you have to be really</span> <span m="2294000">careful when you apply it. Otherwise, you might get the</span> <span m="2298000">wrong answer. Because it involves dot,</span> <span m="2300000">dot, dots, our favorite three characters, but dot,</span> <span m="2304000">dot, dots are always a little bit nonrigorous so be careful.</span> <span m="2310000">Technically, what you should do is find out</span> <span m="2312000">what the answer is with recursion-tree method.</span> <span m="2314000">Then prove that it is actually right with the substitution</span> <span m="2317000">method. Usually that is not necessary,</span> <span m="2319000">but you should at least have in your mind that that is required</span> <span m="2322000">rigorously. And probably the first few</span> <span m="2323000">recurrences you solve, you should do it that way.</span> <span m="2326000">When you really understand the recursion-tree method,</span> <span m="2328000">you can be a little bit more sloppy if you are really sure</span> <span m="2331000">you have the right answer. Let's do an example.</span> <span m="2335000">We saw recursion trees very briefly last time with mergesort</span> <span m="2339000">as the intuition why it was n log n.</span> <span m="2341000">And, if you took an example like the one we just did with</span> <span m="2345000">the recursion-tree method, it is dead simple.</span> <span m="2348000">Just to make our life harder, let's do a more complicated</span> <span m="2352000">recursion. Here we imagine we have some</span> <span m="2355000">algorithm. It starts with a problem size</span> <span m="2357000">n, it recursively solves a problem of size n/4,</span> <span m="2361000">it then recursively solves a problem of size n/2,</span> <span m="2364000">and it does n^2 work on the side without nonrecursive work.</span> <span m="2370000">What is that? I mean that is a bit less</span> <span m="2373000">obvious, I would say. What we are going to do is draw</span> <span m="2378000">a picture, and we are just going to expand out that recursion in</span> <span m="2385000">tree form --</span> <span m="2396000">-- and then just add everything up.</span> <span m="2400000">We want the general picture, and the general principle in</span> <span m="2405000">the recursion-tree method is we just draw this as a picture.</span> <span m="2412000">We say well, T(n) equals the sum of n^2,</span> <span m="2416000">T(n/4) and T(n/2). This is a weird way of writing</span> <span m="2421000">a sum but why not write it that way.</span> <span m="2425000">This is going to be a tree. And it is going to be a tree by</span> <span m="2431000">recursively expanding each of these two leaves.</span> <span m="2435000">I start by expanding T(n) to this, then I keep expanding,</span> <span m="2440000">expanding, expanding everything.</span> <span m="2442000">Let's go one more step. We have this n^2,</span> <span m="2446000">T(n/4), T(n/2). If we expand one more time,</span> <span m="2449000">this is going to be n^2 plus two things.</span> <span m="2453000">The first thing is going to be (n/4)^2, the second thing is</span> <span m="2458000">going to be (n/2)^2. Plus their recursive branches.</span> <span m="2463000">We have T(n/16) and T(n/8). Here my arithmetic shows thin.</span> <span m="2468000">This better be the same, T(n/8), and this should be</span> <span m="2472000">T(n/4), I believe. You just keep going forever,</span> <span m="2475000">I mean, until you get down to the base case where T is a</span> <span m="2480000">constant. So, I am now going to skip some</span> <span m="2483000">steps and say dot, dot, dot.</span> <span m="2485000">This is where you have to be careful.</span> <span m="2490000">We have n^2, (n/4)^2, (n/2)^2.</span> <span m="2493000">Now this is easy because I have already done them all.</span> <span m="2499000">(n/16)^2, (n/8)^2, (n/8)^2 again,</span> <span m="2503000">(n/4)^2 and et cetera, dot, dot, dot,</span> <span m="2507000">of various levels of recursion here.</span> <span m="2512000">At the bottom, we are going to get a bunch of</span> <span m="2517000">constants. These are the leaves.</span> <span m="2521000">I would like to know how many leaves there are.</span> <span m="2524000">One challenge is how many leaves in this tree could there</span> <span m="2527000">be? This is a bit subtle,</span> <span m="2529000">unlike mergesort or unlike the previous recurrence we solved,</span> <span m="2533000">the number of leaves here is a bit funny because we are</span> <span m="2536000">recursing at different speeds. This tree is going to be much</span> <span m="2540000">smaller than this tree. It is going to have smaller</span> <span m="2543000">depth because it has already done down to (n/16).</span> <span m="2546000">Here it has only gone down to (n/4).</span> <span m="2550000">But how many leaves are there in this recursion tree?</span> <span m="2555000">All I need is an upper bound, some reasonable upper bound.</span> <span m="2561000">I can tell you it is at most T(n^10), but that is a bit</span> <span m="2567000">unreasonable. It should be less than n,</span> <span m="2571000">good. Why is it less than n?</span> <span m="2574000">Exactly. I start with a problem of size</span> <span m="2578000">n. And I recurse into a problem</span> <span m="2582000">that n/4 and a problem that says n/2.</span> <span m="2584000">When I get down to one I stop. So, n/4 + n/2 = æn,</span> <span m="2588000">which is strictly less than n. So, definitely the total number</span> <span m="2593000">of leaves has to be at most n. If I start out with n sort of</span> <span m="2597000">stuff and get rid of a quarter of it and then recurse,</span> <span m="2601000">it is definitely going to be less than n stuff at the bottom.</span> <span m="2606000">So, strictly less than n leaves.</span> <span m="2610000">At this point, I have done nothing</span> <span m="2612000">interesting. And then the second cool idea</span> <span m="2614000">in recursion trees is you don't just expand this tree and see</span> <span m="2618000">what it looks like and then say, well, God, how the hell am I</span> <span m="2622000">going to sum that? You sum it level by level.</span> <span m="2625000">That is the only other idea. It usually works really,</span> <span m="2628000">really well. Here it is a bit complicated</span> <span m="2630000">and I have to think a bit to figure out n^2 is n^2.</span> <span m="2634000">That is the first level. Easy.</span> <span m="2635000">The second level, I have to think a lot harder.</span> <span m="2640000">There are three kinds of mathematicians,</span> <span m="2643000">those who can add and those who cannot, and I am the latter kind</span> <span m="2648000">so I need your help. Can you add these things</span> <span m="2652000">together? It's n^2 over something.</span> <span m="2655000">Please? (5/16)n^2.</span> <span m="2656000">Now I really need your help. I think that one I could have</span> <span m="2661000">done, but this one is a little bit harder.</span> <span m="2664000">I will go look at my notes while you compute that.</span> <span m="2675000">Any answers? 73/256.</span> <span m="2677000">Anyone else confirm that? It seems a bit high to me.</span> <span m="2684000">73 does not sound right to me. 64?</span> <span m="2689000">Closer. It is actually important that</span> <span m="2694000">we get this right. The 256 is correct.</span> <span m="2699000">I can tell. Everyone should know that 16^2</span> <span m="2704000">= 256. We are computer scientists.</span> <span m="2706000">25, good. We have two people saying 25,</span> <span m="2709000">therefore it is correct by democracy.</span> <span m="2712000">[LAUGHTER] 25 is also what my notes say, and I computed it at</span> <span m="2717000">home. (25/256)n^2 is the right</span> <span m="2719000">answer. Now, did anyone notice</span> <span m="2721000">something magical about this progression?</span> <span m="2724000">It squares each time, good.</span> <span m="2728000">And, if we were going to add these up, you might call it?</span> <span m="2732000">A geometric series, very good.</span> <span m="2734000">So, it turns out this is geometric.</span> <span m="2737000">And we know how to sum geometric series,</span> <span m="2740000">at least you should.</span> <span m="2759000">We started n^2. We know that at the bottom,</span> <span m="2761000">well, this is not quite a level, we get something like n,</span> <span m="2765000">but we are decreasing geometrically.</span> <span m="2767000">So, the total, I mean the solution to the</span> <span m="2770000">recurrence is the sum of all the numbers in this tree.</span> <span m="2773000">If we added it up level by level and then add up all the</span> <span m="2777000">levels that is going to give us the answer.</span> <span m="2780000">This is the total computed level by level.</span> <span m="2782000">It is just a cute way to compute it.</span> <span m="2785000">It usually gives you nice answers like geometric answers.</span> <span m="2790000">We have n^2(1 + 5/16 + 25/256 + ...).</span> <span m="2792000">And, if we believe in fate and we see this three number</span> <span m="2797000">recurrence, we know that we have the right answer.</span> <span m="2801000">In general, it is going to be (5/16)k, at least we hope,</span> <span m="2805000">and so on. And it keeps going.</span> <span m="2807000">It doesn't go on infinitely, but let's just assume it goes</span> <span m="2812000">on infinitely. That will be an upper bound</span> <span m="2815000">that goes on forever. This is all times n^2.</span> <span m="2820000">Now, if you are going to know one thing about geometric</span> <span m="2825000">series, you should know that 1 + Ω + º, if you sum all the powers</span> <span m="2830000">of 2 you get 2. We are computer scientists.</span> <span m="2834000">We have got to know at least the binary case.</span> <span m="2839000">This is like writing 0.1111111 in binary, actually,</span> <span m="2847000">as 1, so this is 2. This is even smaller.</span> <span m="2851000">We have 5/16, that is less than a half and</span> <span m="2854000">then we are squaring each time, so this is even less than 2.</span> <span m="2859000">If you want, there is a nifty formula for</span> <span m="2862000">solving the general geometric series, but all we need is that</span> <span m="2867000">it is a constant. This is O(n^2).</span> <span m="2869000">It is also O(n^2). It is pretty obvious that it is</span> <span m="2873000">O(n^2) because the top thing is n^2.</span> <span m="2876000">So, there is our lower bound of n^2.</span> <span m="2880000">And we have it within a factor of 2, which is pretty good.</span> <span m="2883000">You actually get a better factor here.</span> <span m="2885000">So, that is recursion-tree method.</span> <span m="2887000">It is a little shaky here because we have these dot,</span> <span m="2890000">dot, dots, and we just believe that it is geometric.</span> <span m="2893000">It turns out most of the time it is geometric.</span> <span m="2896000">No problem here. I would definitely check it</span> <span m="2898000">with the substitution method because this is not obvious to</span> <span m="2901000">me that it is going to be geometric.</span> <span m="2903000">In the cases we will look at in a moment, it will be much</span> <span m="2907000">clearer, so clear that we can state a theorem that everything</span> <span m="2910000">is working fine. And still time,</span> <span m="2914000">good. So, that was recursion-trees.</span> <span m="2918000">There is one more method we are going to talk about,</span> <span m="2923000">and you could essentially think of it as an application of the</span> <span m="2929000">recursion-tree method but it is made more precise.</span> <span m="2935000">And it is an actual theorem, whereas recursion trees,</span> <span m="2940000">if the dot, dot, dots aren't obvious,</span> <span m="2944000">you better check them. The sad part about the master</span> <span m="2950000">method is it is pretty restrictive.</span> <span m="2953000">It only applies to a particular family of recurrences.</span> <span m="2967000">It should be T(n) = aT(n/b) + f(n).</span> <span m="2969000">Am I going to call it f? Yes, I will call it f.</span> <span m="2972000">In particular, it will not cover the</span> <span m="2975000">recurrence I just solved because I was recursing on two different</span> <span m="2980000">problems of different sizes. Here, every problem you recurse</span> <span m="2984000">on should be of the same size. There are a subproblems.</span> <span m="2988000">A way to think of this is a recursive algorithm.</span> <span m="2991000">You have a subproblems. Each of them is of size n/b,</span> <span m="2995000">so the total costs will be this.</span> <span m="2997000">Then you are doing f(n) nonrecursive work.</span> <span m="3002000">A few constraints. a should be at least 1,</span> <span m="3005000">should have at least 1 recursion.</span> <span m="3008000">b should be strictly greater than 1.</span> <span m="3012000">You better make the problem smaller or else it is going to</span> <span m="3017000">be infinity. And f should have some nice</span> <span m="3021000">property. f(n) should be asymptotically</span> <span m="3025000">positive.</span> <span m="3032000">How many people know what asymptotically positive means?</span> <span m="3037000">No one. OK, you haven't read the</span> <span m="3040000">textbook. That's OK.</span> <span m="3041000">I haven't read it either, although don't tell Charles.</span> <span m="3046000">And he'd notice. And what might you think</span> <span m="3050000">asymptotically positive means? That we can do a little bit</span> <span m="3055000">better. Sorry?</span> <span m="3056000">Yes, it means for large enough n, f(n) is positive.</span> <span m="3063000">This means f(n) is greater than zero for n, at least some n_o,</span> <span m="3067000">so for some constant n_o. Eventually it should be</span> <span m="3070000">positive. I mean, we don't care about</span> <span m="3072000">whether it's negative 1 for n=1, not a big deal.</span> <span m="3076000">It won't affect the answer because we only care about the</span> <span m="3080000">asympotics within.</span> <span m="3088000">The master method, you gave it a recurrence of</span> <span m="3090000">this form, it tells you the answer.</span> <span m="3093000">That is the great thing about the master method.</span> <span m="3096000">The annoying thing about the master method is that it has</span> <span m="3099000">three cases. It is a big long.</span> <span m="3101000">It takes a little bit longer to memorize than all the others</span> <span m="3105000">because the others are just ideas.</span> <span m="3107000">Here we need to actually remember a few things.</span> <span m="3110000">Let me state the theorem. Well, not quite yet.</span> <span m="3113000">There is one very simple idea, which is we are going to</span> <span m="3117000">compare this nonrecursive work f(n) with a very particular</span> <span m="3121000">function n^(log_b(a)). Why n^(log_b(a))?</span> <span m="3125000">You will see later. It turns out it is the number</span> <span m="3128000">of leaves in the recursion tree, but that is foreshadowing.</span> <span m="3133000">So, it is either less, equal or bigger.</span> <span m="3136000">And here we care about asymptotics.</span> <span m="3138000">And we have to be a little bit more precious about less,</span> <span m="3142000">equal or bigger. You might think well,</span> <span m="3145000">it means little o, big Theta, or little omega.</span> <span m="3150000">It would be nice if the theorem held for all of those cases,</span> <span m="3154000">but it leaves some gaps. Let's start with Case 1.</span> <span m="3158000">Case 1 is when f is smaller. And not just that it is little</span> <span m="3162000">o, but it is actually quite a bit smaller.</span> <span m="3166000">It has got to be polynomially smaller than n^(log_b(a)).</span> <span m="3180000">For some positive epsilon, the running time should be this</span> <span m="3184000">n to this constant log base b of a minus that epsilon,</span> <span m="3189000">so it is really polynomially smaller than n^(log_b(a)).</span> <span m="3193000">We cannot handle the little o case, that's a little bit too</span> <span m="3198000">strong. This is saying it is really</span> <span m="3201000">quite a bit smaller. But the answer then is really</span> <span m="3205000">simple, T(n) = Theta(n^(log_b(a))).</span> <span m="3208000">Great. That is Case 1.</span> <span m="3211000">Case 2 is when f(n) is pretty much equal to n^(log_b(a)).</span> <span m="3219000">And by pretty much equal I mean up to poly log factors.</span> <span m="3226000">This is log base 2 of n to the power k.</span> <span m="3231000">You should know this notation. For example,</span> <span m="3236000">k could be zero. And then they are equal up to</span> <span m="3242000">constant factors, for some k greater than or</span> <span m="3246000">equal to zero. Less than will not work,</span> <span m="3249000">so it is really important that k is non-negative.</span> <span m="3253000">It should probably be an integer.</span> <span m="3256000">It doesn't actually matter whether there is an integer,</span> <span m="3260000">but there it is. It could n^(log_b(a)) times log</span> <span m="3264000">n or just times nothing, whatever.</span> <span m="3267000">Again, the solution is easy here, T(n) = Theta(n^(log_b(a))*</span> <span m="3272000">lg^(k+1)(n)). Presumably it has to be at</span> <span m="3278000">least times log k. It turns out it is log to the k</span> <span m="3284000">plus 1 of n. That is Case 2.</span> <span m="3287000">We have one more case which is slightly more complicated.</span> <span m="3293000">We need to assume slightly more for Case 3.</span> <span m="3300000">But Case 3 is roughly when f(n) grows bigger than n^(log_b(a)).</span> <span m="3305000">So, it should be capital Omega, here is one place where we get</span> <span m="3310000">to use omega, (n^(log_b(a)) + epsilon) for</span> <span m="3314000">some positive epsilon. It should grow not just bigger</span> <span m="3319000">but polynomially bigger. Here it was growing just a log</span> <span m="3323000">factor bigger, poly log, and here it is a</span> <span m="3327000">polynomial factor. In this case,</span> <span m="3331000">we need another assumption about f because we worry a</span> <span m="3336000">little bit about how quickly f grows.</span> <span m="3340000">We want to make sure that as you go down the recursion f gets</span> <span m="3346000">smaller. It would be kind of nice if f</span> <span m="3349000">gets smaller as you go down, otherwise you are,</span> <span m="3354000">again, trying to sum to infinity or whatever.</span> <span m="3358000">I see why this is for some epsilon prime greater than zero.</span> <span m="3366000">What I would like is that if I just sort of take the</span> <span m="3369000">recurrence, this T(n) and just throw in fs instead,</span> <span m="3373000">f(n) should be somehow related to af(n/b).</span> <span m="3376000">What I would like is that f(n), which is at the top of the</span> <span m="3380000">recursion tree, should be bigger than the thing</span> <span m="3383000">at the next level down. The sum of all the values at</span> <span m="3387000">the next level down should be bigger by some constant factor.</span> <span m="3393000">Here I have the next level down is at most some 1 - e,</span> <span m="3397000">something strictly less than 1, some constant strictly less</span> <span m="3402000">than 1 times the thing at the top level.</span> <span m="3405000">I need that to make sure things are getting smaller as I go</span> <span m="3409000">down. Then T(n) = Theta[f(n)].</span> <span m="3412000">And that is the theorem. This is the master theorem or</span> <span m="3416000">whatever you want to call it. It is not named after some guy</span> <span m="3422000">name Master. It is just the master of all</span> <span m="3425000">methods because it is very easy to apply.</span> <span m="3429000">Let's apply it a few times. It is a bit much to take in all</span> <span m="3434000">at once. And then I will give you a</span> <span m="3436000">sketch of the proof to see that it is really not that surprising</span> <span m="3442000">this is true if you look at the recursion-tree.</span> <span m="3446000">But first let's just try using it.</span> <span m="3450000">For example, we could take T(n) = 4T(n/2) +</span> <span m="3455000">n. This is a, this is b,</span> <span m="3458000">this is f(n). The first thing we should</span> <span m="3464000">compute is n^(log_b(a)). This I think even I can do.</span> <span m="3471000">Log base 2 of 4. Yeah, log base 2 I can do.</span> <span m="3476000">This is n^2. OK, so is f(n) smaller or</span> <span m="3484000">bigger than n^2? Well, f(n) = n.</span> <span m="3490000">n^2 is clearly bigger by a polynomial factor.</span> <span m="3499000">So, we are in Case 1. What is the answer?</span> <span m="3506000">n^2, yeah. It is T(n^(log_b(a))),</span> <span m="3512000">which here it is just n^2. Let's do some slight variation.</span> <span m="3520000">I am going to keep a and b the same and just change f.</span> <span m="3526000">Let's say T(n) = 4T(n/2) + n^2. This is like drill spelling.</span> <span m="3534000">n^2 is asymptotically the same as n^2 even up to constants.</span> <span m="3543000">What is the answer? This is Case 2.</span> <span m="3552000">It is slightly harder.</span> <span m="3562000">What is k in this example? Zero. The answer is?</span> <span m="3571000">Survey says? n^2 log n.</span> <span m="3584000">Good. And a couple more.</span> <span m="3589000">T(n) = 4T(n/2) + n^3. What is the answer?</span> <span m="3598000">n^3. This is Case 3.</span> <span m="3601948">I know this is pretty boring. At this point we are just</span> <span m="3608961">applying this stupid theorem. How about n^2/lg n?</span> <span m="3615194">What is the answer? Good.</span> <span m="3618311">In this case no one should answer.</span> <span m="3622597">It is a big tricky. I forget exactly the answer.</span> <span m="3630000">I think it is like n^2 log log n over log n,</span> <span m="3631539">no? Oh, no.</span> <span m="3631897">n^2 log log n, that's right.</span> <span m="3632864">Yeah. But you shouldn't know that,</span> <span m="3634046">and this doesn't follow from the master method.</span> <span m="3635693">This is something you would have to solve,</span> <span m="3637161">probably with the recursion-tree would be a good</span> <span m="3638843">way to do this one, and you need to know some</span> <span m="3640419">properties of logs to know how that goes.</span> <span m="3641851">But here the master method does not apply.</span> <span m="3665000">And so you have to use a different method.</span> <span m="3668094">OK. The last thing I want to do is</span> <span m="3670584">tell you why the master method is true, and that makes it much</span> <span m="3675188">more intuitive, especially using</span> <span m="3677528">recursion-trees, why everything works.</span> <span m="3695000">This is a sketch of a proof, not the full thing.</span> <span m="3698770">You should read the proof in the textbook.</span> <span m="3702060">It is not that much harder than what I will show,</span> <span m="3705911">but it is good for you to know the formal details.</span> <span m="3709842">I don't have time here to do all of the details.</span> <span m="3713613">I will just tell you the salient parts.</span> <span m="3716661">This is the proof sketch or the intuition behind the master</span> <span m="3721315">method. What we are going to do is just</span> <span m="3726099">take the recursion-tree for this recurrence and add up each level</span> <span m="3732500">and then add up all the levels and see what we get.</span> <span m="3737500">We start with f(n) at the top after we have expanded one</span> <span m="3743000">level. Then we get a different</span> <span m="3745900">problems, each of n/b. And after we expand them it</span> <span m="3751498">will f(n/b) for each one. They are all the same size.</span> <span m="3756310">Then we expand all of those and so on, and we get another a</span> <span m="3761677">subproblems from there. We are going to get like</span> <span m="3766026">f((n/b)^2). That is sort of decreasing</span> <span m="3769450">geometrically the size, and so on and so on and so on,</span> <span m="3774355">until at the bottom we get constant size problems.</span> <span m="3780000">This is a bit special because this is the base case,</span> <span m="3783904">but we have some other constant at the bottom.</span> <span m="3787349">We would like to know how many leaves there are,</span> <span m="3790947">but that is a little bit tricky at the moment.</span> <span m="3794392">Let's first compute the height of this tree.</span> <span m="3797684">Let me draw it over here. What is the height of this</span> <span m="3801588">tree? I start with a problem of size</span> <span m="3804267">n. I want to get down to a problem</span> <span m="3806794">of size 1. How long does that take?</span> <span m="3809397">How many levels?</span> <span m="3818000">This is probably too easy for some and not at your fingertips</span> <span m="3824346">for others. Log base b of n,</span> <span m="3827201">good. The height of this tree is</span> <span m="3830480">n^(log_b(a)), because it is just how many</span> <span m="3834711">times I divide by b until I get down to 1.</span> <span m="3840000">That is great. Now I should be able to compute</span> <span m="3844189">the number of leaves because I have branching factor a,</span> <span m="3849216">I have height h. The number of leaves is a^h,</span> <span m="3853312">a^log_b(n). Let me expand that a little</span> <span m="3856849">bit. a^log_b(n), properties of logs,</span> <span m="3860108">we can take the n downstairs and put the a upstairs,</span> <span m="3864855">and we get n^(log_b(a)). Our good friend n^(log_b(a)).</span> <span m="3871000">So, that is why Our good friend n^(log_b(a)) is so important in</span> <span m="3875246">the master method. What we are doing is comparing</span> <span m="3878534">f, which is the top level, to n^(log_b(a)),</span> <span m="3881410">which up to theta is the bottom level.</span> <span m="3883945">Now the leaves are all at the same level because we are</span> <span m="3887643">decreasing at the same rate in every branch.</span> <span m="3890589">If I add up the cost at the bottom level,</span> <span m="3893328">it is Theta(n^(log_b(a))). I add up the things at the top</span> <span m="3897163">level it is f(n), not terribly exciting.</span> <span m="3901000">But the next level, this is a little bit more</span> <span m="3904529">interesting, is af(n/b), which should look familiar if</span> <span m="3908779">you had the master method already memorized,</span> <span m="3912229">it is that. So, we know that af(n/b) has</span> <span m="3915358">decreased by some constant factor, 1-epsilon prime.</span> <span m="3919368">We have gone down. This is a constant factor</span> <span m="3922818">smaller than this. And then you sum up the next</span> <span m="3926508">level. It is going to be like</span> <span m="3928754">a^2f(n/b^2). I see that I actually wrote</span> <span m="3933551">this wrong, the parentheses. Sorry about that.</span> <span m="3937804">It is not (n/b)^2. It is (n/b^2).</span> <span m="3940829">So, this sequence, in Case 3 at least,</span> <span m="3944326">is decreasing geometrically. If it is decreasing</span> <span m="3948768">geometrically up to constant factors, it is dominated by the</span> <span m="3954344">biggest term, which is f(n).</span> <span m="3956896">Therefore, in Case 3, we get Theta[f(n)].</span> <span m="3962000">Let's look at the other cases, and let me adapt those cases to</span> <span m="3967613">how much time we have left. Wow, lot's of time.</span> <span m="3971846">Five minutes. Tons of time.</span> <span m="3974239">What to do? Let me write that down.</span> <span m="3977368">Case 3, the costs decrease. Now, this is a place I would</span> <span m="3982429">argue where the dot, dot, dot is pretty obvious.</span> <span m="3986754">Here, this is damn simple, it is a^kf(n/b^k).</span> <span m="3992000">And, in Case 3, we assume that the costs</span> <span m="3997187">decrease geometrically as we go down the tree.</span> <span m="4003172">That was sort of backwards to start with Case 3.</span> <span m="4009423">Let's do Case 1, which is sort of the other</span> <span m="4015009">intuitively easy case. In Case 1, we know that f(n) is</span> <span m="4021079">polynomially smaller than this thing.</span> <span m="4023494">And we are sort of changing by this very simple procedure in</span> <span m="4027452">the middle. I am going to wave my hands if</span> <span m="4030203">this is where you need a more formal argument.</span> <span m="4033221">I claim that this will increase geometrically.</span> <span m="4036241">It has to increase geometrically because this f(n)</span> <span m="4039528">is polynomially smaller than this one, you are going to get</span> <span m="4043419">various polynomials in the middle which interpret</span> <span m="4046639">geometrically from the small one to the big one.</span> <span m="4051000">Therefore, the big one dominates because it is,</span> <span m="4054444">again, geometric series. As I said, this is intuition,</span> <span m="4058413">not a formal argument. This one was pretty formal</span> <span m="4062007">because we assumed it, but here you need a bit more</span> <span m="4065751">argument. They may not increase</span> <span m="4067997">geometrically but they could increase faster,</span> <span m="4071292">and that is also fine. So, in Case 3,</span> <span m="4073987">you are dominated, I mean you are always dominated</span> <span m="4077657">by the biggest term in a geometric series.</span> <span m="4082000">Here it happens to be f(n) and here you are dominated by</span> <span m="4088416">n^(log_b(a)) with a bottom term, oh, Theta.</span> <span m="4093316">Case 2, here it is pretty easy but you need to know some</span> <span m="4099733">properties of logs. In Case 2, we assume that all</span> <span m="4105332">of these are basically the same. I mean, we assume that the top</span> <span m="4111904">is equal to the bottom. And this is changing in this</span> <span m="4115145">very procedural way. Therefore, all of the ones in</span> <span m="4118258">the middle have to be pretty much the same.</span> <span m="4120926">Not quite because here we don't have the log factor.</span> <span m="4124167">Here we have a log to the k. We have n^(log_b(a)) times log</span> <span m="4127850">to the kn. Here we don't have the log to</span> <span m="4130328">the k. So, the logs do disappear here.</span> <span m="4132680">It turns out the way they disappear is pretty slowly.</span> <span m="4137000">If you look at the top half of these terms, they will all have</span> <span m="4142255">log to the k. The bottom half they will start</span> <span m="4146046">to disappear. I am giving you some oracle</span> <span m="4149493">information. If you take logs and you don't</span> <span m="4153112">change the argument by too much, the logs remain.</span> <span m="4157247">Maybe halfway is too far. The claim is that each level is</span> <span m="4162073">roughly the same, especially the upper most</span> <span m="4165691">levels are all asymptotically equal.</span> <span m="4170000">Roughly the same. And, therefore,</span> <span m="4174658">the cost is one level, here like f(n) times the number</span> <span m="4182375">of levels, h. And h is log base b of n.</span> <span m="4187908">B is a constant so we don't care.</span> <span m="4192567">This is Theta(lg n). And, therefore,</span> <span m="4197662">we get T(n) = (n^(log_b(a)) lg^(k+1)(n)) times another log</span> <span m="4205961">n. So, we get [f(n)lg n].</span> <span m="4211232">That is the very quick sketch. Sorry, I am being pretty fuzzy</span> <span m="4220046">on Cases 1 and 2. Read the proof because you will</span> <span m="4227098">have to, at some point, manipulate logs in that way.</span> <span m="4234590">And that is all. Any questions?</span> <span m="4238998">Or, you are all eager to go. OK.</span> <span m="4243552">Thanks. See you Wednesday.</span> </p>
</div>
        <div id="vid_transcript" itemprop="description" class="tabContent hide">
<h2 class="subhead">Free Downloads</h2>
<h3 class="subsubhead">Video</h3>
<ul>
<li>iTunes U (<a href="https://itunes.apple.com/us/itunes-u/id341597754">MP4 - 146MB</a>)</li>
<li>Internet Archive (<a href="http://www.archive.org/download/MIT6.046JF05MPEG4/ocw-6.046-12sep2005-220k.mp4">MP4 - 286MB</a>)</li>
</ul>
<br><h3 class="subsubhead">Free Streaming</h3>
<ul><li><a href="http://videolectures.net/mit6046jf05_introduction_algorithms/">VideoLectures.net</a></li></ul>
<br><h3 class="subsubhead">Subtitle</h3>
<ul><li>English - US (<a href="../../../contents/video-lectures/lecture-2-asymptotic-notation-recurrences-substitution-master-method/whjt_N9uYFI.srt">SRT</a>)</li></ul>
</div>
    
   </div>  




      					 
        <div class="" id="parent-fieldname-bottom_html_area">
            
            
        </div>
    
                    </div>
<!--Course_inner_chip tag close -->
           		</div>
<!--Course_wrapper tag close --> 
            </div>
<!--left tag close -->
            <div id="right">
                <!--Begin Right Portion -->
                    <div>
    
<div id="portletwrapper-6f63772e7269676874746f70706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a646f6e617465" class="portletWrapper kssattr-portlethash-6f63772e7269676874746f70706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a646f6e617465">
<div class="portletStaticText portlet-static-donate"><p class="zero"><a href="http://ocw.mit.edu/donate"><img src="../../../common/images/button_donate-now.png" alt="Donate Now." class="donate"></a></p></div>

</div>




</div>

                	<div>
    



</div>


        <div class="" id="parent-fieldname-rsi_top_html_area">
            
            
        </div>
    

<!-- RSI google ad space-->


<div id="google_ads">    
    <script type="text/javascript" src="http://partner.googleadservices.com/gampad/google_service.js"></script><script type="text/javascript">GS_googleAddAdSenseService("ca-pub-6588555046597237");GS_googleEnableAllServices();</script><script type="text/javascript">GA_googleAddSlot("ca-pub-6588555046597237", "VIDEO_INDIVIDUAL_SLOT_A_DL");GA_googleAddSlot("ca-pub-6588555046597237", "VIDEO_INDIVIDUAL_SLOT_B_DL");GA_googleAddSlot("ca-pub-6588555046597237", "VIDEO_INDIVIDUAL_SLOT_C_DL");</script><script type="text/javascript">GA_googleFetchAds();</script><script language="javascript" type="text/javascript">
GA_googleAddAttr("TYPE","HOUSE");
GA_googleAddAttr("DEPARTMENT","6");
GA_googleAddAttr("CRS_BEG2","04");
GA_googleAddAttr("CRS_END","6J");
GA_googleAddAttr("SESSION","F");
GA_googleAddAttr("YEAR","05");
</script><script type="text/javascript">GA_googleFillSlot("VIDEO_INDIVIDUAL_SLOT_A_DL");</script><script type="text/javascript">GA_googleFillSlot("VIDEO_INDIVIDUAL_SLOT_B_DL");</script><script type="text/javascript">GA_googleFillSlot("VIDEO_INDIVIDUAL_SLOT_C_DL");</script>
</div>

<!-- End RSI ads--> 

<div>
    



</div>

            </div>
<!--Right div close -->
            <div class="clear"></div> 
        </div>
<!--grid tag close --> 
      </div>
		
		<div id="bottom">
			<div id="grid">
				
<div id="portletwrapper-6f63772e626f74746f6d706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d666f6f746572" class="portletWrapper kssattr-portlethash-6f63772e626f74746f6d706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d666f6f746572">
<div class="portletStaticText portlet-static-site-footer">
<!--googleoff: index--> <div id="bottom"><div id="grid">
<!-- *begin footer* --> <div role="navigation sitemap" id="footer">
<div class="grid_2 alpha" id="foot-c1">
<h4 class="footer">Find Courses</h4> <ul class="foot-bullet">
<li><a href="http://ocw.mit.edu/courses/find-by-topic/">Find by Topic</a></li>     <li><a href="http://ocw.mit.edu/courses/find-by-number/">Find by Course Number</a></li>     <li><a href="http://ocw.mit.edu/courses/find-by-department/">Find by Department</a></li>     <li><a href="http://ocw.mit.edu/courses/audio-video-courses/">Audio/Video Courses</a></li>     <li><a href="http://ocw.mit.edu/courses/subtitled/">Courses with Subtitles</a></li>     <li><a href="http://ocw.mit.edu/courses/online-textbooks/">Online Textbooks</a></li>     <li><a href="http://ocw.mit.edu/courses/new-courses/">New Courses</a></li>     <li><a href="http://ocw.mit.edu/courses/most-visited-courses/">Most Visited Courses</a></li>     <li><a href="http://ocw.mit.edu/courses/ocw-scholar/">OCW Scholar Courses</a></li>     <li><a href="http://ocw.mit.edu/courses/this-course-at-mit/">This Course at MIT</a></li>     <li><a href="http://ocw.mit.edu/resources/">Supplemental Resources</a></li>     <li><a href="http://ocw.mit.edu/courses/translated-courses/">Translated Courses</a></li>     <li><a href="http://ocw.mit.edu/courses/">View All Courses</a></li> </ul>
</div> <div class="grid_2" id="foot-c2">
<h4 class="footer">About</h4> <ul class="foot-bullet">
<li><a href="http://ocw.mit.edu/about/">About OpenCourseWare</a></li>     <li><a href="http://ocw.mit.edu/about/site-statistics/">Site Stats</a></li>     <li><a href="http://ocw.mit.edu/about/ocw-stories/">OCW Stories</a></li>     <li><a href="http://ocw.mit.edu/about/media-coverage/">Media Coverage</a></li>     <li><a href="http://ocw.mit.edu/about/newsletter/">Newsletter</a></li>     <li><a href="http://ocw.mit.edu/about/media-coverage/press-releases/">Press Releases</a></li> </ul>
</div> <div class="grid_2" id="foot-c3">
<h4 class="footer">Donate</h4> <ul class="foot-bullet">
<li><a href="http://ocw.mit.edu/donate">Make a Donation</a></li>     <li><a href="http://ocw.mit.edu/donate/why-donate/">Why Donate?</a></li>     <li><a href="http://ocw.mit.edu/donate/our-supporters/">Our Supporters</a></li>     <li><a href="http://ocw.mit.edu/donate/other-ways-to-contribute/">Other Ways to Contribute</a></li>     <li><a href="http://ocw.mit.edu/donate/shop-ocw/">Shop OCW</a></li>     <li><a href="http://ocw.mit.edu/support/">Become a Corporate Sponsor</a></li> </ul>
</div> <div class="grid_2" id="foot-c4">
<h4 class="footer">Featured Sites</h4> <ul class="foot-bullet">
<li><a href="http://ocw.mit.edu/high-school/">Highlights for High School</a></li>     <li><a href="http://ocw.mit.edu/educator/">OCW Educator</a></li>     <li><a href="http://ocw.mit.edu/courses/crosslinks/">MIT Crosslinks and OCW</a></li>     <li><a href="http://ocw.mit.edu/ans7870/featured/mitx-courses-on-edx.htm">MITx Courses on edX</a></li>     <li><a href="http://teachingexcellence.mit.edu/">Teaching Excellence at MIT</a></li>     <li><a href="http://www.oeconsortium.org/">Open Education Consortium</a></li> </ul>
<h4 style="margin-top: 14px;" class="footer">Tools</h4> <ul class="foot-bullet">
<li><a href="http://ocw.mit.edu/help/">Help &amp; FAQs</a></li>     <li><a href="../../../common/jsp/feedback.htm">Contact Us</a></li>     <li><a href="../../../common/search/AdvancedSearch.htm">Advanced Search</a></li>     <li><a href="http://ocw.mit.edu/help/site-map/">Site Map</a></li>     <li><a href="../../../common/terms/index.htm">Privacy &amp; Terms of Use</a></li>     <li><a href="http://ocw.mit.edu/help/rss/">RSS Feeds</a></li> </ul>
</div> <div class="grid_4 omega" id="foot-c5">
<h4 class="footer">Our Corporate Supporters</h4> <!-- HOME_CORP_LOGO_1 --> <div class="sponsors_google_ads_even" id="div-gpt-ad-1388181177156-0"><script type="text/javascript">
googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-0'); });
</script></div> <!-- HOME_CORP_LOGO_2 --> <div class="sponsors_google_ads_odd" id="div-gpt-ad-1388181177156-1"><script type="text/javascript">
googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-1'); });
</script></div> <!-- HOME_CORP_LOGO_3 --> <div class="sponsors_google_ads_even" id="div-gpt-ad-1388181177156-2"><script type="text/javascript">
googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-2'); });
</script></div> <!-- HOME_CORP_LOGO_4 --> <div class="sponsors_google_ads_odd" id="div-gpt-ad-1388181177156-3"><script type="text/javascript">
googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-3'); });
</script></div> <!-- HOME_CORP_LOGO_5 --> <div class="sponsors_google_ads_even" id="div-gpt-ad-1388181177156-4"><script type="text/javascript">
googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-4'); });
</script></div> <!-- HOME_CORP_LOGO_6 --> <div class="sponsors_google_ads_odd" id="div-gpt-ad-1388181177156-5"><script type="text/javascript">
googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-5'); });
</script></div>
</div> <div class="grid_12 alpha omega" style="border-top: thin solid #d5c9ba; padding-top: 24px; margin-bottom: 10px; text-align: center;"><p style="font-family: TitilliumText22LRegular,Verdana; text-align: center; font-size: 1.1em;">Support for <span style="letter-spacing: 0.5px;"><strong>MIT OPENCOURSEWARE'S 15th anniversary</strong></span> is provided by <a href="http://www.sapientnitro.com/en-us.html#home"><img style="width: 145px; height: 35px; vertical-align: middle; margin-left: 7px;" alt="SapientNitro logo and nameplate." src="../../../common/images/logo_sapient.png"></a></p></div> <div itemtype="http://schema.org/CollegeOrUniversity" itemscope="" itemprop="publisher" class="grid_12 alpha omega">
<h4 style="border-top: thin solid #d5c9ba; padding-top: 10px; margin-bottom: 10px;" class="footer">About <span itemprop="name">MIT OpenCourseWare</span>
</h4> <p itemprop="description" style="color: #999; font-size: 1em; line-height: 1.5em; margin-top: 10px;">MIT OpenCourseWare makes the materials used in the teaching of almost all of MIT's subjects available on the Web, free of charge. With more than 2,200 courses available, OCW is delivering on the promise of open sharing of knowledge. <a href="http://ocw.mit.edu/about/">Learn more »</a></p>
</div> <div style="border-top: none;" class="grid_12 alpha omega" id="foot-copy">
<a href="http://web.mit.edu"><img style="width: 195; height: 44;" alt="Massachusetts Institute of Technology logo and name." src="../../../common/images/logo_mit.png"></a><a href="http://odl.mit.edu"><img style="width: 289; height: 54; vertical-align: top;" alt="MIT Office of Digital Learning logo and name." src="http://ocw.mit.edu/images/logo_odl.png"></a><a href="http://www.oeconsortium.org/"><img style="width: 219px; height: 59px; vertical-align: top;" alt="Open Education Consortium logo." src="http://ocw.mit.edu/images/logo_oec.png"></a><a itemprop="useRightsUrl" rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/"><img style="width: 126px; height: 44px; margin-right: 0; margin-left: 13px;" alt="Creative Commons logo with terms BY-NC-SA." src="../../../common/images/cc_by-nc-sa.png"></a> <p class="copyright">© 2001–2015<br> Massachusetts Institute of Technology</p> <p style="font-size: 0.9em; margin-bottom: 15px;">Your use of the MIT OpenCourseWare site and materials is subject to our <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/">Creative Commons License</a> and other <a rel="cc:morePermissions" href="../../../common/terms/index.htm">terms of use</a>.</p>
</div>
</div>
</div></div> <!--googleon: index-->
</div>

</div>





                
			</div> <!-- bottom grid end -->
		</div>
<!-- bottom end -->
		
		
   </body>
</html>
