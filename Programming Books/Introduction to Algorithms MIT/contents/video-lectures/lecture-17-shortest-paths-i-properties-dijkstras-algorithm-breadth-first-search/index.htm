<!DOCTYPE html><html lang="en">
<head>
<meta charset="utf-8">
<meta name="format-detection" content="telephone=no">
<title>Lecture 17: Shortest Paths I: Properties, Dijkstra's Algorithm, Breadth-first Search | Video Lectures | Introduction to Algorithms (SMA 5503) | Electrical Engineering and Computer Science | MIT OpenCourseWare</title>
<!-- Begin Automatic Metadata Insertion --><meta content="6-046j-introduction-to-algorithms-sma-5503-fall-2005" name="WT.cg_n">
<meta content="Lecture 17: Shortest Paths I: Properties, Dijkstra's Algorithm, Breadth-first Search" name="WT.cg_s">
<meta content="" name="Description">
<meta content="Leiserson, Charles" name="Author">
<meta content="Demaine, Erik" name="Author">
<meta content="algorithms,efficient algorithms,sorting,search trees,heaps,hashing,divide-and-conquer,dynamic programming,amortized analysis,graph algorithms,shortest paths,network flow,computational geometry,number-theoretic algorithms,polynomial and matrix calculations,caching,parallel computing,Algorithms and Data Structures" name="keywords">
<meta content="6.046J Introduction to Algorithms (SMA 5503) | Lecture 17: Shortest Paths I: Properties, Dijkstra's Algorithm, Breadth-first Search" name="Search_Display">
<meta content="Algorithms and Data Structures" itemprop="about">
<!-- End Automatic Metadata Insertion --><link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/grid.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/base.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/menu.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/jquery.bubblepopup.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/courses.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/courses_new.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/jquery.jscrollpane.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/media_tabs.css">
<link href="http://ocw.mit.edu/xml/ocwcc.rdf" type="application/rdf+xml" rel="metadata">
<link rel="canonical" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-046j-introduction-to-algorithms-sma-5503-fall-2005/video-lectures/lecture-17-shortest-paths-i-properties-dijkstras-algorithm-breadth-first-search">
<link rel="apple-touch-icon" href="../../../common/images/apple-touch-icon.png">
<script type="text/javascript" src="../../../common/scripts/jquery.js"></script><script type="text/javascript" src="../../../common/scripts/ocw-media-utils-offline.js"></script><script type="text/javascript" src="../../../common/scripts/ocw-offline.js"></script><script type="text/javascript" src="../../../common/scripts/jquery.bubblepopup.min.js"></script><script type="text/javascript" src="../../../common/scripts/jquery-ui.min.js"></script><script type="text/javascript" src="../../../common/scripts/jquery.jscrollpane.min.js"></script><script type="text/javascript" src="../../../common/scripts/bubble-popup-offline.js"></script><script type="text/javascript">
      $(document).ready(function() {
        $("#tabs").tabs();
        IpadScroller();
      });
    </script>
</head>
<body itemscope itemtype="http://schema.org/WebPage">
        
	

        <div id="top">
			<div id="grid">
				
				
					
<div id="portletwrapper-6f63772e746f70706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d686561646572" class="portletWrapper kssattr-portlethash-6f63772e746f70706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d686561646572">
<div class="portletStaticText portlet-static-site-header">
<!--googleoff: index-->
<div class="grid_6 alpha" role="banner" id="banner"><a href="http://ocw.mit.edu/"><img class="logo" alt="MIT OpenCourseWare, Massachusetts Institute of Technology" src="../../../common/images/ocw_mast.png"></a></div>
<div class="grid_6 omega" role="form toolbar" id="subscribe">
<div class="module">
<table class="social"><tbody><tr>
<td class="socialbutton"><a href="http://ocw.mit.edu/subscribe/index.htm?utm_source=header"><img src="../../../common/images/trans.gif" alt="An icon depicting an envelope.">Subscribe to the OCW Newsletter</a></td>
            <td>
<a href="https://plus.google.com/104567381989352550847/posts"><img alt="Click to visit our Google+ page." src="../../../common/images/icon_gp.png"></a><a href="https://www.pinterest.com/mitocw/pins/"><img alt="Click to visit our Pinterest page." src="../../../common/images/icon_pin.png"></a><a href="http://facebook.com/mitocw"><img alt="Click to visit our Facebook page." src="../../../common/images/icon_fb.png"></a><a href="http://twitter.com/mitocw"><img alt="Click to visit our Twitter feed." src="../../../common/images/icon_tw.png"></a>
</td>
        </tr></tbody></table>
</div>
<p class="helplinks"><a href="http://ocw.mit.edu/help">Help</a>   |   <a href="../../../common/jsp/feedback.htm">Contact Us</a></p>
</div>
<div class="clear"> </div>
<!--googleon: index-->
</div>

</div>





<!--googleoff: index-->
<div id="mega" role="navigation" class="grid_8 alpha">        
	<ul id="menu">
<li id="menu_home">
            <a href="http://ocw.mit.edu/"><img src="../../../common/images/top-nav_home.png" class="home_icon" alt="Click for site home page."></a><!-- Begin Home Item -->
        </li>
<!-- End Home Item -->        
        <li class="selected">
            <a href="#" class="drop">Find Courses</a><!-- Begin 5 columns Item -->
            <div class="dropdown_5columns-a mega-courses">                    
                <div class="col_1a">
                    <div class="row_1a">
                        <div class="quart">
                            <h2 class="nav">Find courses by:</h2>
                            <ul class="nav-bullet find_by">
<li><a href="http://ocw.mit.edu/courses/find-by-topic/">Topic</a></li>
                                <li><a href="http://ocw.mit.edu/courses/find-by-number/">MIT Course Number</a></li>
                                <li><a href="http://ocw.mit.edu/courses/find-by-department/">Department</a></li>
                            </ul>
<ul style="margin-top: 88px;" class="nav-bullet find_by">
<li style="font-weight: normal; font-size: 1em;"><a href="http://ocw.mit.edu/courses/">View All Courses</a></li>
							</ul>
</div>
                        <div class="quart">
                            <h2 class="nav">Collections</h2>
                            <ul class="nav-bullet">
<li><a href="http://ocw.mit.edu/courses/audio-video-courses/">Audio/Video Lectures</a></li>
                                <li><a href="http://ocw.mit.edu/courses/online-textbooks/">Online Textbooks</a></li>
                                <li><a href="http://ocw.mit.edu/courses/new-courses/">New Courses</a></li>
                                <li><a href="http://ocw.mit.edu/courses/most-visited-courses/">Most Visited Courses</a></li>
                                <li><a href="http://ocw.mit.edu/courses/ocw-scholar/">OCW Scholar Courses</a></li>
                                <li><a href="http://ocw.mit.edu/courses/this-course-at-mit/">This Course at MIT</a></li>
                                <li><a href="http://ocw.mit.edu/resources/">Supplemental Resources</a></li>
                            </ul>
</div>
                        <div class="clear"> </div>
                    </div>
                    <div class="row_1b">
                        <h2 class="nav">Cross-Disciplinary Topic Lists</h2>
                        <div class="quart">
                        <ul class="nav-bullet">
<li><a href="http://ocw.mit.edu/courses/energy-courses">Energy</a></li>
                            <li><a href="http://ocw.mit.edu/courses/entrepreneurship">Entrepreneurship</a></li>
                            <li><a href="http://ocw.mit.edu/courses/environment-courses">Environment</a></li>
                        </ul>
</div>    
                        <div class="quart">
                        <ul class="nav-bullet">
<li><a href="http://ocw.mit.edu/courses/intro-programming">Introductory Programming</a></li>
                            <li><a href="http://ocw.mit.edu/courses/life-sciences">Life Sciences</a></li>
                            <li><a href="http://ocw.mit.edu/courses/transportation-courses">Transportation</a></li>
                        </ul>
</div>
                        <div class="clear"> </div>
                    </div>
                    <div class="clear"> </div>
                </div>
                <div class="col_1b">
                    <h2 class="nav">Translated Courses</h2>
                    <ul class="nav-bullet">
<li><a href="http://ocw.mit.edu/courses/translated-courses/traditional-chinese">繁體字 / Traditional Chinese</a></li>
                        <li><a href="http://ocw.mit.edu/courses/translated-courses/spanish">Español / Spanish</a></li>
                        <li><a href="http://ocw.mit.edu/courses/translated-courses/portuguese">Português / Portuguese</a></li>
                        <li><a href="http://ocw.mit.edu/courses/translated-courses/persian">فارسی / Persian</a></li>
                        <li><a href="http://ocw.mit.edu/courses/translated-courses/turkish">Türkçe / Turkish</a></li>
                        <li><a href="http://ocw.mit.edu/courses/translated-courses/korean">(비디오)한국 / Korean</a></li>
                        <li><a href="http://ocw.mit.edu/courses/translated-courses">More...</a></li>
                    </ul>
</div>
            </div>
        </li>
        <li>
            <a href="" class="drop">About</a>
            <div class="dropdown_1column-a">
                <div class="col_1">
                    <ul class="nav-bullet mega-div-bottom">
<li><a href="http://ocw.mit.edu/about/">About MIT OpenCourseWare</a></li>
                    </ul>
<ul class="nav-bullet mega-div-bottom">
<li><a href="http://ocw.mit.edu/about/site-statistics/">Site Stats</a></li>
                        <li><a href="http://ocw.mit.edu/about/ocw-stories/">OCW Stories</a></li>                        
                    </ul>
<ul class="nav-bullet">
<li><a href="http://ocw.mit.edu/about/media-coverage/">Media Coverage</a></li>
                        <li><a href="http://ocw.mit.edu/about/newsletter/">Newsletter</a></li>                        
                    </ul>
</div>
            </div>  
        </li>    
        <li>
            <a href="" class="drop">Donate</a>        
            <div class="dropdown_1column-a">
                    <div class="col_1">
                        <ul class="nav-bullet mega-div-bottom">
<li><a href="http://ocw.mit.edu/donate/">Make a Donation</a></li>
                            <li><a href="http://ocw.mit.edu/donate/why-donate/">Why Donate?</a></li>
                            <li><a href="http://ocw.mit.edu/donate/our-supporters/">Our Supporters</a></li>
                            <li><a href="http://ocw.mit.edu/donate/other-ways-to-contribute/">Other Ways to Contribute</a></li>
                            <li><a href="http://ocw.mit.edu/donate/shop-ocw">Shop OCW</a></li>
                        </ul>
<ul class="nav-bullet">
<li><a href="http://ocw.mit.edu/support/">Become a Corporate Sponsor</a></li>
                        </ul>
</div>
            </div>            
        </li>        
        <li>
            <a href="" class="drop">Featured Sites</a>        
            <div class="dropdown_1column-a">
                <div class="col_1">
                    <ul class="nav-bullet mega-div-bottom">
<li><a href="http://ocw.mit.edu/high-school/">Highlights for High School</a></li>
                        <li><a href="http://ocw.mit.edu/educator/">OCW Educator</a></li>
                        <li><a href="http://ocw.mit.edu/courses/crosslinks/">MIT Crosslinks and OCW</a></li>                        
                    </ul>
<ul class="nav-bullet mega-div-top">
<li><a href="http://ocw.mit.edu/ans7870/featured/mitx-courses-on-edx.htm">MITx Courses on edX</a></li>
                        <li><a href="http://teachingexcellence.mit.edu/">Teaching Excellence at MIT</a></li>
						<li><a href="http://www.oeconsortium.org/">Open Education Consortium</a></li>
                    </ul>
</div>
            </div>            
        </li>
    </ul>
</div>
<div id="search" role="search" class="grid_4 omega">
    
    <form method="get" action="../../../common/search/AdvancedSearch.htm">
     	 <table class="search"><tbody><tr>
<td class="black"><input type="text" onblur="fillSearchBox()" onfocus="clearSearchBox()" maxlength="255" value="Search" name="q" class="greytext searchField" id="terms"></td> 			 
                    <td class="black"><input type="image" src="../../../common/images/button_search.png" name="btnG" class="sub_button"></td>			 
                    <td class="text2"><a href="../../../common/search/AdvancedSearch.htm">Advanced<br>Search</a></td>
                </tr></tbody></table>
</form>
</div>
<div class="clear"></div>
<!--googleon: index-->
<!-- *end header* -->  

				
				
			</div>
<!-- top grid end -->
		</div>
<!-- top end -->
			
		<div id="center_media">
      	<div id="grid">
      		<div id="left">
        		<div id="breadcrumb_media">
                	<p>

    <a href="http://ocw.mit.edu/">Home</a>
    
        »
        
    
    
        
            <a href="http://ocw.mit.edu/courses">Courses</a>
            
                »
                
            
            
         
    
    
        
            <a href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science">Electrical Engineering and Computer Science</a>
            
                »
                
            
            
         
    
    
        
            <a href="../../../contents/index.htm">Introduction to Algorithms (SMA 5503)</a>
            
                »
                
            
            
         
    
    
        
            <a href="../../../contents/video-lectures/index.htm">Video Lectures</a>
            
                »
                
            
            
         
    
    
        
            
            
            Lecture 17: Shortest Paths I: Properties, Dijkstra's Algorithm, B
         
    
</p>

            	</div>
            	<div class="clear"></div>
        		<div id="media_title">
        		<h1 class="title" itemprop="name" property="dct:title">
        <span class="" id="parent-fieldname-title">
            Lecture 17: Shortest Paths I: Properties, Dijkstra's Algorithm, Breadth-first Search
        </span>
    </h1>
        		</div>
           		<div class="clear"></div>
           		<div id="course_wrapper_media">
           			<div id="course_nav">
           				<script language="javascript" type="text/javascript">
function toggleMenu(objID) {
  if (!document.getElementById) return;
  var ob = document.getElementById(objID);
  ob.className = (ob.className == 'selected')?'': 'selected';
}
function toggleClass(id)
{
  var divtoggleClass= document.getElementById(id);
  divtoggleClass.className = (divtoggleClass.className == 'mO')?'mC': 'mO';
  return false;
}
function changeAlt(id)
{
  id.alt = (id.alt == 'Expand Menu')?'Collapse Menu' : 'Expand Menu';
  id.title = (id.title == 'Expand Menu')?'Collapse Menu' : 'Expand Menu';
}
</script><!--Left Nav Starts --><ul>
<li class="">
			   			<a href="../../../contents/index.htm">
		                  Course Home  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/syllabus/index.htm">
		                  Syllabus  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/calendar/index.htm">
		                  Calendar  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/readings/index.htm">
		                  Readings  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/assignments/index.htm">
		                  Assignments  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/exams/index.htm">
		                  Exams  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="selected">
			   			<a href="../../../contents/video-lectures/index.htm">
		                  Video Lectures  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    
		    
         	
	<!--second tal block close-->  
	
</ul>
<!--Left Nav Ends -->
</div>
           			<div id="course_inner_media">
      					 
        <div class="" id="parent-fieldname-text">
            
            
        </div>
    
      					 

<script type="text/javascript">var caption_embed_1 ={'English - US': '/courses/electrical-engineering-and-computer-science/6-046j-introduction-to-algorithms-sma-5503-fall-2005/video-lectures/lecture-17-shortest-paths-i-properties-dijkstras-algorithm-breadth-first-search/xhG2DyCX3uA.srt'}</script><div id="media-embed">
         <div class="attention_message" id="embed_1">
<p>Flash and JavaScript are required for this feature.</p>
<p>Download the video from <a href="https://itunes.apple.com/us/itunes-u/id341597754">iTunes U</a> or the <a href="http://www.archive.org/download/MIT6.046JF05MPEG4/ocw-6.046-14nov2005-220k.mp4">Internet Archive</a>.</p>
</div>
     </div>
    
     <script type="text/javascript">ocw_embed_chapter_media('embed_1', 'http://www.youtube.com/v/xhG2DyCX3uA', 'youtube', '/courses/electrical-engineering-and-computer-science/6-046j-introduction-to-algorithms-sma-5503-fall-2005/video-lectures/lecture-17-shortest-paths-i-properties-dijkstras-algorithm-breadth-first-search', 'http://img.youtube.com/vi/xhG2DyCX3uA/0.jpg',0,0, 'http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-046j-introduction-to-algorithms-sma-5503-fall-2005/video-lectures/lecture-17-shortest-paths-i-properties-dijkstras-algorithm-breadth-first-search/xhG2DyCX3uA.srt')</script><div id="transcript1"></div>
				 <script type="text/javascript">setThreePlayTranscriptPlugin(2, 703406)</script><script type="text/javascript" src="http://p3.3playmedia.com/p3.js"></script><div id="media_resource_next_prev_nav" style="margin-top: 1em;">
        <p>
        
            <a href="../../../contents/video-lectures/lecture-16-greedy-algorithms-minimum-spanning-trees/index.htm">
                <img src="../../../common/images/btn_previous_resource.png" style="margin: 0 30px 0 50px;" alt="Previous track" title="Previous track"></a>
     	
     	
        
            <a href="../../../contents/video-lectures/lecture-18-shortest-paths-ii-bellman-ford-linear-programming-difference-constraints/index.htm"> 
                <img src="../../../common/images/btn_next_resource.png" alt="Next track" title="Next track"></a>
       
       </p>
     </div>
 


<script type="text/javascript">
		window.onload=function(){
		init();
		
		}
		var tabLinks = new Array();
		var contentDivs = new Array();
		function init() {
		  // Grab the tab links and content divs from the page
		  var tabListItems = document.getElementById('tabs').childNodes;
		  for ( var i = 0; i < tabListItems.length; i++ ) {
			if ( tabListItems[i].nodeName == "LI" ) {
			  var tabLink = getFirstChildWithTagName( tabListItems[i], 'A' );
			  var id = getHash( tabLink.getAttribute('href') );
			  tabLinks[id] = tabLink;
			  contentDivs[id] = document.getElementById( id );
			}
		  }
		  // Assign onclick events to the tab links, and
		  // highlight the first tab
		  var i = 0;
		  for ( var id in tabLinks ) {
			tabLinks[id].onclick = showTab;
			tabLinks[id].onfocus = function() { this.blur() };
			if ( i == 0 ) tabLinks[id].className = 'selected';
			i++;
		  }
		  // Hide all content divs except the first
		  var i = 0;
		  for ( var id in contentDivs ) {
			if ( i != 0 ) contentDivs[id].className = 'tabContent hide';
			i++;
		  }
		}
		function showTab() {
		  var selectedId = getHash( this.getAttribute('href') );
		  // Highlight the selected tab, and dim all others.
		  // Also show the selected content div, and hide all others.
		  for ( var id in contentDivs ) {
			if ( id == selectedId ) {
			  tabLinks[id].className = 'selected';
			  contentDivs[id].className = 'tabContent';
			} else {
			  tabLinks[id].className = '';
			  contentDivs[id].className = 'tabContent hide';
			}
		  }
		  // Stop the browser following the link
		  return false;
		}
		function getFirstChildWithTagName( element, tagName ) {
		  for ( var i = 0; i < element.childNodes.length; i++ ) {
			if ( element.childNodes[i].nodeName == tagName ) return element.childNodes[i];
		  }
		}
		function getHash( url ) {
		  var hashPos = url.lastIndexOf ( '#' );
		  return url.substring( hashPos + 1 );
		}
 </script><div id="media_tabs">
     
        <ul id="tabs">
<li class="first">
                <a href="#vid_about" class="selected">About this Video</a>
            </li>
            <li class="">
                <a href="#vid_index" class="">Playlist</a>
            </li>
            <li class="">
                <a href="#vid_playlist" class="">Related Resources</a>
            </li>
            <li class="">
                <a href="#vid_related" class="">Transcript</a>
            </li>
            <li class="">
                <a href="#vid_transcript" class="">Download this Video</a>
            </li>
        </ul>
<div id="vid_about" itemprop="description" class="tabContent">
<p><strong>Topics covered:</strong> Shortest Paths I: Properties, Dijkstra's Algorithm, Breadth-first Search</p>
<p><strong>Instructors</strong>: Prof. Erik Demaine, Prof. Charles Leiserson</p>
</div>
        <div id="vid_index" itemprop="description" class="tabContent hide">
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-1-administrivia-introduction-analysis-of-algorithms-insertion-sort-mergesort/index.htm">
<img src="../../../contents/video-lectures/lecture-1-administrivia-introduction-analysis-of-algorithms-insertion-sort-mergesort/6_046J_lec01_th.jpg" title="Lecture 1: Administrivia; Introduction; Analysis of Algorithms, Insertion Sort, Mergesort" alt="Lecture 1: Administrivia; Introduction; Analysis of Algorithms, Insertion Sort, Mergesort"><p>Lecture 1: Administrivia; I...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-2-asymptotic-notation-recurrences-substitution-master-method/index.htm">
<img src="../../../contents/video-lectures/lecture-2-asymptotic-notation-recurrences-substitution-master-method/6_046J_lec02_th.jpg" title="Lecture 2: Asymptotic Notation; Recurrences; Substitution, Master Method" alt="Lecture 2: Asymptotic Notation; Recurrences; Substitution, Master Method"><p>Lecture 2: Asymptotic Notat...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-3-divide-and-conquer-strassen-fibonacci-polynomial-multiplication/index.htm">
<img src="../../../contents/video-lectures/lecture-3-divide-and-conquer-strassen-fibonacci-polynomial-multiplication/6_046J_lec03_th.jpg" title="Lecture 3: Divide-and-Conquer: Strassen, Fibonacci, Polynomial Multiplication" alt="Lecture 3: Divide-and-Conquer: Strassen, Fibonacci, Polynomial Multiplication"><p>Lecture 3: Divide-and-Conqu...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-4-quicksort-randomized-algorithms/index.htm">
<img src="../../../contents/video-lectures/lecture-4-quicksort-randomized-algorithms/6_046J_lec04_th.jpg" title="Lecture 4: Quicksort, Randomized Algorithms" alt="Lecture 4: Quicksort, Randomized Algorithms"><p>Lecture 4: Quicksort, Rando...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-5-linear-time-sorting-lower-bounds-counting-sort-radix-sort/index.htm">
<img src="../../../contents/video-lectures/lecture-5-linear-time-sorting-lower-bounds-counting-sort-radix-sort/6_046J_lec05_th.jpg" title="Lecture 5: Linear-time Sorting: Lower Bounds, Counting Sort, Radix Sort" alt="Lecture 5: Linear-time Sorting: Lower Bounds, Counting Sort, Radix Sort"><p>Lecture 5: Linear-time Sort...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-6-order-statistics-median/index.htm">
<img src="../../../contents/video-lectures/lecture-6-order-statistics-median/6_046J_lec06_th.jpg" title="Lecture 6: Order Statistics, Median" alt="Lecture 6: Order Statistics, Median"><p>Lecture 6: Order Statistics...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-7-hashing-hash-functions/index.htm">
<img src="../../../contents/video-lectures/lecture-7-hashing-hash-functions/6_046J_lec07_th.jpg" title="Lecture 7: Hashing, Hash Functions" alt="Lecture 7: Hashing, Hash Functions"><p>Lecture 7: Hashing, Hash Fu...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-8-universal-hashing-perfect-hashing/index.htm">
<img src="../../../contents/video-lectures/lecture-8-universal-hashing-perfect-hashing/6_046J_lec08_th.jpg" title="Lecture 8: Universal Hashing, Perfect Hashing" alt="Lecture 8: Universal Hashing, Perfect Hashing"><p>Lecture 8: Universal Hashin...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-9-relation-of-bsts-to-quicksort-analysis-of-random-bst/index.htm">
<img src="../../../contents/video-lectures/lecture-9-relation-of-bsts-to-quicksort-analysis-of-random-bst/6_046J_lec09_th.jpg" title="Lecture 9: Relation of BSTs to Quicksort - Analysis of Random BST" alt="Lecture 9: Relation of BSTs to Quicksort - Analysis of Random BST"><p>Lecture 9: Relation of BSTs...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-10-red-black-trees-rotations-insertions-deletions/index.htm">
<img src="../../../contents/video-lectures/lecture-10-red-black-trees-rotations-insertions-deletions/6_046J_lec10_th.jpg" title="Lecture 10: Red-black Trees, Rotations, Insertions, Deletions" alt="Lecture 10: Red-black Trees, Rotations, Insertions, Deletions"><p>Lecture 10: Red-black Trees...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-11-augmenting-data-structures-dynamic-order-statistics-interval-trees/index.htm">
<img src="../../../contents/video-lectures/lecture-11-augmenting-data-structures-dynamic-order-statistics-interval-trees/6_046J_lec11_th.jpg" title="Lecture 11: Augmenting Data Structures, Dynamic Order Statistics, Interval Trees" alt="Lecture 11: Augmenting Data Structures, Dynamic Order Statistics, Interval Trees"><p>Lecture 11: Augmenting Data...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-12-skip-lists/index.htm">
<img src="../../../contents/video-lectures/lecture-12-skip-lists/6_046J_lec12_th.jpg" title="Lecture 12: Skip Lists" alt="Lecture 12: Skip Lists"><p>Lecture 12: Skip Lists</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-13-amortized-algorithms-table-doubling-potential-method/index.htm">
<img src="../../../contents/video-lectures/lecture-13-amortized-algorithms-table-doubling-potential-method/6_046J_lec13_th.jpg" title="Lecture 13: Amortized Algorithms, Table Doubling, Potential Method" alt="Lecture 13: Amortized Algorithms, Table Doubling, Potential Method"><p>Lecture 13: Amortized Algor...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-14-competitive-analysis-self-organizing-lists/index.htm">
<img src="../../../contents/video-lectures/lecture-14-competitive-analysis-self-organizing-lists/6_046J_lec14_th.jpg" title="Lecture 14: Competitive Analysis: Self-organizing Lists" alt="Lecture 14: Competitive Analysis: Self-organizing Lists"><p>Lecture 14: Competitive Ana...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-15-dynamic-programming-longest-common-subsequence/index.htm">
<img src="../../../contents/video-lectures/lecture-15-dynamic-programming-longest-common-subsequence/6_046J_lec15_th.jpg" title="Lecture 15: Dynamic Programming, Longest Common Subsequence" alt="Lecture 15: Dynamic Programming, Longest Common Subsequence"><p>Lecture 15: Dynamic Program...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-16-greedy-algorithms-minimum-spanning-trees/index.htm">
<img src="../../../contents/video-lectures/lecture-16-greedy-algorithms-minimum-spanning-trees/6_046J_lec16_th.jpg" title="Lecture 16: Greedy Algorithms, Minimum Spanning Trees" alt="Lecture 16: Greedy Algorithms, Minimum Spanning Trees"><p>Lecture 16: Greedy Algorith...</p></a>
</div>
<div class="related-media-thumbnail-nolink">
<div class="now-playing-resource">Now Playing</div>
<img src="../../../contents/video-lectures/lecture-17-shortest-paths-i-properties-dijkstras-algorithm-breadth-first-search/6_046J_lec17_th.jpg" title="Lecture 17: Shortest Paths I: Properties, Dijkstra's Algorithm, Breadth-first Search" alt="Lecture 17: Shortest Paths I: Properties, Dijkstra's Algorithm, Breadth-first Search"><p>Lecture 17: Shortest Paths ...</p>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-18-shortest-paths-ii-bellman-ford-linear-programming-difference-constraints/index.htm">
<img src="../../../contents/video-lectures/lecture-18-shortest-paths-ii-bellman-ford-linear-programming-difference-constraints/6_046J_lec18_th.jpg" title="Lecture 18: Shortest Paths II: Bellman-Ford, Linear Programming, Difference Constraints" alt="Lecture 18: Shortest Paths II: Bellman-Ford, Linear Programming, Difference Constraints"><p>Lecture 18: Shortest Paths ...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-19-shortest-paths-iii-all-pairs-shortest-paths-matrix-multiplication-floyd-warshall-johnson/index.htm">
<img src="../../../contents/video-lectures/lecture-19-shortest-paths-iii-all-pairs-shortest-paths-matrix-multiplication-floyd-warshall-johnson/6_046J_lec19_th.jpg" title="Lecture 19: Shortest Paths III: All-pairs Shortest Paths, Matrix Multiplication, Floyd-Warshall, Johnson" alt="Lecture 19: Shortest Paths III: All-pairs Shortest Paths, Matrix Multiplication, Floyd-Warshall, Johnson"><p>Lecture 19: Shortest Paths ...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-22-advanced-topics/index.htm">
<img src="../../../contents/video-lectures/lecture-22-advanced-topics/6_046J_lec22_th.jpg" title="Lecture 22: Advanced Topics" alt="Lecture 22: Advanced Topics"><p>Lecture 22: Advanced Topics</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-23-advanced-topics-cont./index.htm">
<img src="../../../contents/video-lectures/lecture-23-advanced-topics-cont./6_046J_lec23_th.jpg" title="Lecture 23: Advanced Topics (cont.)" alt="Lecture 23: Advanced Topics (cont.)"><p>Lecture 23: Advanced Topics...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-24-advanced-topics-cont./index.htm">
<img src="../../../contents/video-lectures/lecture-24-advanced-topics-cont./6_046J_lec24_th.jpg" title="Lecture 24: Advanced Topics (cont.)" alt="Lecture 24: Advanced Topics (cont.)"><p>Lecture 24: Advanced Topics...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-25-advanced-topics-cont.-discussion-of-follow-on-classes/index.htm">
<img src="../../../contents/video-lectures/lecture-25-advanced-topics-cont.-discussion-of-follow-on-classes/6_046J_lec25_th.jpg" title="Lecture 25: Advanced Topics (cont.) - Discussion of Follow-on Classes" alt="Lecture 25: Advanced Topics (cont.) - Discussion of Follow-on Classes"><p>Lecture 25: Advanced Topics...</p></a>
</div>
</div>
        <div id="vid_playlist" itemprop="description" class="tabContent hide">
<h2 class="subhead">Related Resources</h2>
<p>Lecture Notes (<a target="_blank" href="../../../contents/video-lectures/lecture-17-shortest-paths-i-properties-dijkstras-algorithm-breadth-first-search/lec17.pdf">PDF</a>)<br><a target="_blank" href="../../../contents/assignments/index.htm">Assignments</a><br><a target="_blank" href="../../../contents/exams/index.htm">Exams</a></p>
</div>
        <div id="vid_related" itemprop="description" class="tabContent hide">
<ul><li><a class="transcript-link" title="Open in a new window." alt="Open in a new window." style="text-decoration: none; font-size: 1.0em;" target="_blank" text-decoration: none font-size: href="../../../contents/video-lectures/lecture-17-shortest-paths-i-properties-dijkstras-algorithm-breadth-first-search/xhG2DyCX3uA.pdf"> Download this transcript - PDF (English - US)</a></li></ul>
<p><span m="7000">We're going to talk about shortest paths,</span> <span m="10000">and we're going to talk about shortest paths for three</span> <span m="14000">lectures. So, this is a trilogy.</span> </p>
<p><span m="17000">Today will be Shortest Paths One.</span> </p>
<p><span m="20000">I've been watching far too many versions of Star Wars this</span> <span m="25000">weekend. I saw the musical yesterday,</span> <span m="28000">matinee. That was an MIT musical.</span> </p>
<p><span m="31000">That was fun, of all three movies in about</span> <span m="35000">four hours. That was a bit long and then I</span> <span m="38000">saw the one-man show on Friday. One-man Star Wars:</span> <span m="42000">the original three movies in one hour.</span> </p>
<p><span m="45000">That was the opposite of too long.</span> </p>
<p><span m="48000">Both were fun. So I get my trilogy fix.</span> </p>
<p><span m="51000">All episodes, first we're going to start with</span> <span m="54000">The New Hope, and we're going to talk about</span> <span m="58000">the shortest paths problem and solve one particular problem of</span> <span m="62000">it, a very interesting version. And then we're going to look at</span> <span m="69000">increasingly more general versions as we go on.</span> </p>
<p><span m="72000">Shortest paths are sort of an application of dynamic</span> <span m="75000">programming, which we saw last week, and greedy algorithms,</span> <span m="79000">which we also saw last week. So, were going to build that</span> <span m="83000">and get some pretty interesting algorithms for an important</span> <span m="87000">problem, which is how to get from Alderon to,</span> <span m="90000">I don't know, Cambridge as quickly as</span> <span m="93000">possible, OK, when you live in a graph.</span> </p>
<p><span m="97000">So, there's geometric shortest paths which is a little bit</span> <span m="101000">harder. Here, we're just going to look</span> <span m="104000">at shortest paths in graphs. Now, hopefully you all know</span> <span m="108000">what a path in a graph is. But, so, very quick review in</span> <span m="112000">particular because we're going to be looking at weighted</span> <span m="116000">graphs. So, the usual setup:</span> <span m="119000">suppose we have directed graph, G, have some vertices,</span> <span m="123000">some edges. We have edge weights,</span> <span m="127000">make it a little more interesting.</span> </p>
<p><span m="132000">So, this is just a real number on each edge.</span> </p>
<p><span m="138000">So, edge weights are usually given by function,</span> <span m="145000">w. For every edge,</span> <span m="147000">you get a real number.</span> </p>
<p><span m="160000">And then, if we look at the paths in the graph,</span> <span m="163000">so we're going to use some simple notation for paths called</span> <span m="167000">a path, p, starts at some vertex, and it goes to some</span> <span m="171000">other vertex, and so on.</span> </p>
<p><span m="172000">Say the last vertex is v_k, and each of these should be a</span> <span m="176000">directed edge in the digraph. So, this is a directed path.</span> </p>
<p><span m="180000">It has to respect edges in here.</span> </p>
<p><span m="184000">And, we'll say that the weight of such a path is just the sum</span> <span m="190000">of the weights of the edges along the path.</span> </p>
<p><span m="194000">And, we'll call that w(p). This is sum,</span> <span m="198000">i equals one to k minus one of w(v_i, v_(i+1)) plus one.</span> </p>
<p><span m="203000">OK, so just to rub it in, and in particular,</span> <span m="207000">how general this can be, we have some path,</span> <span m="212000">it starts at some vertex, there's some edge weights along</span> <span m="217000">the way. This is some arbitrary path in</span> <span m="222000">the graph, in some hypothetical graph.</span> </p>
<p><span m="238000">OK, this is mainly to point out that some of the edge weights</span> <span m="241000">could be negative. Some of them could be zero.</span> </p>
<p><span m="244000">This sum here is minus two. So, the weight of this path is</span> <span m="248000">minus two. And, presumably,</span> <span m="249000">the graph is much bigger than this.</span> </p>
<p><span m="252000">This is just one path in the graph.</span> </p>
<p><span m="254000">We're usually thinking about simple paths that can't repeat a</span> <span m="258000">vertex. But, sometimes we allow that.</span> </p>
<p><span m="260000">And then, what we care about is the shortest path,</span> <span m="263000">or a shortest path. Again, this may not be unique,</span> <span m="266000">but we'll still usually call it the shortest path.</span> </p>
<p><span m="271000">So, we want the shortest path from some A to some B.</span> </p>
<p><span m="276000">Or, we'll call the vertices u and v.</span> </p>
<p><span m="279000">And we want this to be some path of minimum possible weight,</span> <span m="285000">subject to starting at u, and going to v.</span> </p>
<p><span m="289000">OK, so that's what we're looking for.</span> </p>
<p><span m="293000">In general, give you a vertex, u, give you a vertex,</span> <span m="298000">v, find a shortest path as quickly as possible.</span> </p>
<p><span m="304000">What's a good algorithm for that?</span> </p>
<p><span m="306000">That's the topic for the next three lectures.</span> </p>
<p><span m="310000">We'll usually think about a slightly simpler problem,</span> <span m="315000">which is just computing the weight of that path,</span> <span m="319000">which is essentially computing the distance from A to B.</span> </p>
<p><span m="324000">So, we'll call this the shortest path weight from u to</span> <span m="328000">v. And, we'll denote it by delta</span> <span m="333000">of (u,v), delta . So, I mean, it's the weight of</span> <span m="338000">the shortest path, or a weight of every shortest</span> <span m="343000">path. Or, in other words,</span> <span m="345000">it's the Min over the weight of each path from u to v.</span> </p>
<p><span m="351000">So, p here is a path. OK, so you just consider,</span> <span m="356000">there could be a lot of different paths.</span> </p>
<p><span m="362000">There could, in principle,</span> <span m="364000">be infinitely many, if you're allowed to repeat</span> <span m="369000">vertices. You look at all those paths</span> <span m="373000">hypothetically. You take the minimum weight.</span> </p>
<p><span m="377000">Question? Good.</span> </p>
<p><span m="379000">My next question was going to be, when do shortest paths not</span> <span m="385000">exist? And you've hit upon one</span> <span m="388000">version, which is when you have negative edge weights.</span> </p>
<p><span m="396000">So, in principle, when you have negative edge</span> <span m="400000">weights, some shortest paths may not exist in the sense that</span> <span m="405000">there is no shortest paths. There are no shortest paths.</span> </p>
<p><span m="410000">There is no shortest path from u to v.</span> </p>
<p><span m="414000">OK, in particular, if I have two vertices,</span> <span m="418000">u and v, and I want the shortest path between them,</span> <span m="422000">and I have negative edge weights, well,</span> <span m="426000">this is fine. I mean, I can still compute the</span> <span m="432000">weight of a path that has negative weights.</span> </p>
<p><span m="437000">But when specifically won't I have a single shortest path from</span> <span m="444000">u to v? So, go ahead.</span> </p>
<p><span m="446000">Good. So, if I can find the cycle</span> <span m="449000">somewhere along here whose total weight, say, the sum of all the</span> <span m="454000">weights of these images is negative, then I get there,</span> <span m="457000">I go around as many times as I want.</span> </p>
<p><span m="460000">I keep decreasing the weight because the weight is negative.</span> </p>
<p><span m="464000">I decrease it by some fixed amount, and then I can go to v.</span> </p>
<p><span m="468000">So, as long as there is a negative weights cycle reachable</span> <span m="472000">from u that can also reach v, then there's no shortest path</span> <span m="476000">because if I take any particular path, I can make it shorter by</span> <span m="480000">going around a couple more times.</span> </p>
<p><span m="484000">So, in some sense, this is not really a minimum.</span> </p>
<p><span m="487000">It's more like an infimum for those who like to get fancy</span> <span m="491000">about such things. But we'll just say that delta</span> <span m="494000">of (u,v) is minus infinity in this case.</span> </p>
<p><span m="496000">There's a negative weights cycle from u to v.</span> </p>
<p><span m="499000">So, that's one case we have to worry about in some sense.</span> </p>
<p><span m="503000">But, as long as there are no negative weight cycles,</span> <span m="507000">delta of (u,v) will be something bigger than minus</span> <span m="510000">infinity, bounded below by some finite value even if you could</span> <span m="514000">have negative weights, but still no negative weights</span> <span m="518000">cycle for example, there might not be any cycles</span> <span m="521000">in your graph. So that's still interesting.</span> </p>
<p><span m="525000">And, I guess it's useful to note that you can get from A to</span> <span m="530000">B in negative infinite time. It's time travel,</span> <span m="533000">if the weights happen that correspond to time.</span> </p>
<p><span m="536000">But when else might shortest paths not exist?</span> </p>
<p><span m="540000">So, this is one case, but there's another,</span> <span m="544000">simpler case. It's not connected.</span> </p>
<p><span m="547000">There might not be any path from u to v.</span> </p>
<p><span m="552000">This path might be empty. There may be no path from u to</span> <span m="557000">v. Here we have to define what</span> <span m="561000">happens, and here, we'll say it's infinity if</span> <span m="565000">there's no path from u to v. So, there are these exceptional</span> <span m="572000">cases plus infinity and minus infinity, which are pretty</span> <span m="575000">intuitive because it takes a really long time to get from u</span> <span m="579000">to v if there's no path there. You can't get there from here.</span> </p>
<p><span m="584000">OK, but that's the definition. Most of the time,</span> <span m="587000">this is the case we care about, of course.</span> </p>
<p><span m="590000">Usually this is a finite set. OK, good, so that's the</span> <span m="593000">definition. We're going to get a few basic</span> <span m="596000">structural properties about shortest paths that will allow</span> <span m="600000">us to obtain good algorithms finding these paths when they</span> <span m="604000">exist. And, in particular,</span> <span m="607000">we want to use ideas from dynamic programming.</span> </p>
<p><span m="610000">So, if I want to use dynamic programming to solve shortest</span> <span m="614000">paths, what do I need to establish?</span> </p>
<p><span m="617000">What's the first thing I should check?</span> </p>
<p><span m="619000">You've all implemented dynamic programming by now,</span> <span m="623000">so should make complete sense hopefully, at least more sense</span> <span m="627000">than it did a couple of weeks ago, last week,</span> <span m="630000">when we learned it. Dynamic programming is</span> <span m="634000">something that grows on you. Every year I think I understand</span> <span m="639000">it better than the previous year.</span> </p>
<p><span m="642000">But, in particular, when you learned dynamic</span> <span m="645000">programming in this class, there is this nice key property</span> <span m="650000">that you should check. Yeah?</span> </p>
<p><span m="652000">Optimal substructure: good.</span> </p>
<p><span m="654000">This is the phrase you should keep in mind.</span> </p>
<p><span m="658000">It's not really enough for dynamic programming to be useful</span> <span m="663000">in an efficient way, but it at least tells you that</span> <span m="667000">you should be able to try to apply it.</span> </p>
<p><span m="672000">That's a pretty weak statement, but it's something that you</span> <span m="675000">should check. It's definitely pretty much a</span> <span m="678000">necessary condition for dynamic programming to make sense.</span> </p>
<p><span m="682000">And so, optimal some structure here means that if I take some</span> <span m="686000">shortest path, and I look at a subpath of that</span> <span m="689000">shortest path, I claimed that it too is a</span> <span m="692000">shortest path, OK, with its respective</span> <span m="694000">endpoints; obviously not between the same endpoints.</span> </p>
<p><span m="699000">But if I have some shortest path between two endpoints,</span> <span m="703000">I take any subpath and that's also the shortest path.</span> </p>
<p><span m="707000">This is one version of optimal substructure.</span> </p>
<p><span m="711000">This one turns out to be true for this setup.</span> </p>
<p><span m="715000">And, how should I prove an optimal substructure property?</span> </p>
<p><span m="719000">Cut and paste. Yep, that works here too.</span> </p>
<p><span m="724000">I mean, this isn't always true. But it's a good technique here.</span> </p>
<p><span m="729000">So, we're going to think about, and I'll do essentially a proof</span> <span m="734000">by picture here. So, suppose you have some</span> <span m="737000">subpath of some shortest path. So, let's say the subpath is x</span> <span m="742000">to y. And, the path goes from u to v.</span> </p>
<p><span m="745000">So, we assume that (u,v) is a shortest path.</span> </p>
<p><span m="750000">We want to prove that (x,y) is a shortest path.</span> </p>
<p><span m="753000">Well, suppose (x,y) isn't a shortest path.</span> </p>
<p><span m="756000">Then there is some shorter path that goes from x to y.</span> </p>
<p><span m="760000">But, if you have some shorter path from x to y than this one.</span> </p>
<p><span m="765000">Then I should just erase this part of the shortest path from u</span> <span m="769000">to v, and replace it with this shorter one.</span> </p>
<p><span m="772000">So, this is some hypothetical shorter path.</span> </p>
<p><span m="776000">So, suppose this existed. If that existed,</span> <span m="779000">then I should just cut the old path from x to y,</span> <span m="782000">and paste in this new one from x to y.</span> </p>
<p><span m="787000">It's strictly shorter. Therefore, I get a strictly</span> <span m="790000">shorter path from u to v. But I assumed u to v was a</span> <span m="794000">shortest path: contradiction.</span> </p>
<p><span m="796000">OK, so there is no shorter path.</span> </p>
<p><span m="798000">And that proves the lemma that we have this:</span> <span m="801000">subpaths of shortest paths are shortest paths.</span> </p>
<p><span m="805000">OK, this should now be a pretty familiar proof technique.</span> </p>
<p><span m="809000">But, there is yet another instance of cut and paste.</span> </p>
<p><span m="814000">OK, so that's a good sign for computing shortest paths.</span> </p>
<p><span m="816000">I mean, in terms of dynamic programming, we won't look</span> <span m="819000">directly at dynamic programming here because we are going to aim</span> <span m="822000">for greedy, which is even stronger.</span> </p>
<p><span m="824000">But, next Monday we'll see some dynamic programming approaches.</span> </p>
<p><span m="827000">Intuitively, there are some pretty natural</span> <span m="829000">sub-problems here. I mean, going from u to v,</span> <span m="832000">if I want to find what is the shortest path from u to v,</span> <span m="835000">well, that's a particular problem.</span> </p>
<p><span m="836000">Maybe it involves computing shortest paths from u to some</span> <span m="839000">intermediate point, x, and then from x to u,</span> <span m="841000">something like that. That feels good.</span> </p>
<p><span m="845000">That's like, quadratically,</span> <span m="847000">many subproblems. And, V^2 subproblems,</span> <span m="851000">it sounds like that would lead to a dynamic program.</span> </p>
<p><span m="856000">You can make it work out; it's just a little bit trickier</span> <span m="861000">than that. We'll see that next Monday.</span> </p>
<p><span m="865000">But thinking about this intermediate point we get</span> <span m="869000">something called the triangle inequality.</span> </p>
<p><span m="875000">So, you've probably heard some form of the triangle inequality</span> <span m="880000">before. It holds in all sorts of</span> <span m="882000">geometric spaces, but it also holds for shortest</span> <span m="886000">paths, which is slightly less obvious, or more obvious,</span> <span m="891000">I guess, depending on your inclination.</span> </p>
<p><span m="894000">So, if you have any triple of vertices, the shortest path from</span> <span m="899000">u to v is, at most, the shortest path from u to x</span> <span m="903000">plus the shortest path from x to v.</span> </p>
<p><span m="908000">Of course, here I need a shortest path weight from u to</span> <span m="910000">x, and shortest path weight from x to v.</span> </p>
<p><span m="912000">So, this should be pretty natural just from the statement,</span> <span m="915000">even more natural if you draw the picture.</span> </p>
<p><span m="918000">So, we have some vertex, u.</span> </p>
<p><span m="919000">I'm using wiggly lines to denote potentially long paths as</span> <span m="922000">opposed to edges. We have some intermediate</span> <span m="924000">point, x, and we have some target, v, and we are</span> <span m="927000">considering these three shortest paths.</span> </p>
<p><span m="930000">This is the shortest path from u to v, or this is its weights.</span> </p>
<p><span m="935000">This is the shortest path from u to x.</span> </p>
<p><span m="938000">And here's its weight, and the shortest path from x to</span> <span m="942000">v. And here's its weight.</span> </p>
<p><span m="944000">And, the point is, this should be the shortest</span> <span m="948000">path or a shortest path from u to v.</span> </p>
<p><span m="951000">And, in particular, one such path is you go from u</span> <span m="955000">to x, and then you go from x to v.</span> </p>
<p><span m="960000">So, I mean, this sum is just measuring the length of this</span> <span m="964000">particular path. Take the shortest path here;</span> <span m="967000">take the shortest path here. And, this is supposed to be the</span> <span m="972000">Min over all paths. So, certainly this is,</span> <span m="975000">at most, this particular path, the sum of these two values,</span> <span m="979000">OK, another proof by picture. Clear?</span> </p>
<p><span m="982000">OK, this stuff is easy. I assume we'll get into some</span> <span m="986000">more set exciting algorithms in particular, which is always more</span> <span m="991000">exciting. Today, we're going to look at a</span> <span m="996000">particular version of shortest paths called,</span> <span m="1001000">or the shortest paths problem called the single source</span> <span m="1006000">shortest path problem. OK, it's a little bit more</span> <span m="1011000">general than go from A to B. The problem is,</span> <span m="1016000">you're given a source vertex, and you want to know how to get</span> <span m="1023000">from that source vertex to everywhere else.</span> </p>
<p><span m="1029000">So, we'll call this source vertex s.</span> </p>
<p><span m="1032000">And from that source, we want to find,</span> <span m="1035000">let's say, the shortest path weights from s to everyone.</span> </p>
<p><span m="1041000">In particular, we'd also like to know the</span> <span m="1044000">shortest paths, but that isn't too much harder.</span> </p>
<p><span m="1050000">So, that's delta of s, v for all vertices,</span> <span m="1053000">v. OK, so this is actually a</span> <span m="1055000">little bit harder than the problem we started with a</span> <span m="1059000">getting from Alderon to Cambridge.</span> </p>
<p><span m="1061000">Now, we want to get from Alderon to the entire universe.</span> </p>
<p><span m="1066000">OK, it turns out, this is one of the weird things</span> <span m="1070000">about shortest paths, according to the</span> <span m="1073000">state-of-the-art we know today, it seems like the following</span> <span m="1077000">statement will remain true for all time.</span> </p>
<p><span m="1082000">But we don't know. The best algorithms for solving</span> <span m="1085000">the A to B problem, given s, given t,</span> <span m="1088000">go from s to t, is no easier than this problem.</span> </p>
<p><span m="1091000">It's the best ways we know how to solve going from A to B is to</span> <span m="1095000">solve how to go from A to everywhere else.</span> </p>
<p><span m="1098000">So, we sort of can't help ourselves, but to solve this</span> <span m="1102000">problem it turns out. Today, we're going to look at a</span> <span m="1106000">further restriction on this problem because this is a bit</span> <span m="1110000">tricky. Will solve it next class.</span> </p>
<p><span m="1114000">But, today we're going to get rid of the negative weight cycle</span> <span m="1119000">issue by forbidding negative weights.</span> </p>
<p><span m="1122000">So, we're going to assume that all of the edge weights are</span> <span m="1127000">nonnegative, so, for all vertices,</span> <span m="1130000">u and v. So, in particular,</span> <span m="1133000">shortest paths exist, provided paths exist.</span> </p>
<p><span m="1152000">And, we don't have to worry about these minus infinities.</span> </p>
<p><span m="1155000">Delta of (u,v) is always bigger than minus infinity.</span> </p>
<p><span m="1158000">It still might be plus infinity if there is no path,</span> <span m="1161000">but this will make life a lot easier.</span> </p>
<p><span m="1163000">And the algorithm we'll cover today really requires this</span> <span m="1166000">property. You can't get away without it.</span> </p>
<p><span m="1170000">Next class, we'll get away without it with a fancier and</span> <span m="1176000">slower algorithm. So, as I hinted at,</span> <span m="1180000">the main idea we're going to use for the algorithm today is</span> <span m="1187000">greedy, which should be faster than dynamic programming</span> <span m="1194000">generally. And, the tricky part will be</span> <span m="1198000">proving that the greedy algorithm actually works.</span> </p>
<p><span m="1206000">So, I think there's pretty much only one natural way to go</span> <span m="1211000">about, well, there's one way that works to go about greedy,</span> <span m="1216000">let's say. This may be not the obvious</span> <span m="1219000">one. So, let me give you a little</span> <span m="1222000">bit of setup. The invariant we are going to</span> <span m="1226000">maintain is that at all times, we have estimates on the</span> <span m="1231000">distances from the source to every vertex.</span> </p>
<p><span m="1236000">When I say distance, I mean shortest path weight.</span> </p>
<p><span m="1239000">I'm going to use weight and distance interchangeably here</span> <span m="1243000">for more intuition. And, in particular,</span> <span m="1246000">I want to maintain the set of vertices where those estimates</span> <span m="1250000">are actually the right answer.</span> </p>
<p><span m="1270000">OK, this is little s. This is big S.</span> </p>
<p><span m="1273000">So, the big S will be the set of all vertices where I know the</span> <span m="1278000">answer. What is the shortest path</span> <span m="1281000">distance from little S to that vertex in big S?</span> </p>
<p><span m="1285000">So, for starters, which distance do I know?</span> </p>
<p><span m="1289000">Sorry? s.</span> </p>
<p><span m="1291000">I know the shortest path distance from s to s because if</span> <span m="1294000">I assume that all of my weights are nonnegative,</span> <span m="1297000">I really can't get from s to s any faster than not doing</span> <span m="1300000">anything. OK, if I had a negative weight</span> <span m="1303000">cycle, maybe the distance from s to s is minus infinity.</span> </p>
<p><span m="1306000">OK, but I can't have negative weights so there's no way I can</span> <span m="1310000">get from s to s any faster than zero time.</span> </p>
<p><span m="1313000">There might be a longer path that still has zero cost,</span> <span m="1316000">but it can't be any better than zero.</span> </p>
<p><span m="1320000">So, in particular, I know that.</span> </p>
<p><span m="1322000">So, initially, S is certainly an s.</span> </p>
<p><span m="1325000">OK, and the idea is we're going to accumulate more and more</span> <span m="1329000">vertices that we know. So, at some point we know the</span> <span m="1334000">distances from some of the vertices.</span> </p>
<p><span m="1336000">So, we have some cloud here. This is S, and this is</span> <span m="1341000">everything else. This is the graph,</span> <span m="1343000">G. This is the subset of the</span> <span m="1346000">vertices. And, there's some edges that go</span> <span m="1349000">out from there. And, so we have estimates on</span> <span m="1353000">how to get to these vertices. Some of them,</span> <span m="1356000">we may not have even seen yet. They may not be connected to</span> <span m="1359000">this portion of S. I mean: not directly.</span> </p>
<p><span m="1362000">They might be connected by some longer path.</span> </p>
<p><span m="1364000">They might be in a completely different connected component.</span> </p>
<p><span m="1368000">We don't know yet. Some of them,</span> <span m="1370000">we have estimates for because we've sort of seen how to get</span> <span m="1373000">there from S. And the idea is,</span> <span m="1375000">among all of these nodes where we have estimates,</span> <span m="1378000">and on to get from little S, which is some vertex in here,</span> <span m="1381000">to these vertices, we're going to take the one for</span> <span m="1384000">which the estimate is smallest. That's the greedy choice.</span> </p>
<p><span m="1390000">And, we're just going to add that vertex to S.</span> </p>
<p><span m="1395000">So, S grows one vertex per step.</span> </p>
<p><span m="1398000">Each step, we're going to add to S, the vertex.</span> </p>
<p><span m="1403000">Of course, again, this is not a unique,</span> <span m="1407000">it's a vertex, v, in V minus S.</span> </p>
<p><span m="1412000">So, it's something we haven't yet computed yet whose estimated</span> <span m="1419000">distance from S is minimum. So, we look at all the vertices</span> <span m="1427000">we haven't yet added to S. Just take the one where we have</span> <span m="1435000">the estimated smallest distance. The intuition is that that</span> <span m="1441000">should be a good choice. So, if I pick the one that's</span> <span m="1443000">closest to little s among all the ones that I've seen,</span> <span m="1446000">among all the paths that I've seen, I sort of have to buy into</span> <span m="1449000">that those are good paths. But, I mean,</span> <span m="1451000">maybe there's some path I didn't see.</span> </p>
<p><span m="1453000">Maybe you go out to here and then you take some other path to</span> <span m="1456000">some vertex, which we've already seen.</span> </p>
<p><span m="1458000">OK, the worry is, well, I'd better not say that</span> <span m="1460000">that's the shortest path because there may have been some other</span> <span m="1463000">way to get there. Right, as soon as I add</span> <span m="1465000">something to S, I declare I've solved the</span> <span m="1467000">problem for that vertex. I can't change my answer later.</span> </p>
<p><span m="1472000">OK, the estimates can change until they get added to S.</span> </p>
<p><span m="1475000">So, I don't want to add this vertex to S because I haven't</span> <span m="1479000">considered this path. Well, if all my weights are</span> <span m="1483000">nonnegative, and I take the vertex here that has the</span> <span m="1487000">shortest estimate from S, so let's suppose this one is</span> <span m="1490000">the shortest one, then this can't be a shorter</span> <span m="1494000">path because the distance estimate, at least,</span> <span m="1497000">from S to that vertex is larger from S to that vertex.</span> </p>
<p><span m="1502000">So, no way can I make the path longer and decrease the</span> <span m="1505000">distance. That's the intuition.</span> </p>
<p><span m="1507000">OK, it's a little bit fuzzy here because I don't have any</span> <span m="1510000">induction hypotheses set up, and it's going to be a lot more</span> <span m="1514000">work to prove that. But that's the intuition why</span> <span m="1517000">this is the right thing to do. OK, you have to prove something</span> <span m="1521000">about the distance estimates for that to be a proof.</span> </p>
<p><span m="1525000">But, intuitively, it feels good.</span> </p>
<p><span m="1527000">It was a good starting point. OK, and then presumably we have</span> <span m="1532000">to maintain these distance estimates.</span> </p>
<p><span m="1534000">So, the heart of the algorithm is updating distance estimates,</span> <span m="1538000">I mean, choosing the best vertex to add to S,</span> <span m="1541000">that's one step. Then, updating the distance</span> <span m="1544000">estimates is sort of where the work is.</span> </p>
<p><span m="1546000">And, it turns out we'll only need to update distance</span> <span m="1550000">estimates of some of the vertices, the ones that are</span> <span m="1553000">adjacent to v. v was the vertex we just added</span> <span m="1556000">to S. So, once we add somebody to S,</span> <span m="1559000">so we grow S by a little bit, then we look at all the new</span> <span m="1562000">edges that go out of S from that vertex.</span> </p>
<p><span m="1567000">We update something. That's the idea.</span> </p>
<p><span m="1574000">So, that's the idea for how we're going to use greedy.</span> </p>
<p><span m="1584000">Now I'll give you the algorithm.</span> </p>
<p><span m="1592000">So, this is called Dijkstra's algorithm.</span> </p>
<p><span m="1600000">Dijkstra is a famous, recently late,</span> <span m="1607000">if that makes sense, computer scientist from the</span> <span m="1617000">Netherlands. And, this is probably the</span> <span m="1624000">algorithm he is most famous for. So, the beginning of the</span> <span m="1632000">algorithm is just some initialization,</span> <span m="1638000">not too exciting. OK, but let me tell you what</span> <span m="1644000">some of the variables mean. OK, so d is some array indexed</span> <span m="1654000">by vertices, and the idea is that d of x is the distance</span> <span m="1662000">estimate for x, so, from S to x.</span> </p>
<p><span m="1667000">so in particular, it's going to equal the real</span> <span m="1674000">shortest path weight from S to x when we've added x to our set</span> <span m="1683000">capital, S. OK, so this is,</span> <span m="1687000">in particular, going to be the output to the</span> <span m="1690000">algorithm. Did you have a question?</span> </p>
<p><span m="1691000">Or were you just stretching? Good.</span> </p>
<p><span m="1693000">So, in d of x, when we are done,</span> <span m="1695000">d of x is the output. For every vertex,</span> <span m="1697000">it's going to give us the shortest path weight from S to</span> <span m="1700000">that vertex. Along the way,</span> <span m="1701000">it's going to be some estimated distance from S to that vertex.</span> </p>
<p><span m="1704000">And, we're going to improve it over time.</span> </p>
<p><span m="1706000">This is an infinity. So initially,</span> <span m="1709000">we know that the distance, we know the distance from S to</span> <span m="1712000">S is zero. So, we're going to set that to</span> <span m="1715000">be our estimate. It's going to be accurate.</span> </p>
<p><span m="1717000">Everything else we're going to just set to infinity because we</span> <span m="1720000">may not be connected. From the beginning,</span> <span m="1723000">we don't know much. S, initially,</span> <span m="1725000">is going to be infinity. Immediately,</span> <span m="1727000">we're going to add little s to big S.</span> </p>
<p><span m="1729000">And then, the interesting part here is Q, which is going to</span> <span m="1732000">consist of, initially all the vertices in the graph.</span> </p>
<p><span m="1735000">And, it's going to not just be a queue as the letter suggests.</span> </p>
<p><span m="1740000">It's going to be a priority queue.</span> </p>
<p><span m="1743000">So, it's going to maintain, in particular,</span> <span m="1747000">the vertex that has the smallest distance estimate.</span> </p>
<p><span m="1752000">So, this is a priority queue. This is really an abuse of</span> <span m="1757000">notation for a data structure. OK, so this could be a heap or</span> <span m="1763000">whatever. The vertices are keyed on d,</span> <span m="1767000">our distance estimate. So, in particular,</span> <span m="1772000">S will have the, this is going to be a Min heap.</span> </p>
<p><span m="1775000">S will be the guy who has the minimum.</span> </p>
<p><span m="1778000">Everyone else has the same key initially.</span> </p>
<p><span m="1781000">And, we're going to repeatedly extract the minimum element from</span> <span m="1785000">this queue and do other things. OK, so this is initialization.</span> </p>
<p><span m="1790000">OK, I'm going to call that initialization.</span> </p>
<p><span m="1793000">It's a pretty simple thing. It just takes linear time,</span> <span m="1797000">nothing fancy going on. The heart of the algorithm is</span> <span m="1802000">all in six lines. And, so this is not really a</span> <span m="1806000">step. The first step here that we</span> <span m="1809000">need to do is we take the vertex whose distance estimate is</span> <span m="1815000">minimum. So that, among all the</span> <span m="1817000">vertices, not yet, and that's currently S is</span> <span m="1821000">empty. Q has everyone.</span> </p>
<p><span m="1823000">In general, Q will have everyone except S.</span> </p>
<p><span m="1829000">So, we'll take the vertex, u, that has the minimum key in</span> <span m="1833000">that priority queue. So, extract the Min from Q.</span> </p>
<p><span m="1848000">OK. We're going to add a little u</span> <span m="1862000">to S, claim that that is now, I mean, that's exactly what</span> <span m="1867000">we're saying here. We add to S that vertex that</span> <span m="1871000">has minimum distance estimate. And now, we need to update the</span> <span m="1877000">distances. So, we're going to look at each</span> <span m="1881000">adjacent vertex for each v in the adjacency list for u.</span> </p>
<p><span m="1887000">We look at a few distances.</span> </p>
<p><span m="1907000">So that's the algorithm or more or less.</span> </p>
<p><span m="1909000">This is the key. I should define it a little bit</span> <span m="1913000">what's going on here. We talked mainly about</span> <span m="1916000">undirected graph last time. Here, we're thinking about</span> <span m="1920000">undirected graphs. And, the adjacency list for u</span> <span m="1923000">here is just going to mean, give me all the vertices for</span> <span m="1927000">which there is an edge from u to v.</span> </p>
<p><span m="1929000">So, this is the outgoing adjacency list,</span> <span m="1931000">not the incoming adjacency list.</span> </p>
<p><span m="1933000">Undirected graphs: you list everything.</span> </p>
<p><span m="1936000">Directed graphs: here, we're only going to care</span> <span m="1939000">about those ones. So, for every edge,</span> <span m="1941000">(u,v), is what this is saying, we are going to compare the</span> <span m="1944000">current estimate for v, and this candidate estimate,</span> <span m="1948000">which intuitively means you go from s to u.</span> </p>
<p><span m="1950000">That's d of u because we now know that that's the right</span> <span m="1954000">answer. This, in fact,</span> <span m="1957000">equals, we hope, assuming the algorithm is</span> <span m="1959000">correct, this should be the shortest path weight from s to u</span> <span m="1964000">because we just added u to S. And whenever we add something</span> <span m="1968000">to S, it should have the right value.</span> </p>
<p><span m="1970000">So, we could say, well, you take the shortest</span> <span m="1974000">path from S to u, and then you follow this edge</span> <span m="1977000">from u to v. That has weight,</span> <span m="1979000">w, of (u,v). That's one possible path from S</span> <span m="1982000">to v. And, if that's a shorter path</span> <span m="1985000">than the one we currently have in our estimate,</span> <span m="1989000">if this is smaller than that, then we should update the</span> <span m="1992000">estimate to be that sum because that's a better path,</span> <span m="1996000">so, add it to our database of paths, so to speak:</span> <span m="1999000">OK, very intuitive operation; clearly should not do anything</span> <span m="2003000">bad. I mean, these should be paths</span> <span m="2005000">that makes sense. We'll prove that in a moment.</span> </p>
<p><span m="2010000">That's the first part of correctness, that this never</span> <span m="2013000">screws up. And then, the tricky part is to</span> <span m="2016000">show that it finds all the paths that we care about.</span> </p>
<p><span m="2020000">This step is called a relaxation step.</span> </p>
<p><span m="2023000">Relaxation is always a difficult technique to teach to</span> <span m="2027000">MIT students. It doesn't come very naturally.</span> </p>
<p><span m="2030000">But it's very simple operation. It comes from optimization</span> <span m="2035000">terminology, programming terminology, so to speak.</span> </p>
<p><span m="2040000">And, does this inequality look familiar at all especially when</span> <span m="2044000">you start writing it this way? You say, the shortest path from</span> <span m="2048000">S to v and the shortest path from S to u in some edge from u</span> <span m="2052000">to v, does that look like anything we've seen?</span> </p>
<p><span m="2055000">In fact, it was on this board but I just erased it.</span> </p>
<p><span m="2058000">Triangle inequality, yeah.</span> </p>
<p><span m="2060000">So, this is trying to make the triangle inequality true.</span> </p>
<p><span m="2064000">Certainly, the shortest path from S to v should be less than</span> <span m="2068000">or equal to, not greater than. The shortest path from S to u,</span> <span m="2072000">plus whatever path from u to v, the shortest path should be,</span> <span m="2076000">at most, that. So, this is sort of a somewhat</span> <span m="2080000">more general triangle inequality.</span> </p>
<p><span m="2082000">And, we want to, certainly it should be true.</span> </p>
<p><span m="2084000">So, if it's not true, we fix it.</span> </p>
<p><span m="2086000">If it's greater than, we make it equal.</span> </p>
<p><span m="2088000">But we don't want to make it less than because that's not</span> <span m="2091000">always true. OK, but certainly,</span> <span m="2092000">it should be less than or equal to.</span> </p>
<p><span m="2094000">So, this is fixing the triangle inequality.</span> </p>
<p><span m="2096000">It's trying to make that constraint more true.</span> </p>
<p><span m="2100000">In optimization, that's called relaxing the</span> <span m="2103000">constraint. OK, so we're sort of relaxing</span> <span m="2106000">the triangle inequality here. In the end, we should have all</span> <span m="2111000">the shortest paths. That's a claim.</span> </p>
<p><span m="2114000">So: a very simple algorithm. Let's try it out on a graph,</span> <span m="2119000">and that should make it more intuitive why it's working,</span> <span m="2123000">and that the rest of the lecture will be proving that it</span> <span m="2128000">works. Yeah, this is enough room.</span> </p>
<p><span m="2132000">So, oh, I should mention one other thing here.</span> </p>
<p><span m="2136000">Sorry. Whenever we change d of v,</span> <span m="2138000">this is changing the key of v in the priority queue.</span> </p>
<p><span m="2143000">So, implicitly what's happening here in this assignment,</span> <span m="2148000">this is getting a bit messy, is a decreased key operation,</span> <span m="2153000">OK, which we talked briefly about last class in the context</span> <span m="2158000">of minimum spanning trees where we were also decreasing the key.</span> </p>
<p><span m="2165000">The point is we were changing the key of one element industry</span> <span m="2168000">like station step in the priority queue so that if it now</span> <span m="2171000">becomes the minimum, we should extract here.</span> </p>
<p><span m="2174000">And, we are only ever decreasing keys because we are</span> <span m="2177000">always replacing larger values with smaller values.</span> </p>
<p><span m="2180000">So, we'll come back to that later when we analyze the</span> <span m="2183000">running time. But, there is some data</span> <span m="2185000">structure work going on here. Again, we are abusing notation</span> <span m="2188000">a bit. OK, so here is a graph with</span> <span m="2193000">edge weights.</span> </p>
<p><span m="2226000">OK, and I want my priority queue over here.</span> </p>
<p><span m="2230000">And, I'm also going to draw my estimates.</span> </p>
<p><span m="2234000">OK, now I don't want to cheat. So, we're going to run the</span> <span m="2239000">algorithm on this graph. s will be A,</span> <span m="2243000">and I want to know the shortest path from A to everyone else.</span> </p>
<p><span m="2250000">So, you can check, OK, paths exist.</span> </p>
<p><span m="2252000">So, hopefully everything should end up a finite value by the</span> <span m="2255000">end. All the weights are</span> <span m="2257000">nonnegative, so this algorithm should work.</span> </p>
<p><span m="2259000">The algorithm doesn't even need connectivity,</span> <span m="2262000">but it does mean that all the weights are nonnegative.</span> </p>
<p><span m="2265000">So, we run the algorithm. For the initialization,</span> <span m="2268000">we set the distance estimate for our source to be zero</span> <span m="2271000">because, in fact, there's only one path from A to</span> <span m="2274000">A, and that to do nothing, the empty path.</span> </p>
<p><span m="2277000">So, I'm going to put the key of zero over here.</span> </p>
<p><span m="2280000">And, for everyone else, we're just going to put</span> <span m="2283000">infinity because we don't know any better at this point.</span> </p>
<p><span m="2288000">So, I'll put keys of infinity for everyone else.</span> </p>
<p><span m="2291000">OK, so now you can see what the algorithm does is extract the</span> <span m="2295000">minimum from the queue. And, given our setup,</span> <span m="2298000">we'll definitely choose s, or in this case,</span> <span m="2301000">A. So, it has a weight of zero.</span> </p>
<p><span m="2303000">Everyone else has quite a bit larger weight.</span> </p>
<p><span m="2306000">OK, so we look at s, or I'll use A here.</span> </p>
<p><span m="2310000">So, we look at A. We add A to our set,</span> <span m="2312000">S. So, it's now removed from the</span> <span m="2313000">queue. It will never go back in</span> <span m="2315000">because we never add anything to the queue, start with all the</span> <span m="2318000">vertices, and extract, and decrease keys.</span> </p>
<p><span m="2320000">But we never insert. So, A is gone.</span> </p>
<p><span m="2322000">OK, and now I want to update the keys of all of the other</span> <span m="2325000">vertices. And the claim is I only need to</span> <span m="2328000">look at the vertices that have edges from A.</span> </p>
<p><span m="2330000">So, there's an edge from A to B, and that has weight ten.</span> </p>
<p><span m="2333000">And so, I compare: well, is it a good idea to go</span> <span m="2336000">from A to A, which costs nothing, and then to go along</span> <span m="2338000">this edge, AB, which costs ten?</span> </p>
<p><span m="2342000">Well, it seems like a pretty good idea because that has a</span> <span m="2346000">total weight of zero plus ten, which is ten,</span> <span m="2349000">which is much smaller than infinity.</span> </p>
<p><span m="2351000">So, I'm going to erase this infinity; write ten,</span> <span m="2355000">and over in the queue as well. That's the decreased key</span> <span m="2359000">operation. So now, I know a path from A to</span> </p>
<p><span m="2362000">B. Good. A to C is the only other edge. Zero plus three is less than</span> <span m="2367000">infinity, so, cool.</span> </p>
<p><span m="2368000">I'll put three here for C, and C is there.</span> </p>
<p><span m="2373000">OK, the other vertices I don't touch.</span> </p>
<p><span m="2375000">I'm going to rewrite them here, but the algorithm doesn't have</span> <span m="2378000">to copy them. Those keys were already there.</span> </p>
<p><span m="2381000">It's just touching these two. OK, that was pretty boring.</span> </p>
<p><span m="2384000">Now we look at our queue, and we extract the minimum</span> <span m="2387000">element. So, A is no longer in there,</span> <span m="2389000">so the minimum key here is three.</span> </p>
<p><span m="2391000">So, the claim is that this is a shortest path;</span> <span m="2394000">from A to C, here is the shortest path from</span> <span m="2396000">A to C. There's no other shorter way.</span> </p>
<p><span m="2398000">You could check that, and we'll prove it in a moment.</span> </p>
<p><span m="2403000">Cool, so we'll remove C from the list.</span> </p>
<p><span m="2405000">It's gone. Then we look at all of the</span> <span m="2407000">outgoing edges from C. So, there's one that goes up to</span> <span m="2410000">B, which has weight four, four plus three,</span> <span m="2413000">which is the shortest path weight from A to C.</span> </p>
<p><span m="2415000">So, going from A to C, and C to B should cost three</span> <span m="2418000">plus four, which is seven, which is less than ten.</span> </p>
<p><span m="2421000">So, we found an even better path to get to B.</span> </p>
<p><span m="2424000">It's better to go like this than it is to go like that.</span> </p>
<p><span m="2427000">So, we write seven for B, and there's an outgoing edge</span> <span m="2430000">from C to d which costs eight. Three plus eight is 11.</span> </p>
<p><span m="2435000">11 is less than infinity last time I checked.</span> </p>
<p><span m="2438000">So, we write 11 for d. Then we look at E.</span> </p>
<p><span m="2441000">We have three plus two is five, which is less than infinity.</span> </p>
<p><span m="2445000">So, we write five for the new key for E.</span> </p>
<p><span m="2448000">At this point, we have finite shortest paths</span> <span m="2451000">to everywhere, but they may not be the best</span> <span m="2454000">ones. So, we have to keep looking.</span> </p>
<p><span m="2456000">OK, next round of the algorithm, we extract the</span> <span m="2459000">minimum key among all these. OK, it's not B,</span> <span m="2464000">which we've seen though probably know the answer to.</span> </p>
<p><span m="2467000">But it's E. E has the smallest key.</span> </p>
<p><span m="2469000">So, we now declare this to be a shortest path.</span> </p>
<p><span m="2472000">The way we got to E was along this path: A to C,</span> <span m="2476000">C to E, declare that to be shortest.</span> </p>
<p><span m="2478000">We claim we're done with E. But we still have to update.</span> </p>
<p><span m="2482000">What about all the outgoing edges from E?</span> </p>
<p><span m="2485000">There's only one here. It costs five plus nine,</span> <span m="2488000">which is 14, which is bigger than 11.</span> </p>
<p><span m="2492000">So, no go. That's not an interesting path.</span> </p>
<p><span m="2494000">Our previous path, which went like this at a cost</span> <span m="2498000">of the 11, is better than the one we are considering now.</span> </p>
<p><span m="2502000">I'm drawing the whole path, but the algorithm is only</span> <span m="2505000">adding these two numbers. OK, good.</span> </p>
<p><span m="2508000">So, I don't change anything. Seven, 11, and five is removed,</span> <span m="2512000">or E is removed. Our new keys are seven and 11.</span> </p>
<p><span m="2515000">So, we take the key, seven, here,</span> <span m="2517000">which is for element B, vertex B.</span> </p>
<p><span m="2521000">We declare the path we currently have in our hands from</span> <span m="2524000">A to B, which happens to be this one.</span> </p>
<p><span m="2526000">Algorithm can't actually tell this, by the way,</span> <span m="2529000">but we're drawing it anyway. This path, A,</span> <span m="2531000">C, B, is the candidate shortest path.</span> </p>
<p><span m="2534000">The claim is it is indeed shortest.</span> </p>
<p><span m="2536000">Now, we look at all the outgoing edges.</span> </p>
<p><span m="2538000">There's one that goes back to C at a cost of seven plus one,</span> <span m="2542000">which is eight, which is bigger than three,</span> <span m="2544000">which is good. We already declared C to be</span> <span m="2547000">done. But the algorithm checks this</span> <span m="2549000">path and says, oh, that's no better.</span> </p>
<p><span m="2551000">And then we look at this other edge from B to d.</span> </p>
<p><span m="2554000">That costs seven plus two, which is nine,</span> <span m="2556000">which is better than 11. So, we, in fact,</span> <span m="2561000">found an even shorter path. So, the shortest path weight,</span> <span m="2566000">now, for d, is nine because there is this path that goes A,</span> <span m="2571000">C, B, d for a total cost of three plus four plus two is</span> <span m="2575000">nine. Cool, now there's only one</span> <span m="2578000">element in the queue. We remove it.</span> </p>
<p><span m="2582000">d: we look at the outgoing edges.</span> </p>
<p><span m="2584000">There's one going here which costs nine plus seven,</span> <span m="2587000">which is 16, which is way bigger than five.</span> </p>
<p><span m="2589000">So, we're done. Don't do anything.</span> </p>
<p><span m="2592000">At this point, the queue is empty.</span> </p>
<p><span m="2594000">And the claim is that all these numbers that are written here,</span> <span m="2598000">the final values are the shortest path weights.</span> </p>
<p><span m="2601000">This looks an awful lot like a five, but it's an s.</span> </p>
<p><span m="2604000">It has a weight of zero. I've also drawn in here all the</span> <span m="2607000">shortest paths. And, this is not hard to do.</span> </p>
<p><span m="2611000">We're not going to talk about it too much in this class,</span> <span m="2614000">but it's mentioned in a little bit more detail at the end of</span> <span m="2617000">the textbook. And it's something called the</span> <span m="2620000">shortest path tree. It's just something good to</span> <span m="2622000">know about if you actually want to compute shortest paths.</span> </p>
<p><span m="2626000">In this class, we mainly worry about the</span> <span m="2628000">weights because it's pretty much the same problem.</span> </p>
<p><span m="2630000">The shortest path tree is the union of all shortest paths.</span> </p>
<p><span m="2635000">And in particular, if you look at each vertex in</span> <span m="2638000">your graph, if you consider the last edge into that vertex that</span> <span m="2644000">was relaxed among all vertices, u, you look at the edges,</span> <span m="2648000">(u,v), say, was that last one to relax?</span> </p>
<p><span m="2652000">So, just look at the last edges we relaxed here.</span> </p>
<p><span m="2655000">You put them all together: that's called a shortest path</span> <span m="2660000">tree. And, it has the property that</span> <span m="2663000">from S to everywhere else, there is a unique path down the</span> <span m="2668000">tree. And it's the shortest path.</span> </p>
<p><span m="2671000">It's the shortest path that we found.</span> </p>
<p><span m="2674000">OK, so you actually get shortest paths out of this</span> <span m="2677000">algorithm even though it's not explicitly described.</span> </p>
<p><span m="2680000">All we are mainly talking about are the shortest path weights.</span> </p>
<p><span m="2684000">Algorithm clear at this point? Feels like it's doing the right</span> <span m="2688000">thing? You can check all those numbers</span> <span m="2690000">are the best paths. And now we're going to prove</span> <span m="2693000">that.</span> </p>
<p><span m="2712000">So: correctness.</span> </p>
<p><span m="2725000">So the first thing I want to prove is that relaxation never</span> <span m="2731000">makes a mistake. If it ever sets d of v to be</span> <span m="2735000">something, I want to prove that d of v is always an upper bound</span> <span m="2742000">on delta. So, we have this variant.</span> </p>
<p><span m="2745000">It's greater than or equal to delta of s, v for all v.</span> </p>
<p><span m="2751000">And, this invariant holds at all times.</span> </p>
<p><span m="2755000">So, after initialization, it doesn't hold before</span> <span m="2759000">initialization because d isn't defined then.</span> </p>
<p><span m="2766000">But if you do this initialization where you set S</span> <span m="2769000">to zero, and everyone else to infinity, and you take any</span> <span m="2774000">sequence of relaxation steps, then this variant will hold</span> <span m="2779000">after each relaxation step you apply.</span> </p>
<p><span m="2782000">This is actually a very general lemma.</span> </p>
<p><span m="2785000">It's also pretty easy to prove. It holds not only for</span> <span m="2789000">Dijkstra's algorithm, but for a lot of other</span> <span m="2793000">algorithms we'll see. Pretty much every algorithm we</span> <span m="2798000">see will involve relaxation. And, this is saying no matter</span> <span m="2803000">what relaxations you do, you always have a reasonable</span> <span m="2807000">estimate in the sense that it's greater than or equal to the</span> <span m="2811000">true shortest path weight. So, it should be converging</span> <span m="2816000">from above. So, that's the lemma.</span> </p>
<p><span m="2818000">Let's prove it. Any suggestions on how we</span> <span m="2822000">should prove this lemma? What technique might we use?</span> </p>
<p><span m="2827000">What's that? Cut and paste?</span> </p>
<p><span m="2829000">It would be good for optimal substructure.</span> </p>
<p><span m="2832000">Cut and paste: maybe sort of what's going on</span> <span m="2836000">here but not exactly. Something a little more</span> <span m="2840000">general. It's just intuition here;</span> <span m="2842000">it doesn't have to be the right answer.</span> </p>
<p><span m="2846000">In fact, many answers are correct, have plausible proofs.</span> </p>
<p><span m="2852000">Induction, yeah. So, I'm not going to write</span> <span m="2854000">induction here, but effectively we are using</span> <span m="2856000">induction. That's the answer I was</span> <span m="2858000">expecting. So, there is sort of an</span> <span m="2860000">induction already in time going on here.</span> </p>
<p><span m="2862000">We say after initialization it should be true.</span> </p>
<p><span m="2865000">That's our base case. And then, every relaxation we</span> <span m="2867000">do, it should still be true. So, we're going to assume by</span> <span m="2870000">induction that all the previous relaxations worked,</span> <span m="2873000">and then we're going to prove that the last relaxation,</span> <span m="2876000">whatever it is, works.</span> </p>
<p><span m="2879000">So, first let's do the base case.</span> </p>
<p><span m="2881000">So, this is after an initialization,</span> <span m="2884000">let's say, initially. So, initially we have d of s</span> <span m="2889000">equal to zero. And we have d of v equal to</span> <span m="2892000">infinity for all other vertices, for all vertices,</span> <span m="2897000">v, not equal to little s. OK, now we have to check that</span> <span m="2901000">this inequality holds. Well, we have delta of s,</span> <span m="2906000">s. We've already argued that</span> <span m="2908000">that's zero. You can't get negative when</span> <span m="2913000">there are only nonnegative edge weights.</span> </p>
<p><span m="2916000">So, that's the best. So, certainly zero is greater</span> <span m="2920000">than or equal to zero. And, we have everything else,</span> <span m="2924000">well, I mean, delta of S, v is certainly less</span> <span m="2927000">than or equal to infinity. So this holds.</span> </p>
<p><span m="2930000">Everything is less than or equal to infinity.</span> </p>
<p><span m="2934000">So: base case is done. So, now we do an induction.</span> </p>
<p><span m="2939000">And, I'm going to write it as a proof by contradiction.</span> </p>
<p><span m="2946000">So, let's say, suppose that this fails to hold</span> <span m="2952000">at some point. So, suppose for contradiction</span> <span m="2958000">that the invariant is violated. So, we'd like to sue the</span> <span m="2966000">violator and find a contradiction.</span> </p>
<p><span m="2972000">So, it's going to be violated. So, let's look at the first</span> <span m="2976000">violation, the first time it's violated.</span> </p>
<p><span m="2979000">So, this is, essentially,</span> <span m="2981000">again, a proof by induction. So, let's say we have some</span> <span m="2985000">violation, d of v is less than delta of s, v.</span> </p>
<p><span m="2988000">That would be bad if we somehow got an estimate smaller than the</span> <span m="2993000">shortest path. Well, then I think about</span> <span m="2996000">looking at the first violation is we know sort of by induction</span> <span m="3001000">that all other values are correct.</span> </p>
<p><span m="3005000">OK, d of v is the first one where we've screwed up.</span> </p>
<p><span m="3009000">So, the invariant holds everywhere else.</span> </p>
<p><span m="3012000">Well, what caused this to fail, this invariant to be violated,</span> <span m="3017000">is some relaxation, OK, on d of v.</span> </p>
<p><span m="3020000">So, we had some d of v, and we replaced it with some</span> <span m="3024000">other d of u plus the weight of the edge from u to v.</span> </p>
<p><span m="3030000">And somehow, this made it invalid.</span> </p>
<p><span m="3034000">So, d of v is somehow less than that.</span> </p>
<p><span m="3039000">We just set d of v to this. So, this must be less than</span> <span m="3046000">delta of s, v. The claim is that that's not</span> <span m="3051000">possible because, let me rewrite a little bit.</span> </p>
<p><span m="3059000">We have d of u plus w of (u,v). And, we have our induction</span> <span m="3067000">hypothesis, which holds on u, u of some other vertex.</span> </p>
<p><span m="3075000">We know that d of u is at least delta of s, u.</span> </p>
<p><span m="3082000">So, this has to be at least delta of s, u plus w of u,</span> <span m="3090000">v. Now, what about this w of u,</span> <span m="3094000">v? Well, that's some path from u</span> <span m="3097000">to v. So, it's got to be bigger than</span> <span m="3100000">the shortest path or equal. So certainly,</span> <span m="3104000">this is greater than or equal to delta of u,</span> <span m="3108000">v. OK, it could be larger if</span> <span m="3110000">there's some multi-edged path that has a smaller total weight,</span> <span m="3116000">but it's certainly no smaller than delta of u,</span> <span m="3120000">v. And, this looks like a good</span> <span m="3124000">summation, delta of S to u, and u to v is a triangle</span> <span m="3128000">inequality, yeah. So, that is,</span> <span m="3131000">it's upside down here. But, the triangle S,</span> <span m="3135000">u, u to v, so this is only longer than S to v.</span> </p>
<p><span m="3139000">OK, so we have this thing, which is simultaneously greater</span> <span m="3144000">than or equal to the shortest path weight from S to v,</span> <span m="3149000">and also strictly less than the shortest path weight from S to</span> <span m="3154000">v. So, that's a contradiction.</span> </p>
<p><span m="3157000">Maybe contradiction is the most intuitive way isn't the most</span> <span m="3161000">intuitive way to proceed. The intuition,</span> <span m="3163000">here, is whatever you assign d of v, you have a path in mind.</span> </p>
<p><span m="3167000">You inductively had a path from s to u.</span> </p>
<p><span m="3170000">Then you added this edge. So, that was a real path.</span> </p>
<p><span m="3173000">We always know that every path has weight greater than or equal</span> <span m="3177000">to the shortest path. So, it should be true,</span> <span m="3180000">and here's the inductive proof. All right, moving right along,</span> <span m="3186000">so this was an easy warm-up. We have greater than or equal</span> <span m="3194000">to. Now we have to prove less than</span> <span m="3198000">or equal to at the end of the algorithm.</span> </p>
<p><span m="3203000">This is true all the time; less than or equal to will only</span> <span m="3211000">be true at the end. So, we are not going to prove</span> <span m="3217000">less than or equal to quite yet. We're going to prove another</span> <span m="3221000">lemma, which again, so both of these lemmas are</span> <span m="3224000">useful for other algorithms, too.</span> </p>
<p><span m="3226000">So, we're sort of building some shortest path theory that we can</span> <span m="3231000">apply later. This one will give you some</span> <span m="3234000">intuition about why relaxation, not only is it not bad,</span> <span m="3238000">it's actually good. Not only does it not screw up</span> <span m="3241000">anything, but it also makes progress in the following sense.</span> </p>
<p><span m="3247000">So, suppose you knew the shortest path from s to some</span> <span m="3252000">vertex. OK, so you go from s to some</span> <span m="3256000">other vertices. Then you go to u.</span> </p>
<p><span m="3259000">Then you go to v. Suppose that is a shortest path</span> <span m="3265000">from s to v. OK, and also suppose that we</span> <span m="3269000">already know in d of u the shortest path weight from s to</span> <span m="3275000">u. So, suppose we have this</span> <span m="3279000">equality. We now know that we always have</span> <span m="3283000">a greater than or equal to. Suppose they are equal for u,</span> <span m="3289000">OK, the vertex just before v in the shortest path.</span> </p>
<p><span m="3293000">OK, and suppose we relax that edge, (u,v), OK,</span> <span m="3298000">which is exactly this step. This is relaxing the edge,</span> <span m="3305000">(u,v). But we'll just call it</span> <span m="3308000">relaxation here. After that relaxation,</span> <span m="3313000">d of v equals delta of (s,v). So, if we had the correct</span> <span m="3319000">answer for u, and we relax (u,v),</span> <span m="3323000">then we get the correct answer for v.</span> </p>
<p><span m="3329000">OK, this is good news. It means, if inductively we can</span> <span m="3332000">somehow get the right answer for u, now we know how to get the</span> <span m="3336000">right answer for v. In the algorithm,</span> <span m="3338000">we don't actually know what the vertex just before v in the</span> <span m="3342000">shortest path is, but in the analysis we can</span> <span m="3345000">pretty much know that. So, we have to prove this</span> <span m="3348000">lemma. This is actually even easier</span> <span m="3350000">than the previous one: don't even need induction</span> <span m="3353000">because you just work through what's going on in relaxation,</span> <span m="3357000">and it's true. So, here we go.</span> </p>
<p><span m="3361000">So, we're interested in this value, delta of Ss v.</span> </p>
<p><span m="3364000">And we know what the shortest path is.</span> </p>
<p><span m="3367000">So, the shortest path weight is the weight of this path.</span> </p>
<p><span m="3372000">OK, so we can write down some equality here.</span> </p>
<p><span m="3375000">Well, I'm going to split out the first part of the path and</span> <span m="3380000">the last part of the path. So, we have,</span> <span m="3382000">I'll say, the weight from s, so, this part of the path from</span> <span m="3387000">s to u, plus the weight of this edge, u, v.</span> </p>
<p><span m="3392000">Remember, we could write w of a path, and that was the total</span> <span m="3400000">weight of all those edges. So, what is this,</span> <span m="3406000">the weight of this path from S to u?</span> </p>
<p><span m="3411000">Or, what property should I use to figure out what that value</span> <span m="3419000">is? Yeah?</span> </p>
<p><span m="3422000">s to v is the shortest path, right?</span> </p>
<p><span m="3425000">So, by optimal substructure, from s to u is also a shortest</span> <span m="3431000">path. So, this is delta of s,</span> <span m="3433000">u. Cool.</span> </p>
<p><span m="3434000">We'll hold on for now. That's all we're going to say.</span> </p>
<p><span m="3439000">On the other hand, we know from this lemma that</span> <span m="3444000">matter what we do, d of v is greater than or equal</span> <span m="3448000">to delta of s, v.</span> </p>
<p><span m="3452000">So, let's write that down. So, there's a few cases,</span> <span m="3456000">and this will eliminate some of the cases.</span> </p>
<p><span m="3459000">By that lemma correctness one, we know that d of v is greater</span> <span m="3464000">than or equal to delta of s, v.</span> </p>
<p><span m="3466000">So, it's either equal or greater than at all times.</span> </p>
<p><span m="3470000">So, I'm thinking about the time before we do the relaxation,</span> <span m="3475000">this (u,v). So, at that point,</span> <span m="3478000">this is certainly true. So, either they're equal before</span> <span m="3482000">relaxation or it's greater.</span> </p>
<p><span m="3496000">OK, if they are equal before relaxation, we're happy because</span> <span m="3499000">relaxation only decreases values by correctness one.</span> </p>
<p><span m="3503000">It can't get any smaller than this, so after relaxation it</span> <span m="3506000">will also be equal. OK, so in this case we're done.</span> </p>
<p><span m="3509000">So, that's a trivial case. So let's now suppose that d of</span> <span m="3515000">v is greater than delta of s, v before relaxation.</span> </p>
<p><span m="3521000">That's perfectly valid. Hopefully now we fix it.</span> </p>
<p><span m="3526000">OK, well the point is, we know this delta s,</span> <span m="3531000">v. It is this sum.</span> </p>
<p><span m="3533000">OK, we also know this. So, delta of s,</span> <span m="3538000">u we know is d of u. And, we have this w u,</span> <span m="3543000">v. So, delta of s,</span> <span m="3544000">v is d of u plus w of (u,v) because we are assuming we have</span> <span m="3547000">this shortest path structure where you go from s to u,</span> <span m="3551000">and then you follow the edge, (u,v).</span> </p>
<p><span m="3553000">So, we know this. So, we know d of v is greater</span> <span m="3556000">than d of u plus w of (u,v). By golly, that's this condition</span> <span m="3559000">in relaxation. So, we're just checking,</span> <span m="3562000">relaxation actually does something here.</span> </p>
<p><span m="3564000">OK, if you had the wrong distance estimate,</span> <span m="3566000">this if condition is satisfied. Therefore, we do this.</span> </p>
<p><span m="3573000">So, in this case, we relax.</span> </p>
<p><span m="3576000">So, I'm just relaxing. Then, we set d of v to d of u</span> <span m="3584000">plus WUV, which is what we want. OK, so we set d of v to d of u</span> <span m="3592000">plus w of (u,v). And, this equals,</span> <span m="3597000">as we said here, delta of S, v,</span> <span m="3601761">which is what we wanted to prove.</span> </p>
<p><span m="3608000">Done. OK, I'm getting more and more</span> <span m="3612662">excited as we get into the meat of this proof.</span> </p>
<p><span m="3618834">Any questions so far? Good.</span> </p>
<p><span m="3622400">Now comes the hard part. These are both very easy</span> <span m="3628982">lemmas, right? I'll use these two boards.</span> </p>
<p><span m="3635935">We don't need these proofs anymore.</span> </p>
<p><span m="3641081">We just need these statements: correctness one,</span> <span m="3648043">correctness lemma; great names.</span> </p>
<p><span m="3652583">So, now finally we get to correctness two.</span> </p>
<p><span m="3660000">So, we had one and one and a half.</span> </p>
<p><span m="3663771">So, I guess correctness is, itself, a mini-trilogy,</span> <span m="3669485">the mini-series. OK, so correctness two says</span> <span m="3674400">when the algorithm is done, we have the right answer.</span> </p>
<p><span m="3680342">This is really correctness. But, it's going to build on</span> <span m="3686514">correctness one and correctness lemma.</span> </p>
<p><span m="3692000">So, we want d of v to equal delta of s, v for all vertices,</span> <span m="3695699">v at the end of the algorithm. That is clearly our goal.</span> </p>
<p><span m="3699207">Now, this theorem is assuming that all of the weights are</span> <span m="3702779">nonnegative, just to repeat. It doesn't assume anything</span> <span m="3706223">else. So, it's going to get the</span> <span m="3708136">infinities right. But, if there are minus</span> <span m="3710687">infinities, all bets are off. OK, even if there's any</span> <span m="3714004">negative weight edge anywhere, it's not going to do the right</span> <span m="3717831">thing necessarily. But, assuming all the weights</span> <span m="3722573">are nonnegative, which is reasonable if they're</span> <span m="3726656">measuring time. Usually it costs money to</span> <span m="3730207">travel along edges. They don't pay you to do it.</span> </p>
<p><span m="3734378">But who knows? So, I need just to say a few</span> <span m="3738106">things. One of the things we've</span> <span m="3740769">mentioned somewhere along the way is when you add a vertex to</span> <span m="3746094">S, you never change its weight. OK, that actually requires</span> <span m="3752363">proof. I'm just going to state it</span> <span m="3755272">here. It's not hard to see.</span> </p>
<p><span m="3757636">d of v doesn't change. OK, this is essentially an</span> <span m="3762000">induction once v is added to S. OK, this will actually followed</span> <span m="3767636">by something we'll say in a moment.</span> </p>
<p><span m="3770727">OK, so all I really care about is when a vertex is added to S,</span> <span m="3776272">we better have the right estimate because after that,</span> <span m="3781000">we're not going to change it, let's say.</span> </p>
<p><span m="3786000">OK, we could define the algorithm that way.</span> </p>
<p><span m="3790097">We are not, but we could. I'll say more about this in a</span> <span m="3795365">second. So, all we care about is</span> <span m="3798390">whether d of v equals delta of s, v.</span> </p>
<p><span m="3801804">That's what we want to prove. So, it's clearly that.</span> </p>
<p><span m="3806780">It should be true at the end. But, it suffices to prove that</span> <span m="3812536">it holds when v is added to S, to capital S.</span> </p>
<p><span m="3818000">OK, this actually implies the first statement.</span> </p>
<p><span m="3820327">It has sort of a funny implication.</span> </p>
<p><span m="3822086">But, if we can prove this, that d of v equals delta of s,</span> <span m="3824982">v, when you add to S, we know relaxation only</span> <span m="3827258">decreases value. So, it can't get any smaller.</span> </p>
<p><span m="3829586">It would be from correctness one.</span> </p>
<p><span m="3831241">Correctness one says we can't get any smaller than delta.</span> </p>
<p><span m="3834137">So, if we get a quality at that point, we'll have a quality from</span> <span m="3837396">then on. So, that actually implies d of</span> <span m="3839362">v never changes after that point.</span> </p>
<p><span m="3842000">OK, so we're going to prove this.</span> </p>
<p><span m="3846085">Good. Well, suppose it isn't true.</span> </p>
<p><span m="3850297">So this would be a proof by a contradiction.</span> </p>
<p><span m="3855787">Suppose for contradiction that this fails to hold.</span> </p>
<p><span m="3862042">And, let's look at the first failure.</span> </p>
<p><span m="3866638">Suppose u is the first vertex --</span> <span m="3881000">-- that's about to be added to S.</span> </p>
<p><span m="3885053">I want to consider the time right before it's added to S,</span> <span m="3892146">for which we don't have what we want.</span> </p>
<p><span m="3896706">These are not equal. d of u does not equal delta of</span> <span m="3904166">s, u. Well, if they're not equal,</span> <span m="3908611">we know from correctness one that d of E is strictly greater</span> <span m="3916805">than delta of s, u, so, d of u.</span> </p>
<p><span m="3920971">So, we have d of u is strictly greater than delta of s,</span> <span m="3928471">u. OK, that's the beginning of the</span> <span m="3932852">proof, nothing too exciting yet, just some warm-up.</span> </p>
<p><span m="3937453">OK, but this, used already correctness one.</span> </p>
<p><span m="3941319">I think that's the only time that we use it in this proof.</span> </p>
<p><span m="3946564">OK, so I sort of just want to draw picture of what's going on.</span> </p>
<p><span m="3952177">But I need a little bit of description.</span> </p>
<p><span m="3955674">So, let's look at the shortest path.</span> </p>
<p><span m="3960000">Somehow, d of u is greater than the shortest path.</span> </p>
<p><span m="3964176">So, consider the shortest path or a shortest path.</span> </p>
<p><span m="3968352">Let p be a shortest path, not just any shortest path,</span> <span m="3972784">but the shortest path from s to u.</span> </p>
<p><span m="3975596">OK, so that means that the weight of this path is the</span> <span m="3980028">shortest path weight. So, we have some equations for</span> <span m="3984375">what's going on here. So, we care about delta of s,</span> <span m="3988636">u. Here's a path with that weight.</span> </p>
<p><span m="3992791">It's got to be one because shortest paths exist here;</span> <span m="3997473">slight exceptional cases if it's a plus infinity,</span> <span m="4001796">but I'm not going to worry about that.</span> </p>
<p><span m="4005127">So, let me draw a picture somewhere.</span> </p>
<p><span m="4023000">So, we have s. We have u.</span> </p>
<p><span m="4026283">Here is the shortest path from s to u.</span> </p>
<p><span m="4031344">That's p. No idea what it looks like so</span> <span m="4036542">far. Now, what we also have is the</span> <span m="4041056">notion of capital S. So, I'm going to draw capital</span> <span m="4047759">S. So, this is big S.</span> </p>
<p><span m="4052000">We know that little s is in big S.</span> </p>
<p><span m="4054600">We know that u is not yet in big S.</span> </p>
<p><span m="4057279">So, I haven't screwed up anything yet,</span> <span m="4060195">right? This path starts in S and</span> <span m="4062638">leaves it at some point because until we are about to add u to</span> <span m="4067445">S, so it hasn't happened yet, so u is not in S.</span> </p>
<p><span m="4071070">Fine. What I want to do is look at</span> <span m="4073671">the first place here where the path, p, exits S.</span> </p>
<p><span m="4077375">So, there is some vertex here. Let's call it x.</span> </p>
<p><span m="4082526">There's some vertex here. We'll call it y.</span> </p>
<p><span m="4086436">OK, possibly x equals S. Possibly y equals u.</span> </p>
<p><span m="4090632">But it's got to exit somewhere, because it starts inside and</span> <span m="4096260">ends up outside. And it's a finite path.</span> </p>
<p><span m="4099979">OK, so consider the first time it happens; not the second time,</span> <span m="4105893">the first. OK, so consider the first edge,</span> <span m="4109803">(x,y), where p exits capital S. The shortest path from s to u</span> <span m="4117140">exits capital S. It's got to happen somewhere.</span> </p>
<p><span m="4122014">Cool, now, what do we know? Little x is in S.</span> </p>
<p><span m="4126779">So, it has the right answer because u, we were about to add</span> <span m="4133060">u to S, and that was the first violation of something in S that</span> <span m="4139776">has the wrong d of x estimate. So, d of x equals delta of s,</span> <span m="4146206">x. Because we are looking at the</span> <span m="4148565">first violation, x is something that got added</span> <span m="4151988">before. So, by induction on time,</span> <span m="4154423">or because we had the first violation, d of x equals the</span> <span m="4158608">shortest path weight from S to x.</span> </p>
<p><span m="4161042">So, that's good news. Now we are trying to apply this</span> <span m="4165000">lemma. It's the only thing left to do.</span> </p>
<p><span m="4167815">We haven't used this lemma for anything.</span> </p>
<p><span m="4172000">So, we have the setup. If we already know that one of</span> <span m="4175358">the d values is the right answer, and we relaxed the edge</span> <span m="4178974">that goes out from it, then we get another right</span> <span m="4182009">answer. So that's what I want to argue</span> <span m="4184399">over here. We know that the d of x equals</span> <span m="4186982">this weight because, again, subpaths of shortest</span> <span m="4190017">paths are shortest paths. We have optimal substructure,</span> <span m="4193504">so this is a shortest path, from S to x.</span> </p>
<p><span m="4196023">It might not be the only one, but it is one.</span> </p>
<p><span m="4198800">So we know that matches. Now, I want to think about</span> <span m="4202029">relaxing this edge, (x,y).</span> </p>
<p><span m="4205000">Well, x is in capital S. And, the algorithm says,</span> <span m="4208536">whenever you add a vertex, u, to the big set,</span> <span m="4211778">S, you relax all the edges that go out from there.</span> </p>
<p><span m="4215389">OK, so when we added x to S, and we now look far in the</span> <span m="4219368">future, we're about to add some other vertex.</span> </p>
<p><span m="4222610">Right after we added x to S, we relax this edge,</span> <span m="4226073">(x,y), because we relaxed every edge that goes out from x,</span> <span m="4230273">OK, whatever they were. Some of them went into S.</span> </p>
<p><span m="4236443">Some of them went out. Here's one of them.</span> </p>
<p><span m="4242091">So, when we added x to S, we got XS.</span> </p>
<p><span m="4246913">When we added x to S, we relaxed the edge,</span> <span m="4252561">(x,y). OK, so now we're going to use</span> <span m="4257382">the lemma. So, by the correctness lemma --</span> <span m="4275000">What do you get? Well, we add this correct</span> <span m="4278863">shortest path weight to x now. We relax the edge,</span> <span m="4283387">(x,y). So, now we should have the</span> <span m="4286403">correct shortest path weight for y.</span> </p>
<p><span m="4289607">d of y equals delta of s, y.</span> </p>
<p><span m="4293000">OK, this is sometime in the past.</span> </p>
<p><span m="4295509">In particular, now, it should still be true</span> <span m="4298803">because once you get down to the right answer you never change</span> <span m="4303588">it. OK, we should be done.</span> </p>
<p><span m="4305549">OK, why are we done? Well, what else do we know</span> <span m="4309156">here? We assumed something for</span> <span m="4311431">contradiction, so we better contradict that.</span> </p>
<p><span m="4314803">We assume somehow, d of u is strictly greater than</span> <span m="4318647">delta of s, u. So, d of u here is strictly</span> <span m="4323142">greater than the length of this whole path.</span> </p>
<p><span m="4326476">Well, we don't really know whether u equals y.</span> </p>
<p><span m="4330047">It could, could not. And, but what do we know about</span> <span m="4334015">this shortest path from S to y? Well, it could only be shorter</span> <span m="4338857">than from S to u because it's a subpath.</span> </p>
<p><span m="4341952">And it's the shortest path because it's the subpath of the</span> <span m="4346476">shortest path. The shortest path from S to y</span> <span m="4349888">has to be less than or equal to the shortest path from S to u.</span> </p>
<p><span m="4356000">OK, S to y: less than or equal to s, u, OK, just because the</span> <span m="4364627">subpath. I'm closer.</span> </p>
<p><span m="4367405">I've got delta of s, u now.</span> </p>
<p><span m="4371207">Somehow, I want to involve d of u.</span> </p>
<p><span m="4376033">So, I want to relate d of y to d of u.</span> </p>
<p><span m="4381443">What do I know about d of u? Yeah?</span> </p>
<p><span m="4387389">d of u is smaller because we have a Min heap,</span> <span m="4390814">yeah. We always chose,</span> <span m="4392449">let's erase, it's way down here.</span> </p>
<p><span m="4394862">We chose u. This is the middle of the</span> <span m="4397664">algorithm. It's the reason I kept this to</span> <span m="4400778">be the minimum key. This is keyed on d.</span> </p>
<p><span m="4403736">So, we know that at this moment, when we're trying to add</span> <span m="4408095">u to S, right, y is not in S,</span> <span m="4410275">and u is not in S. They might actually be the same</span> <span m="4415412">vertex. But both of these vertices,</span> <span m="4418057">same or not, are outside S.</span> </p>
<p><span m="4420080">We chose u because d of u has the smallest d estimate.</span> </p>
<p><span m="4424204">So, d of y has to be greater than or equal to d of u.</span> </p>
<p><span m="4428250">It might be equal if they're the same vertex,</span> <span m="4431674">but it's got to be greater than or equal to.</span> </p>
<p><span m="4435020">So, d of y here is greater than or equal to d of u.</span> </p>
<p><span m="4440000">So, here we're using the fact that we actually made a greedy</span> <span m="4443791">choice. It's the one place we're using</span> <span m="4446168">the greedy choice. Better use it somewhere because</span> <span m="4449317">you can't just take an arbitrary vertex and declare it to be</span> <span m="4453108">done. You've got to take the greedy</span> <span m="4455293">one. OK, now we have d of u is less</span> <span m="4457477">than or equal to delta of s, u, which contradicts this.</span> </p>
<p><span m="4460947">OK, sort of magical that that all just worked out.</span> </p>
<p><span m="4464096">But sort of like the previous proofs, you just see what</span> <span m="4467566">happens and it works. OK, that's the approximation.</span> </p>
<p><span m="4472000">The only real idea here is to look at this edge.</span> </p>
<p><span m="4475005">In fact, you could look at this edge too.</span> </p>
<p><span m="4477563">But let's look at some edge that comes from S and goes out</span> <span m="4481209">of S, and argue that while x has to be correct,</span> <span m="4484151">and what we made x correct, y had to be correct,</span> <span m="4487156">and now, why the hell are we looking at u?</span> </p>
<p><span m="4489779">y is the thing you should have looked at.</span> </p>
<p><span m="4492337">And, there you get a contradiction because y had the</span> <span m="4495598">right answer. If u equals y,</span> <span m="4497325">that's fine, or if u and y were sort of</span> <span m="4499755">equally good, that's also fine if all these</span> <span m="4502441">weights were zero. So, the picture might actually</span> <span m="4507604">look like this. But, in that case,</span> <span m="4510469">d of u is the correct answer. It was delta SU.</span> </p>
<p><span m="4514376">We assumed that it wasn't. That's where we're getting a</span> <span m="4519064">contradiction. Pretty clear?</span> </p>
<p><span m="4521408">Go over this proof. It's a bit complicated,</span> <span m="4525054">naturally. OK, we have a little bit more</span> <span m="4528440">to cover, some easier stuff. OK, the first thing is what's</span> <span m="4534168">the running time of this algorithm?</span> </p>
<p><span m="4536710">I'll do this very quick because we're actually seen this many</span> <span m="4541196">times before last class. There was some initialization.</span> </p>
<p><span m="4545233">The initialization, which is no longer here,</span> <span m="4548448">is linear time. No big deal.</span> </p>
<p><span m="4550467">OK, extract Min. Well, that's some data</span> <span m="4553308">structure. So, we have something like size</span> <span m="4556373">of V. Every vertex we extract the Min</span> <span m="4559065">once, and that's it. So, size of V,</span> <span m="4561607">extract mins. OK, so that's pretty simple.</span> </p>
<p><span m="4566634">OK, then we had this main loop. This is a completely conceptual</span> <span m="4572466">operation. S is not actually used in the</span> <span m="4576135">algorithm. It's just for thinking.</span> </p>
<p><span m="4579240">OK, so this takes zero time. Got to love it.</span> </p>
<p><span m="4583285">OK, and now the heart is here. So, how many times does this</span> <span m="4588742">loop iterate? That's the degree of u.</span> </p>
<p><span m="4593324">So, what is the total number of times that we execute a</span> <span m="4598780">relaxation step? It doesn't necessarily mean we</span> <span m="4603428">do this, but we at least execute this body.</span> </p>
<p><span m="4607672">Over the whole algorithm, how many times do we do this?</span> </p>
<p><span m="4613128">Every vertex, we look at all the outgoing</span> <span m="4617170">edges from there. So, the total would be?</span> </p>
<p><span m="4631000">Number of edges, yeah.</span> </p>
<p><span m="4632615">So, this number of edges iterations.</span> </p>
<p><span m="4635307">OK, this is essentially the handshaking lemma we saw last</span> <span m="4639615">time, but for directed graphs. And we are only looking at the</span> <span m="4644230">outgoing edges. So, it's not a factor of two</span> <span m="4647538">here because you're only outgoing from one side.</span> </p>
<p><span m="4652000">So, we have number of reiterations.</span> </p>
<p><span m="4656573">In the worst case, we do a decreased key for</span> <span m="4662358">everyone. So, at most:</span> <span m="4665183">E decreased keys. OK, so the time is,</span> <span m="4670026">well, we have v extract Mins, so the time to do an extract</span> <span m="4677695">Min, whatever that is. And we have E decreased keys,</span> <span m="4685771">whatever that is, and this is exactly the running</span> <span m="4692013">time we had for Prim's algorithm for a minimum spanning tree last</span> <span m="4700336">time. And, it depends what data</span> <span m="4704237">structure you use, what running time you get.</span> </p>
<p><span m="4711000">So, I'm going to skip the whole table here.</span> </p>
<p><span m="4714688">But, if you use an array, the final running time will be</span> <span m="4719518">V^2 because you have order of v extract Min, and you have</span> <span m="4724436">constant time decreased key. If you use a binary heap,</span> <span m="4729090">which we know and love, then we have order log v for</span> <span m="4733568">each operation. And so, this is V plus E log V.</span> </p>
<p><span m="4737609">And, so that's what we know how to do.</span> </p>
<p><span m="4742000">And, if you use this fancy data structure called a Fibonacci</span> <span m="4746830">heap, you get constant time decreased key amortized.</span> </p>
<p><span m="4751005">And, you get an E plus v log v worst case bound on the running</span> <span m="4756000">time. So, this is the best we know</span> <span m="4758701">how to solve shortest paths without any extra assumptions,</span> <span m="4763368">single source shortest paths with non-negative edge weights</span> <span m="4768116">in general. OK, this is almost as good and</span> <span m="4772040">this is sometimes better than that.</span> </p>
<p><span m="4774353">But these are essentially irrelevant except that you know</span> <span m="4778163">how to do these. You don't know how to do a</span> <span m="4781020">Fibonacci heap unless you read that in the chapter of the book.</span> </p>
<p><span m="4785238">That's why we mention the top two running times.</span> </p>
<p><span m="4788434">OK, I want to talk briefly about a simpler case,</span> <span m="4791632">which you may have seen before. And so it's sort of fun to</span> <span m="4795510">connect this up to breadth first search in a graph.</span> </p>
<p><span m="4800000">So, I mean that ends Dijkstra, so to speak.</span> </p>
<p><span m="4803302">But now I want to think about a special case where the graph is</span> <span m="4808175">unweighted, meaning w of (u,v) equals one for all vertices,</span> <span m="4812737">u and v. OK, suppose we had that</span> <span m="4815174">property. Can we do any better than</span> <span m="4817847">Dijkstra? Can we do better than this</span> <span m="4820599">running time? Well, we probably have to look</span> <span m="4823980">at all the edges and all the vertices.</span> </p>
<p><span m="4826889">So, the only thing I'm questioning is this log v.</span> </p>
<p><span m="4832000">Can I avoid that? I gave away the answer a little</span> <span m="4836067">bit. The answer is called breadth</span> <span m="4838779">first search, or BFS, which you have probably</span> <span m="4842508">seen before. Next to depth first search,</span> <span m="4845813">it's one of the standard ways to look at the graph.</span> </p>
<p><span m="4850050">But we can say a little bit more than you may have seen</span> <span m="4854627">before. Breadth for search is actually</span> <span m="4857762">Dijkstra's algorithm: kind of nifty.</span> </p>
<p><span m="4862000">There are two changes. First change is that breadth</span> <span m="4868607">for search does not use a priority queue.</span> </p>
<p><span m="4873894">I'll just tell you what it uses instead.</span> </p>
<p><span m="4879048">You can use a queue first in first out honest-to-goodness</span> <span m="4886449">queue instead of a priority queue.</span> </p>
<p><span m="4892000">OK, it turns out that works. Instead of doing extract Min,</span> <span m="4896728">you just take the first thing off the queue.</span> </p>
<p><span m="4900295">Instead of doing decreased key, OK, here's a subtlety.</span> </p>
<p><span m="4904692">But, this if statement changes a little bit.</span> </p>
<p><span m="4908260">So, here is the relaxation step.</span> </p>
<p><span m="4910831">So, in order to relax, you say this much simpler</span> <span m="4914730">thing. If we haven't visited v yet,</span> <span m="4917550">then we declare it to have the shortest path weight,</span> <span m="4921782">say, d of v is d of u plus one, which is the weight of the</span> <span m="4926511">edge, (u,v). And we add v to the end of the</span> <span m="4932423">queue. So, now, we start with the</span> <span m="4936076">queue empty. Actually, it will just contain</span> <span m="4940869">the vertex, S, because that's the only thing</span> <span m="4945777">we know the shortest path for. So, the queue is just for,</span> <span m="4951347">I know the shortest path of this thing.</span> </p>
<p><span m="4953316">Just deal with it when you can't look at all the outgoing</span> <span m="4956217">edges when you can. So, initially that's just S.</span> </p>
<p><span m="4958652">You say, well, for all the outgoing edges,</span> <span m="4960777">S has zero. All the outgoing edges from</span> <span m="4962746">there have weight one. The shortest path weight from</span> <span m="4965388">the source is one. You certainly can't do any</span> <span m="4967668">better than that if all the weights are one.</span> </p>
<p><span m="4969896">OK, so we add all those vertices to the end of the</span> <span m="4972434">queue. Then, we process things in</span> <span m="4974093">order, and we just keep incrementing,</span> <span m="4975958">if their value is d of u, add one to it.</span> </p>
<p><span m="4977979">That's d of v. And then we are going to add v</span> <span m="4982543">to S what we get to it in the queue.</span> </p>
<p><span m="4985510">OK, that is breadth for search, very simple.</span> </p>
<p><span m="4989156">And, you can look at the text for the algorithm and for an</span> <span m="4993989">example because I don't have time to cover that.</span> </p>
<p><span m="4997973">But the key thing is that the time is faster.</span> </p>
<p><span m="5001704">The time is order V plus E because as before,</span> <span m="5005434">we only look at each edge once we look at all the outgoing</span> <span m="5010267">edges from all the vertices. As soon as we set d of v to</span> <span m="5014930">something, it will remain that. We never touch it.</span> </p>
<p><span m="5020079">We are going to add it to S. That only happens once.</span> </p>
<p><span m="5023136">So, this if statement, and so on, in the in-queuing,</span> <span m="5026193">is done order E times, or actually E times,</span> <span m="5028711">exactly. An in-queuing to a queue,</span> <span m="5030689">and de-queuing from a queue, that's what we use instead of</span> <span m="5034106">extract Min, take constant time, so the total running time,</span> <span m="5037583">number of vertices plus the number of edges.</span> </p>
<p><span m="5041000">OK, not so obvious that this works, but you can prove that it</span> <span m="5044580">works using the Dijkstra analysis.</span> </p>
<p><span m="5046550">All you have to do is prove that the FIFO priority queue.</span> </p>
<p><span m="5049891">Once you know that, by the correctness of Dijkstra</span> <span m="5052816">you get the correctness of breadth for search.</span> </p>
<p><span m="5055501">So, not only is breadth for search finding all the vertices,</span> <span m="5059022">which is maybe what you normally use it for,</span> <span m="5061588">but it finds the shortest path weights from S to every other</span> <span m="5065109">vertex when the weights are all one.</span> </p>
<p><span m="5067198">So, there we go: introduction to shortest paths.</span> </p>
<p><span m="5070003">Next time we'll deal with negative weights.</span> </p>
</div>
        <div id="vid_transcript" itemprop="description" class="tabContent hide">
<h2 class="subhead">Free Downloads</h2>
<h3 class="subsubhead">Video</h3>
<ul>
<li>iTunes U (<a href="https://itunes.apple.com/us/itunes-u/id341597754">MP4 - 175MB</a>)</li>
<li>Internet Archive (<a href="http://www.archive.org/download/MIT6.046JF05MPEG4/ocw-6.046-14nov2005-220k.mp4">MP4 - 346MB</a>)</li>
</ul>
<br><h3 class="subsubhead">Free Streaming</h3>
<ul><li><a href="http://videolectures.net/mit6046jf05_introduction_algorithms/">VideoLectures.net</a></li></ul>
<br><h3 class="subsubhead">Subtitle</h3>
<ul><li>English - US (<a href="../../../contents/video-lectures/lecture-17-shortest-paths-i-properties-dijkstras-algorithm-breadth-first-search/xhG2DyCX3uA.srt">SRT</a>)</li></ul>
</div>
    
   </div>  




      					 
        <div class="" id="parent-fieldname-bottom_html_area">
            
            
        </div>
    
                    </div>
<!--Course_inner_chip tag close -->
           		</div>
<!--Course_wrapper tag close --> 
            </div>
<!--left tag close -->
            <div id="right">
                <!--Begin Right Portion -->
                    <div>
    
<div id="portletwrapper-6f63772e7269676874746f70706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a646f6e617465" class="portletWrapper kssattr-portlethash-6f63772e7269676874746f70706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a646f6e617465">
<div class="portletStaticText portlet-static-donate"><p class="zero"><a href="http://ocw.mit.edu/donate"><img src="../../../common/images/button_donate-now.png" alt="Donate Now." class="donate"></a></p></div>

</div>




</div>

                	<div>
    



</div>


        <div class="" id="parent-fieldname-rsi_top_html_area">
            
            
        </div>
    

<!-- RSI google ad space-->


<div id="google_ads">    
    <script type="text/javascript" src="http://partner.googleadservices.com/gampad/google_service.js"></script><script type="text/javascript">GS_googleAddAdSenseService("ca-pub-6588555046597237");GS_googleEnableAllServices();</script><script type="text/javascript">GA_googleAddSlot("ca-pub-6588555046597237", "VIDEO_INDIVIDUAL_SLOT_A_DL");GA_googleAddSlot("ca-pub-6588555046597237", "VIDEO_INDIVIDUAL_SLOT_B_DL");GA_googleAddSlot("ca-pub-6588555046597237", "VIDEO_INDIVIDUAL_SLOT_C_DL");</script><script type="text/javascript">GA_googleFetchAds();</script><script language="javascript" type="text/javascript">
GA_googleAddAttr("TYPE","HOUSE");
GA_googleAddAttr("DEPARTMENT","6");
GA_googleAddAttr("CRS_BEG2","04");
GA_googleAddAttr("CRS_END","6J");
GA_googleAddAttr("SESSION","F");
GA_googleAddAttr("YEAR","05");
</script><script type="text/javascript">GA_googleFillSlot("VIDEO_INDIVIDUAL_SLOT_A_DL");</script><script type="text/javascript">GA_googleFillSlot("VIDEO_INDIVIDUAL_SLOT_B_DL");</script><script type="text/javascript">GA_googleFillSlot("VIDEO_INDIVIDUAL_SLOT_C_DL");</script>
</div>

<!-- End RSI ads--> 

<div>
    



</div>

            </div>
<!--Right div close -->
            <div class="clear"></div> 
        </div>
<!--grid tag close --> 
      </div>
		
		<div id="bottom">
			<div id="grid">
				
<div id="portletwrapper-6f63772e626f74746f6d706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d666f6f746572" class="portletWrapper kssattr-portlethash-6f63772e626f74746f6d706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d666f6f746572">
<div class="portletStaticText portlet-static-site-footer">
<!--googleoff: index--> <div id="bottom"><div id="grid">
<!-- *begin footer* --> <div role="navigation sitemap" id="footer">
<div class="grid_2 alpha" id="foot-c1">
<h4 class="footer">Find Courses</h4> <ul class="foot-bullet">
<li><a href="http://ocw.mit.edu/courses/find-by-topic/">Find by Topic</a></li>     <li><a href="http://ocw.mit.edu/courses/find-by-number/">Find by Course Number</a></li>     <li><a href="http://ocw.mit.edu/courses/find-by-department/">Find by Department</a></li>     <li><a href="http://ocw.mit.edu/courses/audio-video-courses/">Audio/Video Courses</a></li>     <li><a href="http://ocw.mit.edu/courses/subtitled/">Courses with Subtitles</a></li>     <li><a href="http://ocw.mit.edu/courses/online-textbooks/">Online Textbooks</a></li>     <li><a href="http://ocw.mit.edu/courses/new-courses/">New Courses</a></li>     <li><a href="http://ocw.mit.edu/courses/most-visited-courses/">Most Visited Courses</a></li>     <li><a href="http://ocw.mit.edu/courses/ocw-scholar/">OCW Scholar Courses</a></li>     <li><a href="http://ocw.mit.edu/courses/this-course-at-mit/">This Course at MIT</a></li>     <li><a href="http://ocw.mit.edu/resources/">Supplemental Resources</a></li>     <li><a href="http://ocw.mit.edu/courses/translated-courses/">Translated Courses</a></li>     <li><a href="http://ocw.mit.edu/courses/">View All Courses</a></li> </ul>
</div> <div class="grid_2" id="foot-c2">
<h4 class="footer">About</h4> <ul class="foot-bullet">
<li><a href="http://ocw.mit.edu/about/">About OpenCourseWare</a></li>     <li><a href="http://ocw.mit.edu/about/site-statistics/">Site Stats</a></li>     <li><a href="http://ocw.mit.edu/about/ocw-stories/">OCW Stories</a></li>     <li><a href="http://ocw.mit.edu/about/media-coverage/">Media Coverage</a></li>     <li><a href="http://ocw.mit.edu/about/newsletter/">Newsletter</a></li>     <li><a href="http://ocw.mit.edu/about/media-coverage/press-releases/">Press Releases</a></li> </ul>
</div> <div class="grid_2" id="foot-c3">
<h4 class="footer">Donate</h4> <ul class="foot-bullet">
<li><a href="http://ocw.mit.edu/donate">Make a Donation</a></li>     <li><a href="http://ocw.mit.edu/donate/why-donate/">Why Donate?</a></li>     <li><a href="http://ocw.mit.edu/donate/our-supporters/">Our Supporters</a></li>     <li><a href="http://ocw.mit.edu/donate/other-ways-to-contribute/">Other Ways to Contribute</a></li>     <li><a href="http://ocw.mit.edu/donate/shop-ocw/">Shop OCW</a></li>     <li><a href="http://ocw.mit.edu/support/">Become a Corporate Sponsor</a></li> </ul>
</div> <div class="grid_2" id="foot-c4">
<h4 class="footer">Featured Sites</h4> <ul class="foot-bullet">
<li><a href="http://ocw.mit.edu/high-school/">Highlights for High School</a></li>     <li><a href="http://ocw.mit.edu/educator/">OCW Educator</a></li>     <li><a href="http://ocw.mit.edu/courses/crosslinks/">MIT Crosslinks and OCW</a></li>     <li><a href="http://ocw.mit.edu/ans7870/featured/mitx-courses-on-edx.htm">MITx Courses on edX</a></li>     <li><a href="http://teachingexcellence.mit.edu/">Teaching Excellence at MIT</a></li>     <li><a href="http://www.oeconsortium.org/">Open Education Consortium</a></li> </ul>
<h4 style="margin-top: 14px;" class="footer">Tools</h4> <ul class="foot-bullet">
<li><a href="http://ocw.mit.edu/help/">Help &amp; FAQs</a></li>     <li><a href="../../../common/jsp/feedback.htm">Contact Us</a></li>     <li><a href="../../../common/search/AdvancedSearch.htm">Advanced Search</a></li>     <li><a href="http://ocw.mit.edu/help/site-map/">Site Map</a></li>     <li><a href="../../../common/terms/index.htm">Privacy &amp; Terms of Use</a></li>     <li><a href="http://ocw.mit.edu/help/rss/">RSS Feeds</a></li> </ul>
</div> <div class="grid_4 omega" id="foot-c5">
<h4 class="footer">Our Corporate Supporters</h4> <!-- HOME_CORP_LOGO_1 --> <div class="sponsors_google_ads_even" id="div-gpt-ad-1388181177156-0"><script type="text/javascript">
googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-0'); });
</script></div> <!-- HOME_CORP_LOGO_2 --> <div class="sponsors_google_ads_odd" id="div-gpt-ad-1388181177156-1"><script type="text/javascript">
googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-1'); });
</script></div> <!-- HOME_CORP_LOGO_3 --> <div class="sponsors_google_ads_even" id="div-gpt-ad-1388181177156-2"><script type="text/javascript">
googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-2'); });
</script></div> <!-- HOME_CORP_LOGO_4 --> <div class="sponsors_google_ads_odd" id="div-gpt-ad-1388181177156-3"><script type="text/javascript">
googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-3'); });
</script></div> <!-- HOME_CORP_LOGO_5 --> <div class="sponsors_google_ads_even" id="div-gpt-ad-1388181177156-4"><script type="text/javascript">
googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-4'); });
</script></div> <!-- HOME_CORP_LOGO_6 --> <div class="sponsors_google_ads_odd" id="div-gpt-ad-1388181177156-5"><script type="text/javascript">
googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-5'); });
</script></div>
</div> <div class="grid_12 alpha omega" style="border-top: thin solid #d5c9ba; padding-top: 24px; margin-bottom: 10px; text-align: center;"><p style="font-family: TitilliumText22LRegular,Verdana; text-align: center; font-size: 1.1em;">Support for <span style="letter-spacing: 0.5px;"><strong>MIT OPENCOURSEWARE'S 15th anniversary</strong></span> is provided by <a href="http://www.sapientnitro.com/en-us.html#home"><img style="width: 145px; height: 35px; vertical-align: middle; margin-left: 7px;" alt="SapientNitro logo and nameplate." src="../../../common/images/logo_sapient.png"></a></p></div> <div itemtype="http://schema.org/CollegeOrUniversity" itemscope="" itemprop="publisher" class="grid_12 alpha omega">
<h4 style="border-top: thin solid #d5c9ba; padding-top: 10px; margin-bottom: 10px;" class="footer">About <span itemprop="name">MIT OpenCourseWare</span>
</h4> <p itemprop="description" style="color: #999; font-size: 1em; line-height: 1.5em; margin-top: 10px;">MIT OpenCourseWare makes the materials used in the teaching of almost all of MIT's subjects available on the Web, free of charge. With more than 2,200 courses available, OCW is delivering on the promise of open sharing of knowledge. <a href="http://ocw.mit.edu/about/">Learn more »</a></p>
</div> <div style="border-top: none;" class="grid_12 alpha omega" id="foot-copy">
<a href="http://web.mit.edu"><img style="width: 195; height: 44;" alt="Massachusetts Institute of Technology logo and name." src="../../../common/images/logo_mit.png"></a><a href="http://odl.mit.edu"><img style="width: 289; height: 54; vertical-align: top;" alt="MIT Office of Digital Learning logo and name." src="http://ocw.mit.edu/images/logo_odl.png"></a><a href="http://www.oeconsortium.org/"><img style="width: 219px; height: 59px; vertical-align: top;" alt="Open Education Consortium logo." src="http://ocw.mit.edu/images/logo_oec.png"></a><a itemprop="useRightsUrl" rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/"><img style="width: 126px; height: 44px; margin-right: 0; margin-left: 13px;" alt="Creative Commons logo with terms BY-NC-SA." src="../../../common/images/cc_by-nc-sa.png"></a> <p class="copyright">© 2001–2015<br> Massachusetts Institute of Technology</p> <p style="font-size: 0.9em; margin-bottom: 15px;">Your use of the MIT OpenCourseWare site and materials is subject to our <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/">Creative Commons License</a> and other <a rel="cc:morePermissions" href="../../../common/terms/index.htm">terms of use</a>.</p>
</div>
</div>
</div></div> <!--googleon: index-->
</div>

</div>





                
			</div> <!-- bottom grid end -->
		</div>
<!-- bottom end -->
		
		
   </body>
</html>
