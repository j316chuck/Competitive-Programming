<!DOCTYPE html><html lang="en">
<head>
<meta charset="utf-8">
<meta name="format-detection" content="telephone=no">
<title>Lecture 10: Red-black Trees, Rotations, Insertions, Deletions | Video Lectures | Introduction to Algorithms (SMA 5503) | Electrical Engineering and Computer Science | MIT OpenCourseWare</title>
<!-- Begin Automatic Metadata Insertion --><meta content="6-046j-introduction-to-algorithms-sma-5503-fall-2005" name="WT.cg_n">
<meta content="Lecture 10: Red-black Trees, Rotations, Insertions, Deletions" name="WT.cg_s">
<meta content="" name="Description">
<meta content="Leiserson, Charles" name="Author">
<meta content="Demaine, Erik" name="Author">
<meta content="algorithms,efficient algorithms,sorting,search trees,heaps,hashing,divide-and-conquer,dynamic programming,amortized analysis,graph algorithms,shortest paths,network flow,computational geometry,number-theoretic algorithms,polynomial and matrix calculations,caching,parallel computing,Algorithms and Data Structures" name="keywords">
<meta content="6.046J Introduction to Algorithms (SMA 5503) | Lecture 10: Red-black Trees, Rotations, Insertions, Deletions" name="Search_Display">
<meta content="Algorithms and Data Structures" itemprop="about">
<!-- End Automatic Metadata Insertion --><link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/grid.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/base.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/menu.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/jquery.bubblepopup.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/courses.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/courses_new.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/jquery.jscrollpane.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/media_tabs.css">
<link href="http://ocw.mit.edu/xml/ocwcc.rdf" type="application/rdf+xml" rel="metadata">
<link rel="canonical" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-046j-introduction-to-algorithms-sma-5503-fall-2005/video-lectures/lecture-10-red-black-trees-rotations-insertions-deletions">
<link rel="apple-touch-icon" href="../../../common/images/apple-touch-icon.png">
<script type="text/javascript" src="../../../common/scripts/jquery.js"></script><script type="text/javascript" src="../../../common/scripts/ocw-media-utils-offline.js"></script><script type="text/javascript" src="../../../common/scripts/ocw-offline.js"></script><script type="text/javascript" src="../../../common/scripts/jquery.bubblepopup.min.js"></script><script type="text/javascript" src="../../../common/scripts/jquery-ui.min.js"></script><script type="text/javascript" src="../../../common/scripts/jquery.jscrollpane.min.js"></script><script type="text/javascript" src="../../../common/scripts/bubble-popup-offline.js"></script><script type="text/javascript">
      $(document).ready(function() {
        $("#tabs").tabs();
        IpadScroller();
      });
    </script>
</head>
<body itemscope itemtype="http://schema.org/WebPage">
        
	

        <div id="top">
			<div id="grid">
				
				
					
<div id="portletwrapper-6f63772e746f70706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d686561646572" class="portletWrapper kssattr-portlethash-6f63772e746f70706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d686561646572">
<div class="portletStaticText portlet-static-site-header">
<!--googleoff: index-->
<div class="grid_6 alpha" role="banner" id="banner"><a href="http://ocw.mit.edu/"><img class="logo" alt="MIT OpenCourseWare, Massachusetts Institute of Technology" src="../../../common/images/ocw_mast.png"></a></div>
<div class="grid_6 omega" role="form toolbar" id="subscribe">
<div class="module">
<table class="social"><tbody><tr>
<td class="socialbutton"><a href="http://ocw.mit.edu/subscribe/index.htm?utm_source=header"><img src="../../../common/images/trans.gif" alt="An icon depicting an envelope.">Subscribe to the OCW Newsletter</a></td>
            <td>
<a href="https://plus.google.com/104567381989352550847/posts"><img alt="Click to visit our Google+ page." src="../../../common/images/icon_gp.png"></a><a href="https://www.pinterest.com/mitocw/pins/"><img alt="Click to visit our Pinterest page." src="../../../common/images/icon_pin.png"></a><a href="http://facebook.com/mitocw"><img alt="Click to visit our Facebook page." src="../../../common/images/icon_fb.png"></a><a href="http://twitter.com/mitocw"><img alt="Click to visit our Twitter feed." src="../../../common/images/icon_tw.png"></a>
</td>
        </tr></tbody></table>
</div>
<p class="helplinks"><a href="http://ocw.mit.edu/help">Help</a>   |   <a href="../../../common/jsp/feedback.htm">Contact Us</a></p>
</div>
<div class="clear"> </div>
<!--googleon: index-->
</div>

</div>





<!--googleoff: index-->
<div id="mega" role="navigation" class="grid_8 alpha">        
	<ul id="menu">
<li id="menu_home">
            <a href="http://ocw.mit.edu/"><img src="../../../common/images/top-nav_home.png" class="home_icon" alt="Click for site home page."></a><!-- Begin Home Item -->
        </li>
<!-- End Home Item -->        
        <li class="selected">
            <a href="#" class="drop">Find Courses</a><!-- Begin 5 columns Item -->
            <div class="dropdown_5columns-a mega-courses">                    
                <div class="col_1a">
                    <div class="row_1a">
                        <div class="quart">
                            <h2 class="nav">Find courses by:</h2>
                            <ul class="nav-bullet find_by">
<li><a href="http://ocw.mit.edu/courses/find-by-topic/">Topic</a></li>
                                <li><a href="http://ocw.mit.edu/courses/find-by-number/">MIT Course Number</a></li>
                                <li><a href="http://ocw.mit.edu/courses/find-by-department/">Department</a></li>
                            </ul>
<ul style="margin-top: 88px;" class="nav-bullet find_by">
<li style="font-weight: normal; font-size: 1em;"><a href="http://ocw.mit.edu/courses/">View All Courses</a></li>
							</ul>
</div>
                        <div class="quart">
                            <h2 class="nav">Collections</h2>
                            <ul class="nav-bullet">
<li><a href="http://ocw.mit.edu/courses/audio-video-courses/">Audio/Video Lectures</a></li>
                                <li><a href="http://ocw.mit.edu/courses/online-textbooks/">Online Textbooks</a></li>
                                <li><a href="http://ocw.mit.edu/courses/new-courses/">New Courses</a></li>
                                <li><a href="http://ocw.mit.edu/courses/most-visited-courses/">Most Visited Courses</a></li>
                                <li><a href="http://ocw.mit.edu/courses/ocw-scholar/">OCW Scholar Courses</a></li>
                                <li><a href="http://ocw.mit.edu/courses/this-course-at-mit/">This Course at MIT</a></li>
                                <li><a href="http://ocw.mit.edu/resources/">Supplemental Resources</a></li>
                            </ul>
</div>
                        <div class="clear"> </div>
                    </div>
                    <div class="row_1b">
                        <h2 class="nav">Cross-Disciplinary Topic Lists</h2>
                        <div class="quart">
                        <ul class="nav-bullet">
<li><a href="http://ocw.mit.edu/courses/energy-courses">Energy</a></li>
                            <li><a href="http://ocw.mit.edu/courses/entrepreneurship">Entrepreneurship</a></li>
                            <li><a href="http://ocw.mit.edu/courses/environment-courses">Environment</a></li>
                        </ul>
</div>    
                        <div class="quart">
                        <ul class="nav-bullet">
<li><a href="http://ocw.mit.edu/courses/intro-programming">Introductory Programming</a></li>
                            <li><a href="http://ocw.mit.edu/courses/life-sciences">Life Sciences</a></li>
                            <li><a href="http://ocw.mit.edu/courses/transportation-courses">Transportation</a></li>
                        </ul>
</div>
                        <div class="clear"> </div>
                    </div>
                    <div class="clear"> </div>
                </div>
                <div class="col_1b">
                    <h2 class="nav">Translated Courses</h2>
                    <ul class="nav-bullet">
<li><a href="http://ocw.mit.edu/courses/translated-courses/traditional-chinese">繁體字 / Traditional Chinese</a></li>
                        <li><a href="http://ocw.mit.edu/courses/translated-courses/spanish">Español / Spanish</a></li>
                        <li><a href="http://ocw.mit.edu/courses/translated-courses/portuguese">Português / Portuguese</a></li>
                        <li><a href="http://ocw.mit.edu/courses/translated-courses/persian">فارسی / Persian</a></li>
                        <li><a href="http://ocw.mit.edu/courses/translated-courses/turkish">Türkçe / Turkish</a></li>
                        <li><a href="http://ocw.mit.edu/courses/translated-courses/korean">(비디오)한국 / Korean</a></li>
                        <li><a href="http://ocw.mit.edu/courses/translated-courses">More...</a></li>
                    </ul>
</div>
            </div>
        </li>
        <li>
            <a href="" class="drop">About</a>
            <div class="dropdown_1column-a">
                <div class="col_1">
                    <ul class="nav-bullet mega-div-bottom">
<li><a href="http://ocw.mit.edu/about/">About MIT OpenCourseWare</a></li>
                    </ul>
<ul class="nav-bullet mega-div-bottom">
<li><a href="http://ocw.mit.edu/about/site-statistics/">Site Stats</a></li>
                        <li><a href="http://ocw.mit.edu/about/ocw-stories/">OCW Stories</a></li>                        
                    </ul>
<ul class="nav-bullet">
<li><a href="http://ocw.mit.edu/about/media-coverage/">Media Coverage</a></li>
                        <li><a href="http://ocw.mit.edu/about/newsletter/">Newsletter</a></li>                        
                    </ul>
</div>
            </div>  
        </li>    
        <li>
            <a href="" class="drop">Donate</a>        
            <div class="dropdown_1column-a">
                    <div class="col_1">
                        <ul class="nav-bullet mega-div-bottom">
<li><a href="http://ocw.mit.edu/donate/">Make a Donation</a></li>
                            <li><a href="http://ocw.mit.edu/donate/why-donate/">Why Donate?</a></li>
                            <li><a href="http://ocw.mit.edu/donate/our-supporters/">Our Supporters</a></li>
                            <li><a href="http://ocw.mit.edu/donate/other-ways-to-contribute/">Other Ways to Contribute</a></li>
                            <li><a href="http://ocw.mit.edu/donate/shop-ocw">Shop OCW</a></li>
                        </ul>
<ul class="nav-bullet">
<li><a href="http://ocw.mit.edu/support/">Become a Corporate Sponsor</a></li>
                        </ul>
</div>
            </div>            
        </li>        
        <li>
            <a href="" class="drop">Featured Sites</a>        
            <div class="dropdown_1column-a">
                <div class="col_1">
                    <ul class="nav-bullet mega-div-bottom">
<li><a href="http://ocw.mit.edu/high-school/">Highlights for High School</a></li>
                        <li><a href="http://ocw.mit.edu/educator/">OCW Educator</a></li>
                        <li><a href="http://ocw.mit.edu/courses/crosslinks/">MIT Crosslinks and OCW</a></li>                        
                    </ul>
<ul class="nav-bullet mega-div-top">
<li><a href="http://ocw.mit.edu/ans7870/featured/mitx-courses-on-edx.htm">MITx Courses on edX</a></li>
                        <li><a href="http://teachingexcellence.mit.edu/">Teaching Excellence at MIT</a></li>
						<li><a href="http://www.oeconsortium.org/">Open Education Consortium</a></li>
                    </ul>
</div>
            </div>            
        </li>
    </ul>
</div>
<div id="search" role="search" class="grid_4 omega">
    
    <form method="get" action="../../../common/search/AdvancedSearch.htm">
     	 <table class="search"><tbody><tr>
<td class="black"><input type="text" onblur="fillSearchBox()" onfocus="clearSearchBox()" maxlength="255" value="Search" name="q" class="greytext searchField" id="terms"></td> 			 
                    <td class="black"><input type="image" src="../../../common/images/button_search.png" name="btnG" class="sub_button"></td>			 
                    <td class="text2"><a href="../../../common/search/AdvancedSearch.htm">Advanced<br>Search</a></td>
                </tr></tbody></table>
</form>
</div>
<div class="clear"></div>
<!--googleon: index-->
<!-- *end header* -->  

				
				
			</div>
<!-- top grid end -->
		</div>
<!-- top end -->
			
		<div id="center_media">
      	<div id="grid">
      		<div id="left">
        		<div id="breadcrumb_media">
                	<p>

    <a href="http://ocw.mit.edu/">Home</a>
    
        »
        
    
    
        
            <a href="http://ocw.mit.edu/courses">Courses</a>
            
                »
                
            
            
         
    
    
        
            <a href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science">Electrical Engineering and Computer Science</a>
            
                »
                
            
            
         
    
    
        
            <a href="../../../contents/index.htm">Introduction to Algorithms (SMA 5503)</a>
            
                »
                
            
            
         
    
    
        
            <a href="../../../contents/video-lectures/index.htm">Video Lectures</a>
            
                »
                
            
            
         
    
    
        
            
            
            Lecture 10: Red-black Trees, Rotations, Insertions, Deletions
         
    
</p>

            	</div>
            	<div class="clear"></div>
        		<div id="media_title">
        		<h1 class="title" itemprop="name" property="dct:title">
        <span class="" id="parent-fieldname-title">
            Lecture 10: Red-black Trees, Rotations, Insertions, Deletions
        </span>
    </h1>
        		</div>
           		<div class="clear"></div>
           		<div id="course_wrapper_media">
           			<div id="course_nav">
           				<script language="javascript" type="text/javascript">
function toggleMenu(objID) {
  if (!document.getElementById) return;
  var ob = document.getElementById(objID);
  ob.className = (ob.className == 'selected')?'': 'selected';
}
function toggleClass(id)
{
  var divtoggleClass= document.getElementById(id);
  divtoggleClass.className = (divtoggleClass.className == 'mO')?'mC': 'mO';
  return false;
}
function changeAlt(id)
{
  id.alt = (id.alt == 'Expand Menu')?'Collapse Menu' : 'Expand Menu';
  id.title = (id.title == 'Expand Menu')?'Collapse Menu' : 'Expand Menu';
}
</script><!--Left Nav Starts --><ul>
<li class="">
			   			<a href="../../../contents/index.htm">
		                  Course Home  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/syllabus/index.htm">
		                  Syllabus  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/calendar/index.htm">
		                  Calendar  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/readings/index.htm">
		                  Readings  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/assignments/index.htm">
		                  Assignments  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/exams/index.htm">
		                  Exams  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="selected">
			   			<a href="../../../contents/video-lectures/index.htm">
		                  Video Lectures  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    
		    
         	
	<!--second tal block close-->  
	
</ul>
<!--Left Nav Ends -->
</div>
           			<div id="course_inner_media">
      					 
        <div class="" id="parent-fieldname-text">
            
            
        </div>
    
      					 

<script type="text/javascript">var caption_embed_1 ={'English - US': '/courses/electrical-engineering-and-computer-science/6-046j-introduction-to-algorithms-sma-5503-fall-2005/video-lectures/lecture-10-red-black-trees-rotations-insertions-deletions/O3hI9FdxFOM.srt'}</script><div id="media-embed">
         <div class="attention_message" id="embed_1">
<p>Flash and JavaScript are required for this feature.</p>
<p>Download the video from <a href="https://itunes.apple.com/us/itunes-u/id341597754">iTunes U</a> or the <a href="http://www.archive.org/download/MIT6.046JF05MPEG4/ocw-6.046-19oct2005-220k.mp4">Internet Archive</a>.</p>
</div>
     </div>
    
     <script type="text/javascript">ocw_embed_chapter_media('embed_1', 'http://www.youtube.com/v/O3hI9FdxFOM', 'youtube', '/courses/electrical-engineering-and-computer-science/6-046j-introduction-to-algorithms-sma-5503-fall-2005/video-lectures/lecture-10-red-black-trees-rotations-insertions-deletions', 'http://img.youtube.com/vi/O3hI9FdxFOM/0.jpg',0,0, 'http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-046j-introduction-to-algorithms-sma-5503-fall-2005/video-lectures/lecture-10-red-black-trees-rotations-insertions-deletions/O3hI9FdxFOM.srt')</script><div id="transcript1"></div>
				 <script type="text/javascript">setThreePlayTranscriptPlugin(2, 1004248)</script><script type="text/javascript" src="http://p3.3playmedia.com/p3.js"></script><div id="media_resource_next_prev_nav" style="margin-top: 1em;">
        <p>
        
            <a href="../../../contents/video-lectures/lecture-9-relation-of-bsts-to-quicksort-analysis-of-random-bst/index.htm">
                <img src="../../../common/images/btn_previous_resource.png" style="margin: 0 30px 0 50px;" alt="Previous track" title="Previous track"></a>
     	
     	
        
            <a href="../../../contents/video-lectures/lecture-11-augmenting-data-structures-dynamic-order-statistics-interval-trees/index.htm"> 
                <img src="../../../common/images/btn_next_resource.png" alt="Next track" title="Next track"></a>
       
       </p>
     </div>
 


<script type="text/javascript">
		window.onload=function(){
		init();
		
		}
		var tabLinks = new Array();
		var contentDivs = new Array();
		function init() {
		  // Grab the tab links and content divs from the page
		  var tabListItems = document.getElementById('tabs').childNodes;
		  for ( var i = 0; i < tabListItems.length; i++ ) {
			if ( tabListItems[i].nodeName == "LI" ) {
			  var tabLink = getFirstChildWithTagName( tabListItems[i], 'A' );
			  var id = getHash( tabLink.getAttribute('href') );
			  tabLinks[id] = tabLink;
			  contentDivs[id] = document.getElementById( id );
			}
		  }
		  // Assign onclick events to the tab links, and
		  // highlight the first tab
		  var i = 0;
		  for ( var id in tabLinks ) {
			tabLinks[id].onclick = showTab;
			tabLinks[id].onfocus = function() { this.blur() };
			if ( i == 0 ) tabLinks[id].className = 'selected';
			i++;
		  }
		  // Hide all content divs except the first
		  var i = 0;
		  for ( var id in contentDivs ) {
			if ( i != 0 ) contentDivs[id].className = 'tabContent hide';
			i++;
		  }
		}
		function showTab() {
		  var selectedId = getHash( this.getAttribute('href') );
		  // Highlight the selected tab, and dim all others.
		  // Also show the selected content div, and hide all others.
		  for ( var id in contentDivs ) {
			if ( id == selectedId ) {
			  tabLinks[id].className = 'selected';
			  contentDivs[id].className = 'tabContent';
			} else {
			  tabLinks[id].className = '';
			  contentDivs[id].className = 'tabContent hide';
			}
		  }
		  // Stop the browser following the link
		  return false;
		}
		function getFirstChildWithTagName( element, tagName ) {
		  for ( var i = 0; i < element.childNodes.length; i++ ) {
			if ( element.childNodes[i].nodeName == tagName ) return element.childNodes[i];
		  }
		}
		function getHash( url ) {
		  var hashPos = url.lastIndexOf ( '#' );
		  return url.substring( hashPos + 1 );
		}
 </script><div id="media_tabs">
     
        <ul id="tabs">
<li class="first">
                <a href="#vid_about" class="selected">About this Video</a>
            </li>
            <li class="">
                <a href="#vid_index" class="">Playlist</a>
            </li>
            <li class="">
                <a href="#vid_playlist" class="">Related Resources</a>
            </li>
            <li class="">
                <a href="#vid_related" class="">Transcript</a>
            </li>
            <li class="">
                <a href="#vid_transcript" class="">Download this Video</a>
            </li>
        </ul>
<div id="vid_about" itemprop="description" class="tabContent">
<p><strong>Topics covered:</strong> Red-black Trees, Rotations, Insertions, Deletions</p>
<p><strong>Instructors:</strong> Prof. Erik Demaine, Prof. Charles Leiserson</p>
</div>
        <div id="vid_index" itemprop="description" class="tabContent hide">
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-1-administrivia-introduction-analysis-of-algorithms-insertion-sort-mergesort/index.htm">
<img src="../../../contents/video-lectures/lecture-1-administrivia-introduction-analysis-of-algorithms-insertion-sort-mergesort/6_046J_lec01_th.jpg" title="Lecture 1: Administrivia; Introduction; Analysis of Algorithms, Insertion Sort, Mergesort" alt="Lecture 1: Administrivia; Introduction; Analysis of Algorithms, Insertion Sort, Mergesort"><p>Lecture 1: Administrivia; I...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-2-asymptotic-notation-recurrences-substitution-master-method/index.htm">
<img src="../../../contents/video-lectures/lecture-2-asymptotic-notation-recurrences-substitution-master-method/6_046J_lec02_th.jpg" title="Lecture 2: Asymptotic Notation; Recurrences; Substitution, Master Method" alt="Lecture 2: Asymptotic Notation; Recurrences; Substitution, Master Method"><p>Lecture 2: Asymptotic Notat...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-3-divide-and-conquer-strassen-fibonacci-polynomial-multiplication/index.htm">
<img src="../../../contents/video-lectures/lecture-3-divide-and-conquer-strassen-fibonacci-polynomial-multiplication/6_046J_lec03_th.jpg" title="Lecture 3: Divide-and-Conquer: Strassen, Fibonacci, Polynomial Multiplication" alt="Lecture 3: Divide-and-Conquer: Strassen, Fibonacci, Polynomial Multiplication"><p>Lecture 3: Divide-and-Conqu...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-4-quicksort-randomized-algorithms/index.htm">
<img src="../../../contents/video-lectures/lecture-4-quicksort-randomized-algorithms/6_046J_lec04_th.jpg" title="Lecture 4: Quicksort, Randomized Algorithms" alt="Lecture 4: Quicksort, Randomized Algorithms"><p>Lecture 4: Quicksort, Rando...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-5-linear-time-sorting-lower-bounds-counting-sort-radix-sort/index.htm">
<img src="../../../contents/video-lectures/lecture-5-linear-time-sorting-lower-bounds-counting-sort-radix-sort/6_046J_lec05_th.jpg" title="Lecture 5: Linear-time Sorting: Lower Bounds, Counting Sort, Radix Sort" alt="Lecture 5: Linear-time Sorting: Lower Bounds, Counting Sort, Radix Sort"><p>Lecture 5: Linear-time Sort...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-6-order-statistics-median/index.htm">
<img src="../../../contents/video-lectures/lecture-6-order-statistics-median/6_046J_lec06_th.jpg" title="Lecture 6: Order Statistics, Median" alt="Lecture 6: Order Statistics, Median"><p>Lecture 6: Order Statistics...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-7-hashing-hash-functions/index.htm">
<img src="../../../contents/video-lectures/lecture-7-hashing-hash-functions/6_046J_lec07_th.jpg" title="Lecture 7: Hashing, Hash Functions" alt="Lecture 7: Hashing, Hash Functions"><p>Lecture 7: Hashing, Hash Fu...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-8-universal-hashing-perfect-hashing/index.htm">
<img src="../../../contents/video-lectures/lecture-8-universal-hashing-perfect-hashing/6_046J_lec08_th.jpg" title="Lecture 8: Universal Hashing, Perfect Hashing" alt="Lecture 8: Universal Hashing, Perfect Hashing"><p>Lecture 8: Universal Hashin...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-9-relation-of-bsts-to-quicksort-analysis-of-random-bst/index.htm">
<img src="../../../contents/video-lectures/lecture-9-relation-of-bsts-to-quicksort-analysis-of-random-bst/6_046J_lec09_th.jpg" title="Lecture 9: Relation of BSTs to Quicksort - Analysis of Random BST" alt="Lecture 9: Relation of BSTs to Quicksort - Analysis of Random BST"><p>Lecture 9: Relation of BSTs...</p></a>
</div>
<div class="related-media-thumbnail-nolink">
<div class="now-playing-resource">Now Playing</div>
<img src="../../../contents/video-lectures/lecture-10-red-black-trees-rotations-insertions-deletions/6_046J_lec10_th.jpg" title="Lecture 10: Red-black Trees, Rotations, Insertions, Deletions" alt="Lecture 10: Red-black Trees, Rotations, Insertions, Deletions"><p>Lecture 10: Red-black Trees...</p>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-11-augmenting-data-structures-dynamic-order-statistics-interval-trees/index.htm">
<img src="../../../contents/video-lectures/lecture-11-augmenting-data-structures-dynamic-order-statistics-interval-trees/6_046J_lec11_th.jpg" title="Lecture 11: Augmenting Data Structures, Dynamic Order Statistics, Interval Trees" alt="Lecture 11: Augmenting Data Structures, Dynamic Order Statistics, Interval Trees"><p>Lecture 11: Augmenting Data...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-12-skip-lists/index.htm">
<img src="../../../contents/video-lectures/lecture-12-skip-lists/6_046J_lec12_th.jpg" title="Lecture 12: Skip Lists" alt="Lecture 12: Skip Lists"><p>Lecture 12: Skip Lists</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-13-amortized-algorithms-table-doubling-potential-method/index.htm">
<img src="../../../contents/video-lectures/lecture-13-amortized-algorithms-table-doubling-potential-method/6_046J_lec13_th.jpg" title="Lecture 13: Amortized Algorithms, Table Doubling, Potential Method" alt="Lecture 13: Amortized Algorithms, Table Doubling, Potential Method"><p>Lecture 13: Amortized Algor...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-14-competitive-analysis-self-organizing-lists/index.htm">
<img src="../../../contents/video-lectures/lecture-14-competitive-analysis-self-organizing-lists/6_046J_lec14_th.jpg" title="Lecture 14: Competitive Analysis: Self-organizing Lists" alt="Lecture 14: Competitive Analysis: Self-organizing Lists"><p>Lecture 14: Competitive Ana...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-15-dynamic-programming-longest-common-subsequence/index.htm">
<img src="../../../contents/video-lectures/lecture-15-dynamic-programming-longest-common-subsequence/6_046J_lec15_th.jpg" title="Lecture 15: Dynamic Programming, Longest Common Subsequence" alt="Lecture 15: Dynamic Programming, Longest Common Subsequence"><p>Lecture 15: Dynamic Program...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-16-greedy-algorithms-minimum-spanning-trees/index.htm">
<img src="../../../contents/video-lectures/lecture-16-greedy-algorithms-minimum-spanning-trees/6_046J_lec16_th.jpg" title="Lecture 16: Greedy Algorithms, Minimum Spanning Trees" alt="Lecture 16: Greedy Algorithms, Minimum Spanning Trees"><p>Lecture 16: Greedy Algorith...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-17-shortest-paths-i-properties-dijkstras-algorithm-breadth-first-search/index.htm">
<img src="../../../contents/video-lectures/lecture-17-shortest-paths-i-properties-dijkstras-algorithm-breadth-first-search/6_046J_lec17_th.jpg" title="Lecture 17: Shortest Paths I: Properties, Dijkstra's Algorithm, Breadth-first Search" alt="Lecture 17: Shortest Paths I: Properties, Dijkstra's Algorithm, Breadth-first Search"><p>Lecture 17: Shortest Paths ...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-18-shortest-paths-ii-bellman-ford-linear-programming-difference-constraints/index.htm">
<img src="../../../contents/video-lectures/lecture-18-shortest-paths-ii-bellman-ford-linear-programming-difference-constraints/6_046J_lec18_th.jpg" title="Lecture 18: Shortest Paths II: Bellman-Ford, Linear Programming, Difference Constraints" alt="Lecture 18: Shortest Paths II: Bellman-Ford, Linear Programming, Difference Constraints"><p>Lecture 18: Shortest Paths ...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-19-shortest-paths-iii-all-pairs-shortest-paths-matrix-multiplication-floyd-warshall-johnson/index.htm">
<img src="../../../contents/video-lectures/lecture-19-shortest-paths-iii-all-pairs-shortest-paths-matrix-multiplication-floyd-warshall-johnson/6_046J_lec19_th.jpg" title="Lecture 19: Shortest Paths III: All-pairs Shortest Paths, Matrix Multiplication, Floyd-Warshall, Johnson" alt="Lecture 19: Shortest Paths III: All-pairs Shortest Paths, Matrix Multiplication, Floyd-Warshall, Johnson"><p>Lecture 19: Shortest Paths ...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-22-advanced-topics/index.htm">
<img src="../../../contents/video-lectures/lecture-22-advanced-topics/6_046J_lec22_th.jpg" title="Lecture 22: Advanced Topics" alt="Lecture 22: Advanced Topics"><p>Lecture 22: Advanced Topics</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-23-advanced-topics-cont./index.htm">
<img src="../../../contents/video-lectures/lecture-23-advanced-topics-cont./6_046J_lec23_th.jpg" title="Lecture 23: Advanced Topics (cont.)" alt="Lecture 23: Advanced Topics (cont.)"><p>Lecture 23: Advanced Topics...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-24-advanced-topics-cont./index.htm">
<img src="../../../contents/video-lectures/lecture-24-advanced-topics-cont./6_046J_lec24_th.jpg" title="Lecture 24: Advanced Topics (cont.)" alt="Lecture 24: Advanced Topics (cont.)"><p>Lecture 24: Advanced Topics...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-25-advanced-topics-cont.-discussion-of-follow-on-classes/index.htm">
<img src="../../../contents/video-lectures/lecture-25-advanced-topics-cont.-discussion-of-follow-on-classes/6_046J_lec25_th.jpg" title="Lecture 25: Advanced Topics (cont.) - Discussion of Follow-on Classes" alt="Lecture 25: Advanced Topics (cont.) - Discussion of Follow-on Classes"><p>Lecture 25: Advanced Topics...</p></a>
</div>
</div>
        <div id="vid_playlist" itemprop="description" class="tabContent hide">
<h2 class="subhead">Related Resources</h2>
<p>Lecture Notes (<a target="_blank" href="../../../contents/video-lectures/lecture-10-red-black-trees-rotations-insertions-deletions/lec10.pdf">PDF</a>)<br><a href="../../../contents/assignments/index.htm">Assignments</a><br><a href="../../../contents/exams/index.htm">Exams</a></p>
</div>
        <div id="vid_related" itemprop="description" class="tabContent hide">
<ul><li><a class="transcript-link" title="Open in a new window." alt="Open in a new window." style="text-decoration: none; font-size: 1.0em;" target="_blank" text-decoration: none font-size: href="../../../contents/video-lectures/lecture-10-red-black-trees-rotations-insertions-deletions/O3hI9FdxFOM.pdf"> Download this transcript - PDF (English - US)</a></li></ul>
<p><span m="7000"> Good morning. It looks like 9:30 is getting</span> <span m="10000">earlier and earlier for everyone.</span> <span m="13000">Hello to all the people watching at home.</span> <span m="15000">And, it has two black leaves</span> <span m="17000">I think there should be a requirement that if you're</span> <span m="22000">watching the video, you can only watch it</span> <span m="26000">9:30-11:00 on Sunday, or at least start watching then</span> <span m="31000">just so you can all feel our mornings.</span> <span m="36000">Today, we're going to talk about balanced search trees.</span> <span m="40000">Now, we've hinted at this for a while.</span> <span m="42000">Our goal today is to get a search tree data structure,</span> <span m="46000">so we can insert, delete, and search all at log n</span> <span m="50000">time for operations. So, we want a tree that's</span> <span m="53000">guaranteed to be log n in height.</span> <span m="56000">So, that's a balanced search tree data structure.</span> <span m="73000">And, we want a data structure that can maintain a dynamic set</span> <span m="78000">of n elements in log n time for operation.</span> <span m="92000">So, we'll say, using a tree of height order</span> <span m="95000">log n. Now, if you look very closely,</span> <span m="98000">we haven't actually defined what a search tree data</span> <span m="102000">structure is. We've defined what a binary</span> <span m="105000">search tree data structure is, and that's one particular kind.</span> <span m="110000">And that's what we will be focusing on today.</span> <span m="114000">In recitation on Friday, we will look at,</span> <span m="117000">or you will like that, balanced search trees that are</span> <span m="121000">not necessarily binary. Each node can have a constant</span> <span m="127000">number of children, not just two.</span> <span m="129000">So, I'm defining is generally. You actually see what a search</span> <span m="133000">tree is in the general case later on.</span> <span m="135000">Today, we will just be focusing on the binary case.</span> <span m="139000">So, I won't define this yet. So, there are a lot of</span> <span m="142000">different balanced search tree data structures.</span> <span m="146000">So, these are the main ones that I know of.</span> <span m="150000">The first one was AVL trees. This was invented in 1962.</span> <span m="155000">So, that was the beginning of fast data structures.</span> <span m="161000">The next three sort of come together and this is what you</span> <span m="167000">will cover in recitation this week.</span> <span m="171000">So, these are non binary trees. Instead of binary,</span> <span m="176000">we have maybe binary and tertiary, or maybe binary and</span> <span m="182000">tertiary, or quaternary, over a general concept degree,</span> <span m="188000">B. So, that's another way you can</span> <span m="193000">get balance. Two-three trees,</span> <span m="196000">which were the second trees to be invented, they were invented</span> <span m="202000">in 1970 by Hopcroft. The trees we will cover today</span> <span m="207000">are called red black trees. These are binary search trees</span> <span m="213000">of guaranteed logarithmic height.</span> <span m="218000">So then, there's some others. So, skip lists are ones that we</span> <span m="224000">will cover next week. It's not exactly a tree,</span> <span m="229000">but it's more or less a tree, and one that you will see in</span> <span m="235000">your problem set this week are treeps, which I won't talk too</span> <span m="242000">much about here. But they are in some sense</span> <span m="246000">easier to get because they essentially just rely on the</span> <span m="249000">material from last Monday. So, on Monday we saw that if we</span> <span m="253000">just randomly built a binary search tree, it's going to have</span> <span m="256000">log n height most of the time in expectation.</span> <span m="259000">So, treeps are a way to make that dynamic,</span> <span m="262000">so that instead of just having a static set of n items,</span> <span m="265000">you can insert and delete into those items and still</span> <span m="268000">effectively randomly permute them and put them in a tree.</span> <span m="273000">So in some sense, it's the easiest.</span> <span m="275000">It's also one of the most recent search tree data</span> <span m="279000">structures. That was invented in 1996 by a</span> <span m="282000">couple of geometers, Rimon Sidell and Aragen.</span> <span m="285000">So, those are just some search tree data structures.</span> <span m="289000">The only ones we will not cover in this class are AVL trees.</span> <span m="293000">They're not too hard. If you're interested,</span> <span m="297000">you should read about them because they're fun.</span> <span m="300000">I think they are a problem in the textbook.</span> <span m="305000">OK, but today, we're going to focus on red</span> <span m="310000">black trees, which is a fairly simple idea, red black trees.</span> <span m="317000">And, it's a particular way of guaranteeing this logarithmic</span> <span m="324000">height so that all the operations can be supported in</span> <span m="330000">log n time. So, they are binary search</span> <span m="336000">trees. And, they have a little bit of</span> <span m="340000">extra information in each node called the color field.</span> <span m="362000">And there are several properties that a tree with a</span> <span m="366000">color field has to satisfy in order to be called a red black</span> <span m="371000">tree. These are called the red black</span> <span m="374000">properties. And, this will take a little</span> <span m="377000">bit of time to write down, but it's all pretty simple.</span> <span m="381000">So once I write them down I will just say what they really</span> <span m="386000">mean. There's four properties.</span> <span m="390000">The first one's pretty simple. Every node is either red or</span> <span m="394000">black, hence the name of red black trees.</span> <span m="397000">So, the color field is just a single bit specifying red or</span> <span m="402000">black. And red nodes,</span> <span m="403000">I'm going to denote by a double circle because I don't have</span> <span m="408000">colored chalk here, and black nodes will be a</span> <span m="411000">single circle. And you probably don't have</span> <span m="414000">colored pens either, so it will save us some grief.</span> <span m="420000">Red is double circle; black is single circle.</span> <span m="424000">And, we sort of prefer black nodes in some sense.</span> <span m="429000">Red nodes are a pain, as we'll see.</span> <span m="433000">OK, second property is that the root and the leaves are all</span> <span m="439000">black. And, I'm going to pull a little</span> <span m="442000">trick here. Treat binary search trees a</span> <span m="446000">little bit differently than we have in the past.</span> <span m="453000">Normally, you think of the tree as a bunch of nodes.</span> <span m="456000">Each node could have zero or one or two children,</span> <span m="459000">something like this. I'm going to imagine appending</span> <span m="463000">every place where a node does not have a child.</span> <span m="466000">I'm going to put a little dot here, an external node,</span> <span m="470000">which I call a leaf. So, normally leaves would have</span> <span m="473000">been these items. I'm just going to add to every</span> <span m="477000">absent child pointer a leaf. And, these will be my leaves.</span> <span m="482000">These are really the nil pointers from each of these</span> <span m="487000">nodes. So now, every internal node has</span> <span m="491000">exactly two children, and every leaf has zero</span> <span m="495000">children. OK, so these are those I'm</span> <span m="499000">referring to. These are black,</span> <span m="502000">and this guy is black according to rule two.</span> <span m="506000">Now the properties get a little bit more interesting.</span> <span m="511000">The parent of every red node is black.</span> <span m="517000">So, whenever I have a red node, its parent has to be black,</span> <span m="522000">a single circle. OK, so in other words,</span> <span m="525000">if you look at a path in the tree you can never have two red</span> <span m="530000">nodes consecutive. You can have,</span> <span m="533000">at most, red, black, red, black.</span> <span m="535000">You can have several black nodes consecutive,</span> <span m="539000">but never two red nodes. OK, and then one more rule.</span> <span m="546000">It says a little bit more about such paths.</span> <span m="553000">So, if we take a simple path, meaning it doesn't repeat any</span> <span m="561000">vertices from a node, x, to a descended leaf of x,</span> <span m="568000">all such paths to all descendant leaves have the same</span> <span m="576000">number of black nodes on them.</span> <span m="599000">So, let me draw a picture. We have some tree.</span> <span m="602000">We have some node, x, in the tree.</span> <span m="605000">And, I'm looking at all the paths from x down to some</span> <span m="609000">descendant leaf down here at the bottom of the tree.</span> <span m="614000">All of these paths should have the same number of black nodes.</span> <span m="619000">So, here I'll draw that each one has four black nodes,</span> <span m="623000">the leaf, and three above it. We know that from property</span> <span m="628000">three, at most, half of the nodes are red</span> <span m="631000">because whenever I have a red node, the parent must be black.</span> <span m="638000">But I want all of these paths to have exactly the same number</span> <span m="644000">of black nodes. One subtlety here is that the</span> <span m="648000">black height, I didn't really leave room.</span> <span m="652000">So I'll write it over here. This should be the same for all</span> <span m="658000">paths, but in particular, the count I'm interested in</span> <span m="664000">does not include x itself. OK, so if x is black,</span> <span m="669000">I'm only calling the black height.</span> <span m="672000">So, the black height of x is this count four.</span> <span m="675000">And even if x is black, the black height is four.</span> <span m="679000">So, these are just some minor details to get all of the</span> <span m="683000">algorithms a bit clean. So, let's look at an example of</span> <span m="687000">a red black tree. So, yeah, I'll show you an</span> <span m="691000">example. Then I'll say why we care about</span> <span m="694000">these properties.</span> <span m="736000">OK, so this tree has several properties.</span> <span m="738000">The first thing is that it's a binary search tree.</span> <span m="741000">OK, and so you can check an [in order traversal?].</span> <span m="744000">It should give these numbers in sorted order:</span> <span m="746000">three, seven, eight, ten, 11,</span> <span m="748000">18, 22, 26. So, it's a valid binary search</span> <span m="750000">tree. We've appended these leaves</span> <span m="753000">with no keys in them. They are just hanging around.</span> <span m="756000">Those are the nil pointers. So, each of these,</span> <span m="759000">you can call them nil. They are all just marked there,</span> <span m="763000">wherever there is absent child. And then, I've double circled</span> <span m="767000">some of the nodes to color them red.</span> <span m="769000">OK, if I didn't, the black heights wouldn't</span> <span m="772000">match up. So, I have to be a little bit</span> <span m="774000">careful. From every node,</span> <span m="776000">we'd like to measure the number of black nodes from that node</span> <span m="779000">down to any descendent leaf. So, for example,</span> <span m="782000">the nil pointers, their black height is zero.</span> <span m="787000">Good. That's always the answer.</span> <span m="789000">So, these guys always have black height zero.</span> <span m="792000">I'll just represent that here. Black height equals zero.</span> <span m="797000">OK, what's the black height of three?</span> <span m="799000">Zero? Not quite, because these nodes</span> <span m="802000">are black. So the black height is one.</span> <span m="805000">You're right that we don't count three even though it's</span> <span m="809000">black. It's not included in the count.</span> <span m="814000">But the leaves count. And there's only two paths</span> <span m="818000">here, and they each have the same number of black nodes as</span> <span m="823000">they should. Over here, let's say eight also</span> <span m="826000">has black height one even though it's red.</span> <span m="830000">OK: same with 11, same with 26.</span> <span m="833000">Each of them only has two paths.</span> <span m="835000">Each path has one black node on it.</span> <span m="840000">Ten: what's the black height? It's still one,</span> <span m="842000">good, because we don't count ten.</span> <span m="845000">There's now four paths to leaves.</span> <span m="847000">Each of them contains exactly one black node,</span> <span m="850000">plus the root, which we don't count.</span> <span m="852000">22: same thing, hopefully.</span> <span m="854000">This is getting a little more interesting.</span> <span m="857000">There's one path here which has one black node.</span> <span m="860000">There are other paths here, which are longer.</span> <span m="863000">But they still only have one black node.</span> <span m="865000">So, if we just sort of ignore the red nodes,</span> <span m="868000">all these paths have the same length.</span> <span m="871000">OK: 18 should be bigger hopefully, black height of two</span> <span m="874000">because each of these paths now has one black node here,</span> <span m="878000">one black node in leaves, or one black note here,</span> <span m="881000">and one black node in the leaves.</span> <span m="886000">And finally, the root should have a black</span> <span m="889000">height of two. It's easier to see over here,</span> <span m="893000">I guess. Each of these paths has two</span> <span m="896000">black nodes. Same over here.</span> <span m="900000">OK, so hopefully these properties make sense.</span> <span m="902000">We didn't check all of them. Every red node has a black</span> <span m="906000">parent. If you look at all of these</span> <span m="908000">paths, we sort of alternate, red, black at most.</span> <span m="911000">Or we have just a bunch of blacks.</span> <span m="913000">But we never repeat two reds in a row.</span> <span m="915000">The root and the leaves are black that we used pretty much</span> <span m="919000">by definition. Every node is red or black.</span> <span m="922000">OK, that's easy. This is a particular set of</span> <span m="924000">properties. It may seem a bit arbitrary at</span> <span m="927000">this point. They will make a lot more sense</span> <span m="930000">as we see what consequences they have.</span> <span m="934000">But there are a couple of goals that we are trying to achieve</span> <span m="937000">here. One is that these properties</span> <span m="940000">should force the tree to have logarithmic height,</span> <span m="943000">order log n height. And, they do,</span> <span m="945000">although that's probably not obvious at this point.</span> <span m="948000">It follows mainly from all the properties.</span> <span m="951000">Three and four are the main ones.</span> <span m="953000">But you pretty much need all of them.</span> <span m="956000">The other desire we have from these properties is that they</span> <span m="959000">are somehow easy to maintain. OK, I can create a tree in the</span> <span m="965000">beginning that has this property.</span> <span m="967000">For example, I could make,</span> <span m="969000">I have to be a little bit careful, but certainly if I take</span> <span m="974000">a perfectly balanced binary tree and make all of the nodes black,</span> <span m="979000">it will satisfy those properties.</span> <span m="981000">OK, this is a red black tree. OK, so it's not too hard to</span> <span m="985000">make any these properties hold just from the beginning.</span> <span m="990000">The tricky part is to maintain them.</span> <span m="994000">When I insert a node into this tree, and delete a node for this</span> <span m="998000">tree, I want to make it not too hard.</span> <span m="1000000">In log n time, I've got to be able to restore</span> <span m="1003000">all these properties. OK, that will be the hardest</span> <span m="1007000">part. The first thing we will do is</span> <span m="1009000">prove that these properties imply that the tree has to have</span> <span m="1013000">height order log n. Therefore, all searches and</span> <span m="1016000">queries on a data structure will run fast.</span> <span m="1019000">The hard part will be to make sure these properties stay true</span> <span m="1023000">if they initially held true when we make changes to the tree.</span> <span m="1029000">So, let's look at the height of a red black tree.</span> <span m="1054000">And from this we will start to see where these properties come</span> <span m="1058000">from, why we chose these properties.</span> <span m="1086000">So, the claim is that the height of a red black tree with</span> <span m="1089000">n keys, so, I'm not saying nodes here because I really only want</span> <span m="1093000">to count the internal nodes, not these extra leaves that</span> <span m="1097000">we've added, has height, at most, two times log of n</span> <span m="1100000">plus one, so order log n. But, we have a pretty precise</span> <span m="1104000">bound of a factor of two. There is a proof of this in the</span> <span m="1108000">textbook by induction, and you should read that.</span> <span m="1112000">What I'm going to give us more of a proof sketch.</span> <span m="1115000">But you should read the proof by induction because all the</span> <span m="1120000">practice you can get with proof by induction is good.</span> <span m="1124000">The proof sketch on the other hand gives a lot more intuition</span> <span m="1129000">with what's going on with red black trees and connects up with</span> <span m="1134000">recitation on Friday. So, let me tell you that</span> <span m="1138000">instead. I'm going to leave that board</span> <span m="1142000">blank and go over here.</span> <span m="1170000">So, the first thing I'm going to do, I'm going to manipulate</span> <span m="1176000">this tree until it looks like something that I know.</span> <span m="1181000">The main change I'm going to make is to merge each red node</span> <span m="1188000">into its parent. And we know that the parent of</span> <span m="1193000">a red node must be black. So, merge each red node into</span> <span m="1199000">its black parent. So, let's look at that here.</span> <span m="1204000">So, I'm going to take this red node, merge it into its parent,</span> <span m="1208000">take this red node, merge it into its path,</span> <span m="1211000">and so on. There's one up there which I</span> <span m="1214000">can't reach. But I'm going to redraw this</span> <span m="1217000">picture now. So, seven, so the top node now</span> <span m="1221000">becomes, in some sense, seven and 18.</span> <span m="1223000">They got merged together, but no one else joined them.</span> <span m="1229000">Then, on the left, we have three.</span> <span m="1231000">OK, nothing joined that, and there's some leaves as</span> <span m="1235000">usual. Now, if you look at,</span> <span m="1237000">maybe, I'm going to have to draw this.</span> <span m="1240000">Uh-oh. I heard that sound before.</span> <span m="1243000">So, I'm merging these nodes together, and I'm merging all of</span> <span m="1247000">these nodes together because each of these red nodes merges</span> <span m="1252000">into that black node. And, I'm merging these two</span> <span m="1256000">nodes together. So, I'm putting this red node</span> <span m="1259000">into that black node. So, now you can see from the</span> <span m="1266000">root, which is now 7/18. There are three children</span> <span m="1272000">hanging off. So, in that picture,</span> <span m="1276000">I'd like to draw that fact assuming I can get this board</span> <span m="1283000">back down. Good.</span> <span m="1284000">So, between seven and 18, I have this conglomerate node,</span> <span m="1291000">eight, ten, 11. And, there are four leaves</span> <span m="1297000">hanging off of that node. And, off to the right,</span> <span m="1302000">after 18, I have a conglomerate node, 22/26, and there are three</span> <span m="1309000">leaves hanging off of there. OK, kind of a weird tree</span> <span m="1314000">because we dealt mainly with binary trees so far,</span> <span m="1320000">but this is a foreshadowing of what will come on Friday.</span> <span m="1325000">This is something called a two-three-four tree.</span> <span m="1332000">Any guesses why it's called a two-three-four tree?</span> <span m="1336000">Every node can have two, three, or four kids,</span> <span m="1340000">yeah, except the leaves. They have zero.</span> <span m="1344000">There is another nice property of two-three-four trees maybe</span> <span m="1349000">hinted at. So, there's really no control</span> <span m="1353000">over whether you have two children or three children or</span> <span m="1359000">four children. But, there is another nice</span> <span m="1363000">property. Yeah?</span> <span m="1365000">All of the leaves have the same depth, exactly.</span> <span m="1369000">All of these guys have the same depth in the tree.</span> <span m="1374000">Why is that? Because of property four.</span> <span m="1380000">On Friday, you will see just how to maintain that property.</span> <span m="1383000">But out of this transformation, we get that all the leaves have</span> <span m="1387000">the same depth: because their depth,</span> <span m="1389000">now, or let's say their height in the tree is their black</span> <span m="1392000">height. And, the depth of these leaves</span> <span m="1395000">will be the black height of the root.</span> <span m="1397000">We are you raising all the red nodes, and we said if we look at</span> <span m="1400000">a path, and we ignore all the red nodes, then the number of</span> <span m="1404000">black nodes along a path is the same.</span> <span m="1406000">Now we are basically just leaving all the black nodes.</span> <span m="1411000">And so, along all these paths we'll have the same number of</span> <span m="1419000">black nodes. And therefore,</span> <span m="1423000">every leaf will have the same depth.</span> <span m="1429000">Let me write down some of these properties.</span> <span m="1435000">So, every internal node has between two and four children.</span> <span m="1444000">And every leaf has the same depth, namely,</span> <span m="1450000">the black height of the root.</span> <span m="1468000">This is by property four. OK, so this is telling us a</span> <span m="1471000">lot. So, essentially what this</span> <span m="1474000">transformation is doing is ignoring the red nodes.</span> <span m="1477000">Then, if you just focus on the black nodes, height equals black</span> <span m="1482000">height. And then, black height is</span> <span m="1484000">telling us that all the root to leaf paths have the same length.</span> <span m="1489000">Therefore, all these nodes are at the same level.</span> <span m="1493000">Having leaves at the same level as a good thing because it means</span> <span m="1497000">that your tree is pretty much balanced.</span> <span m="1502000">If you have a tree where all the nodes are branching,</span> <span m="1505000">so, they'll have at least two children, and all the leaves are</span> <span m="1510000">at the same level, that's pretty balanced.</span> <span m="1513000">OK, we will prove some form of that now.</span> <span m="1516000">I'm going to call the height of this tree h prime.</span> <span m="1519000">The height of the original tree is h.</span> <span m="1522000">That's what we want to bound here.</span> <span m="1524000">So, the first thing is to bound h prime.</span> <span m="1527000">And then we want to relate h and h prime.</span> <span m="1532000">OK, so the first question is how many leaves are there in</span> <span m="1536000">this tree? And, it doesn't really matter</span> <span m="1539000">which tree I'm looking at because I didn't really do</span> <span m="1543000">anything to the leaves. All the leaves are black.</span> <span m="1546000">So the leaves didn't change. How many leaves are there in</span> <span m="1551000">this tree, and then therefore, industry?</span> <span m="1553000">Sorry? Nine.</span> <span m="1554000">Indeed, there are nine, but I meant in general,</span> <span m="1558000">sorry. In this example there are nine.</span> <span m="1563000">How many keys are there? Eight.</span> <span m="1567000">So, in general, how do you write nine as a</span> <span m="1572000">function of eight for large values of nine or eight?</span> <span m="1578000">Sorry? Plus one, good,</span> <span m="1580000">correct answer, by guessing.</span> <span m="1584000">n plus one. OK, why is it n plus one?</span> <span m="1590000">Let's look at the binary tree case where we sort of understand</span> <span m="1594000">what's going on? Well, wherever you have a key,</span> <span m="1597000">there are two branches. And, that's not a very good</span> <span m="1600000">argument. OK, we have what is here called</span> <span m="1603000">a branching binary tree. Every internal node has exactly</span> <span m="1607000">two children. And, we are counting the number</span> <span m="1610000">of leaves that you get from that process in terms of the number</span> <span m="1614000">of internal nodes. The number of leaves in a tree,</span> <span m="1618000">or a branching tree, as always one plus the number</span> <span m="1621000">of internal nodes. You should know that.</span> <span m="1625000">You can prove it by induction. OK, so the number of leaves is</span> <span m="1630000">n plus one. It doesn't hold if you have a</span> <span m="1634000">single child. It holds if every internal node</span> <span m="1638000">has a branching factor of two. OK, this is a neither tree.</span> <span m="1642000">And now, we want to pull out some relation between the number</span> <span m="1647000">of leaves and the height of the tree.</span> <span m="1652000">So, what's a good relation to use here?</span> <span m="1655000">We know exactly how many leaves there are.</span> <span m="1658000">That will somehow connect us to n.</span> <span m="1660000">What we care about is the height.</span> <span m="1663000">And let's look at the height of this tree.</span> <span m="1666000">So, if I have a two-three-four tree of height h prime,</span> <span m="1670000">how many leaves could it have? What's the minimum and maximum</span> <span m="1675000">number of leaves it could have? 2^h to 4^h, or h prime.</span> <span m="1681000">So, we also know in the two-three-four tree,</span> <span m="1685000">the number of leaves has to be between four to the h prime,</span> <span m="1690000">because at most I could branch four ways in each node.</span> <span m="1695000">And, it's at least two to the h prime because I know that every</span> <span m="1701000">node branches at least two ways. That's key.</span> <span m="1705000">So, I only care about one of these, I think this one.</span> <span m="1711000">So, I get that two to the h prime is, at most,</span> <span m="1714000">n plus one. So the number of leaves is n</span> <span m="1717000">plus one. We know that exactly.</span> <span m="1719000">So, we rewrite, we take logs of both sides.</span> <span m="1722000">It says h one is at most log of n plus one.</span> <span m="1725000">So, we have a nice, balanced tree.</span> <span m="1727000">This should be intuitive. If I had every node branching</span> <span m="1731000">two ways, and all the leaves at the same level,</span> <span m="1734000">that's a perfect tree. It should be exactly log base</span> <span m="1738000">two of n plus one, and turns out not quite n.</span> <span m="1743000">That should be the height of the tree.</span> <span m="1745000">Here, I might have even more branching, which is making</span> <span m="1748000">things even shallower in some sense.</span> <span m="1750000">So, I get more leaves out of the same height.</span> <span m="1753000">But that's only better for me. That will only decrease the</span> <span m="1756000">height in terms of the number of leaves.</span> <span m="1759000">n plus one here is the number of leaves.</span> <span m="1761000">So: cool. That's an easy upper bound on</span> <span m="1763000">the height of the tree. Now, what we really care about</span> <span m="1767000">is the height of this tree. So, we want to relate h and h</span> <span m="1770000">prime. Any suggestions on how we might</span> <span m="1774000">do that? How do we know that the height</span> <span m="1777000">of this reduced tree is not too much smaller than this one.</span> <span m="1781000">We know that this one is, at most, log n.</span> <span m="1784000">We want this to be, at most, two log n plus one.</span> <span m="1787000">We know the answer. We've said the theorem.</span> <span m="1790000">Sorry? Right.</span> <span m="1791000">So, property three tells us that we can only have one red</span> <span m="1795000">node for every black one. We can, at most,</span> <span m="1798000">alternate red and black. So, if we look at one of these</span> <span m="1804000">paths that goes from a root to a leaf, the number of red nodes</span> <span m="1809000">can be, at most, half the length of the path.</span> <span m="1813000">And we take the max overall paths, that's the height of the</span> <span m="1818000">tree. So, we know that h is,</span> <span m="1821000">at most, two times h prime, or maybe it's easier to think</span> <span m="1826000">of h prime is at least a half, h.</span> <span m="1828000">Assuming I got that right, because at most a half of the</span> <span m="1833000">nodes on any root to leaf path --</span> <span m="1848000">-- are red. So, at least half of them have</span> <span m="1852000">to be black. And, all-black nodes are</span> <span m="1856000">captured in this picture so we have this relation,</span> <span m="1861000">and therefore, h is, at most,</span> <span m="1864000">two times log n plus one. OK: pretty easy.</span> <span m="1868000">But you have to remember, this tree has to be balanced,</span> <span m="1872000">and they are not too far away from each other.</span> <span m="1875000">OK, so in Friday's recitation, you will see how to manipulate</span> <span m="1878000">trees with this form. There is a cool way to do it.</span> <span m="1881000">That's two-three-four trees. Today, we're going to see how</span> <span m="1885000">to manipulate trees in this form as red black trees.</span> <span m="1888000">And, you'll see today's lecture, and you'll see Friday's</span> <span m="1891000">recitation, and they won't really seem to relate at all.</span> <span m="1896000">But they're the same, just a bit hidden.</span> <span m="1900000">OK, so this is good news. We now know that all red black</span> <span m="1907000">trees are balanced. So as long as we can make sure</span> <span m="1913000">that our tree stays a red black tree, we'll be OK.</span> <span m="1920000">We'll be OK in the sense that the height is always log n.</span> <span m="1925000">And therefore, queries in a red black tree,</span> <span m="1930000">so queries are things like search, find a given key,</span> <span m="1935000">find the minimum, find the maximum,</span> <span m="1938000">find a successor, find a predecessor.</span> <span m="1942000">These are all queries that we know how to support in a binary</span> <span m="1948000">search tree. And we know how to do them in</span> <span m="1955000">order height time. And the height here is log n so</span> <span m="1964000">we know that all of these operations take order log n in a</span> <span m="1973000">red black tree. OK --</span> <span m="1993000">So, queries are easy. We are done with queries,</span> <span m="1998000">just from balance: not a surprise.</span> <span m="2002000">We know that balances is good. The hard part for us will be to</span> <span m="2009000">do updates. And in this context,</span> <span m="2013000">updates means insert and delete.</span> <span m="2015000">In general, and a data structure, we talk about queries</span> <span m="2018000">which ask questions about the data in the structure,</span> <span m="2022000">and updates which modify the data in the structure.</span> <span m="2025000">And most of the time here, we are always thinking about</span> <span m="2028000">dynamic sets. So, you can change the dynamics</span> <span m="2031000">set by adding or deleting an element.</span> <span m="2033000">You can ask all sorts of questions.</span> <span m="2035000">In priority queues, there were other updates like</span> <span m="2039000">delete Min. Here we have find Min,</span> <span m="2042000">but we could then delete it. Typically these are the</span> <span m="2045000">operations we care about. And we'll talk about updates to</span> <span m="2049000">include those of these, and queries to include all of</span> <span m="2052000">these, or whatever happens to be relevant.</span> <span m="2055000">In problem sets especially, you'll see all sorts of</span> <span m="2058000">different queries that you can support.</span> <span m="2061000">OK, so how do we support updates?</span> <span m="2063000">Well, we have binary search tree insert, which we call tree</span> <span m="2067000">insert. We have binary search tree</span> <span m="2070000">delete, tree delete. They will preserve the binary</span> <span m="2073000">search tree property, but we know they don't</span> <span m="2076000">necessarily preserve balance. We can insert a bunch of nodes.</span> <span m="2079000">Just keep adding new minimum elements and you will get a</span> <span m="2082000">really long path off the end. So, presumably,</span> <span m="2085000">they do not preserve the red black properties because we know</span> <span m="2089000">red black implies balance. In particular,</span> <span m="2091000">they won't satisfy property one, which I've erased,</span> <span m="2094000">which is every node is red or black.</span> <span m="2096000">It'll add a node, and not assign it a color.</span> <span m="2099000">So, we've got to assign it a color.</span> <span m="2101000">And, as soon as we do that, we'll probably violate some</span> <span m="2104000">other property. And then we have to fix that</span> <span m="2106000">property, and so on. So, it's a bit tricky,</span> <span m="2109000">but you play around with it and it's not too hard.</span> <span m="2114000">OK, so updates must modify the tree.</span> <span m="2118000">And to preserve the red black properties, they're going to do</span> <span m="2127000">it in three different kinds of modifications.</span> <span m="2134000">The first thing we will indeed do is just use the BST</span> <span m="2137000">operation, tree insert or tree delete.</span> <span m="2140000">That's something we know how to do.</span> <span m="2142000">Let's just do it. We are going to have to change</span> <span m="2145000">the colors of some of the nodes. In particular,</span> <span m="2148000">the one that we insert better be colored somehow.</span> <span m="2152000">And in general, if we just rip out a node,</span> <span m="2154000">we are going to have to recolor it, recolor some nearby nodes.</span> <span m="2160000">There is one other kind of operation we're going to do.</span> <span m="2163000">So, recoloring just means set to red or black.</span> <span m="2166000">The other thing you might do is rearrange the tree,</span> <span m="2169000">change the pointers, change the links from one node</span> <span m="2172000">to another. And, we're going to do that at</span> <span m="2175000">the very structured way. And, this is one of the main</span> <span m="2178000">reasons that red black trees are interesting.</span> <span m="2181000">The kinds of changes they make are very simple,</span> <span m="2184000">and they also don't make very many of them.</span> <span m="2187000">So, they're called rotations. So, here's a rotation.</span> <span m="2206000">OK, this is a way of drawing a generic part of a tree.</span> <span m="2208000">We have two nodes, A and B.</span> <span m="2210000">There is some subtrees hanging off, which we draw as triangles.</span> <span m="2213000">We don't know how big they are. We know they better all have</span> <span m="2216000">the same black height if it's a red black tree.</span> <span m="2220000">But in general, it just looks like this.</span> <span m="2222000">There is some parent, and there's some rest of the</span> <span m="2226000">tree out here which we don't draw.</span> <span m="2228000">I'll give these subtrees names, Greek names,</span> <span m="2232000">alpha, beta, gamma.</span> <span m="2233000">And, I'll define the operation right rotate of B.</span> <span m="2236000">So general, if I have a node, B, I look at it and I want to</span> <span m="2241000">do it right rotation, I look at its left child enjoy</span> <span m="2244000">this picture called the subtrees of those two nodes.</span> <span m="2250000">And, I create this tree.</span> <span m="2265000">So, all I've done is turn this edge 90∞.</span> <span m="2267000">What was the parent of B is now the parent of A.</span> <span m="2271000">A is now the new parent of B. The subtrees rearrange.</span> <span m="2274000">Before, they were both subtrees of, these two were subtrees of</span> <span m="2279000">A. And, gamma was a subtree of B.</span> <span m="2282000">Gamma is still a subtree of B, and alpha still is a subtree of</span> <span m="2286000">A. But, beta switched to being a</span> <span m="2288000">subtree of B. OK, the main thing we want to</span> <span m="2291000">check here is that this operation preserves the binary</span> <span m="2295000">search tree property. Remember, the binary search</span> <span m="2299000">tree property says that all the elements in the left subtree of</span> <span m="2303000">a node are less than or equal to the node, and all the elements</span> <span m="2308000">in the right subtree are greater than or equal to that value.</span> <span m="2314000">So, in particular, if we take some node,</span> <span m="2317000">little a in alpha, little b in beta,</span> <span m="2320000">and little c in gamma, then a is less than or equal to</span> <span m="2325000">capital A, is less than or equal to little b, is less than or</span> <span m="2330000">equal to capital B, is less than or equal to little</span> <span m="2334000">c. And, this is the condition both</span> <span m="2337000">on the left side and on the right side because Alpha is left</span> <span m="2343000">of everything. Beta is in between A and B,</span> <span m="2346000">and gamma is after B. And the same thing is true over</span> <span m="2351000">here. Beta is still,</span> <span m="2352000">it's supposed to be all the nodes that come between capital</span> <span m="2355000">A and capital B. So, this is good.</span> <span m="2357000">We could definitely do this operation, still have the binary</span> <span m="2360000">search tree, and we are going to use rotations in a particularly</span> <span m="2363000">careful way to make sure that we maintain all these properties.</span> <span m="2366000">That's the hard part. But, rotations will be our key.</span> <span m="2370000">This was the right rotate operation.</span> <span m="2372000">The reverse operation is left rotate.</span> <span m="2375000">So, this is left rotate of A. In general, of the two nodes</span> <span m="2380000">that are involved, we list the top one.</span> <span m="2383000">So, its right rotate of B will give you this.</span> <span m="2387000">Left rotate of A will give you this.</span> <span m="2390000">So, these are reversible operations, which feels good.</span> <span m="2394000">The other thing is that they only take constant time</span> <span m="2398000">operations because we are only changing a constant number of</span> <span m="2403000">pointers. As long as you know the node,</span> <span m="2407000">B, that you are interested in, you set the left pointer of B</span> <span m="2411000">to be, if you want it to be beta, so you set left of B to be</span> <span m="2414000">right of A, and so on, and so on.</span> <span m="2416000">You make constant number of those changes.</span> <span m="2418000">You update the parents as well. It's only a constant number of</span> <span m="2422000">links that are changing, so, a constant number of</span> <span m="2425000">assignments you need to do. So, you've probably seen</span> <span m="2428000">rotations before. But we are going to use them in</span> <span m="2437000">a complicated way. So, let's look at how to do</span> <span m="2447000">insertion. We'll see it three times in</span> <span m="2456000">some sense. First, I'll tell you the basic</span> <span m="2462000">idea, which is pretty simple. I mentioned some of it already.</span> <span m="2467000">Then, we'll do it on an example, feel it in our bones,</span> <span m="2471000">and then we'll give the pseudocode so that you could go</span> <span m="2475000">home and implement it if you wanted.</span> <span m="2478000">OK, this is, I should say,</span> <span m="2480000">red black insert, which in the book is called RB</span> <span m="2484000">insert, not for root beer, but for red black.</span> <span m="2489000">OK, so the first thing we're going to do, as I said,</span> <span m="2492000">is binary search tree, insert that node.</span> <span m="2495000">So, x now becomes a new leaf. We searched for x wherever it's</span> <span m="2499000">supposed to go. We create, I shouldn't call it</span> <span m="2502000">a leaf now. It's now at node hanging off.</span> <span m="2505000">It's an internal node hanging off one of the original nodes.</span> <span m="2509000">Maybe we added it right here. It now gets two new leaves</span> <span m="2513000">hanging off of it. It has no internal children.</span> <span m="2517000">And, we get to pick a color for it.</span> <span m="2519000">And, we will pick the color red.</span> <span m="2523000">OK, why red? We definitely have to pick one</span> <span m="2526000">of two colors. We could flip a coin.</span> <span m="2528000">That might work, but it's going to make our job</span> <span m="2531000">even messier. So, we are adding a new node.</span> <span m="2535000">It's not a root or a leaf presumably, so we don't really</span> <span m="2539000">need it to be black by property two.</span> <span m="2541000">Property three, every red node has a black</span> <span m="2544000">parent. That might be a problem.</span> <span m="2546000">So, the problem is if its parent is red.</span> <span m="2551000">Then we violate property two. The parent might be red,</span> <span m="2555000">property three, sorry.</span> <span m="2557000">OK, the good news is that property four is still true</span> <span m="2562000">because property four is just counting numbers of black nodes</span> <span m="2567000">down various paths. That's really the hard property</span> <span m="2572000">to maintain. If we just add a new red node,</span> <span m="2575000">none of the black heights change.</span> <span m="2580000">None of the number of black nodes along the path changes.</span> <span m="2585000">So, this still has to hold. The only thing we can violate</span> <span m="2591000">is property three. That's reasonable.</span> <span m="2594000">We know we've got to violate something at the beginning.</span> <span m="2600000">We can't just do a binary search tree insert.</span> <span m="2604000">OK, so, let's give it a try on this tree.</span> <span m="2610000">I should say how we are going to fix this.</span> <span m="2614000">How do we fix property three? We are going to move the</span> <span m="2620000">violation of three up the tree. So, we're going to start at</span> <span m="2627000">node x, and move up towards the root.</span> <span m="2631000">This is via recoloring. The only thing,</span> <span m="2635000">initially, we'll do is recoloring until we get to some</span> <span m="2641000">point where we can fix the violation using a rotation --</span> <span m="2660000">-- and probably also recoloring.</span> <span m="2664000">OK, so let's see this algorithm in action.</span> <span m="2672000">I want to copy this tree, and you are going to have to</span> <span m="2681000">copy it, too. So, I'll just redraw it instead</span> <span m="2689000">of modifying that diagram. So, we have this nice red black</span> <span m="2699000">tree. And, we'll try inserting a new</span> <span m="2705000">value of 15. 22 black.</span> <span m="2710000">22 is the new black. OK, that should be the same</span> <span m="2716000">tree. So now, I'm choosing the number</span> <span m="2720000">15 to insert, because that will show a fairly</span> <span m="2726000">interesting insertion. Sometimes, the insertion</span> <span m="2732000">doesn't take very much work. We just do the rotation and</span> <span m="2736000">we're done. I just like to look at an</span> <span m="2739000">interesting case. So, we insert 15.</span> <span m="2742000">15 is bigger than seven. It's less than 18.</span> <span m="2745000">It's bigger than ten. It's bigger than 11.</span> <span m="2749000">So, 15 goes here. So, we add a new red node of</span> <span m="2755000">hanging off of it, replaced one black leaf.</span> <span m="2759000">Now we have two. OK, now, we violate property</span> <span m="2762000">three because we added a new red child of a red node.</span> <span m="2769000">So, now we have two consecutive red nodes in a root to leaf</span> <span m="2773000">path. We'd like to make this black,</span> <span m="2776000">but that would screw up the black heights because now this</span> <span m="2780000">node would have one black node over here, and two black nodes</span> <span m="2785000">down this path. So, that's not good.</span> <span m="2787000">What can we do? Well, let's try to re-color.</span> <span m="2792000">Yes. This always takes a little</span> <span m="2794000">while to remember. So, our fix is going to be to</span> <span m="2797000">recolor. And, the first thing that</span> <span m="2800000">struck me, which doesn't work, is we try to recolor around</span> <span m="2804000">here. It doesn't look so good because</span> <span m="2806000">we've got red stuff out here, but we've got a black node over</span> <span m="2811000">here. So we can't make this one red,</span> <span m="2813000">and this one black. It wouldn't quite work.</span> <span m="2816000">If we look up a little higher at the grandparent of 15 up</span> <span m="2820000">here, we have a black node here and two red children.</span> <span m="2826000">That's actually pretty good news because we could,</span> <span m="2828000">instead, make that two black children and a red parent.</span> <span m="2832000">Locally, that's going to be fine.</span> <span m="2834000">It's not going to change any black heights because any path</span> <span m="2837000">that went through these nodes before will still go through the</span> <span m="2841000">same number of black nodes. Instead of going through a</span> <span m="2844000">black node always here, it will go through a black node</span> <span m="2847000">either here or here because paths always go down to the</span> <span m="2850000">leaves. So, that's what we're going to</span> <span m="2854000">do, recolor these guys. And, we will get ten,</span> <span m="2858000">which is red. We'll get eight,</span> <span m="2860000">which is black, 11 which is black,</span> <span m="2863000">and these things don't change. Everything else doesn't change.</span> <span m="2868000">We are going to leave 15 red. It's no longer in violation.</span> <span m="2873000">15 is great because now its parent is black.</span> <span m="2877000">We now have a new violation up here with 18 because 18 is also</span> <span m="2882000">red. That's the only violation we</span> <span m="2887000">have. In general, we'll have,</span> <span m="2890000">at most, one violation at any time until we fix it.</span> <span m="2897000">Then we'll have zero violations.</span> <span m="2900000">OK, so, now we have a violation between ten and 18:</span> <span m="2907000">somehow always counterintuitive to me.</span> <span m="2913000">I had to look at the cheat sheet again.</span> <span m="2915000">Really? No, OK, good.</span> <span m="2917000">I was going to say, we can't recolor anymore.</span> <span m="2920000">Good. I'm not that bad.</span> <span m="2921000">So, what we'd like to do is, again, look at the grandparent</span> <span m="2925000">of ten, which is now seven, the root of the tree.</span> <span m="2929000">It is black, but one of its children is</span> <span m="2931000">black. The other is red.</span> <span m="2933000">So, we can't play the same game of taking the blackness of</span> <span m="2937000">seven, and moving it down to the two children.</span> <span m="2942000">Never mind that the root is supposed to stay black.</span> <span m="2944000">We'll ignore that property for now.</span> <span m="2946000">We can't make these two black and make this one red,</span> <span m="2949000">because then we'd get an imbalance.</span> <span m="2951000">This was already black. So now, paths going down here</span> <span m="2954000">will have one fewer black node than paths going out here.</span> <span m="2957000">So, we can't just recolor seven and its children.</span> <span m="2960000">So, instead, we've got to do a rotation.</span> <span m="2962000">We'd better be near the end. So, what I will do is rotate</span> <span m="2966000">this edge. I'm going to rotate eight to</span> <span m="2968000">the right. So that's the next operation:</span> <span m="2975000">rotate right of 18.</span> <span m="3003000">We'll delete one more operation after this.</span> <span m="3007000">So, we rotate right 18. So, the root stays the same:</span> <span m="3011000">seven, three, its children.</span> <span m="3014000">Now, the right child of seven is no longer 18.</span> <span m="3018000">It's now ten. 18 becomes the red child of</span> <span m="3022000">ten. OK, we have eight over here</span> <span m="3025000">with its two children. 11 and 15: that subtree fits in</span> <span m="3033000">between ten and 18. So, it goes here:</span> <span m="3037000">11 and 15. And then, there's the right</span> <span m="3042000">subtree. Everything to the right of 18,</span> <span m="3047000">that goes over here: 22 and 26.</span> <span m="3051000">And hopefully I'm not changing any colors during that</span> <span m="3058000">operation. If I did, let me know.</span> <span m="3064000">OK, it looks good. So, I still have this</span> <span m="3066000">violation, still in trouble between ten and 18.</span> <span m="3069000">But, I've made this straighter. OK, that's what we want to do,</span> <span m="3072000">it turns out, is make the connection between</span> <span m="3075000">18, the violator, and its grandparent,</span> <span m="3077000">a straight connection: two rights or two lefts.</span> <span m="3080000">Here we had to zigzag right, left.</span> <span m="3082000">We like to make it straight. OK, it doesn't look like a much</span> <span m="3085000">more balanced tree that this one.</span> <span m="3087000">In fact, it looks a little worse.</span> <span m="3091000">What we can do is now rotate these guys, or rather,</span> <span m="3096000">rotate this edge. I'm going to rotate seven to</span> <span m="3100000">the left, make ten the root, and that things will start to</span> <span m="3106000">look balanced. This is a rotate left of seven.</span> <span m="3110000">And, I'm also going to do some recoloring at the same time just</span> <span m="3117000">to save me drawing one more picture because the root has to</span> <span m="3122000">be black. I'm going to make 10 black</span> <span m="3127000">immediately. I'll make seven red.</span> <span m="3131000">That's the change. And that the rest is just a</span> <span m="3136000">rotation. So, we have 18 over here.</span> <span m="3140000">I think I actually have to rotate to keep some red</span> <span m="3145000">blackness here. Eight comes between seven and</span> <span m="3151000">ten. So it goes here.</span> <span m="3154000">11 goes between ten and 18, so it goes here.</span> <span m="3160000">22 and 26 come after 18. Now, if I'm lucky,</span> <span m="3166000">I should satisfy all of properties that I want.</span> <span m="3172000">OK, now, if I'm lucky, I should satisfy all the</span> <span m="3178000">properties that I want. Every node is red or black.</span> <span m="3184000">Every black node has a child. This is the last place we</span> <span m="3188000">change. Red nodes have black children,</span> <span m="3191000">and all the black heights should be well defined.</span> <span m="3194000">For every node, the number of black nodes along</span> <span m="3198000">any node to leaf path is the same.</span> <span m="3200000">And you check, that was true before,</span> <span m="3203000">and I did a little bit of trickery with the recoloring</span> <span m="3207000">here. But it's still true.</span> <span m="3210000">I mean, you can check that just locally around this rotation.</span> <span m="3214000">OK, we'll do that in a little bit.</span> <span m="3216000">For now, it's just an example. It's probably not terribly</span> <span m="3220000">clear where these re-colorings and rotations come from</span> <span m="3224000">necessarily, but it worked, and it at least convinces you</span> <span m="3228000">that it's possible. And now, we'll give a general</span> <span m="3232000">algorithm for doing it. Any questions before we go on?</span> <span m="3235000">So, it's not exactly, I mean, just writing of the</span> <span m="3239000">algorithm is not terribly intuitive.</span> <span m="3243000">Red black trees of the sort of thing where you play around a</span> <span m="3246000">bit. You say, OK,</span> <span m="3247000">I'm going to just think about recoloring and rotations.</span> <span m="3250000">Let's restrict myself to those operations.</span> <span m="3252000">What could I do? Well, I'll try to recolor.</span> <span m="3254000">If that works great, it pushes the problem up</span> <span m="3257000">higher. And, there's only log n levels,</span> <span m="3259000">order log n levels, so that's going to take order</span> <span m="3262000">log n time. At some point,</span> <span m="3263000">I'll get stuck. I can't recolor anymore.</span> <span m="3265000">Then it turns out, a couple of rotations will do</span> <span m="3268000">it. Always, two rotations will</span> <span m="3272000">suffice. And you just play with it,</span> <span m="3276000">and that turns out to work. And here's how.</span> <span m="3280000">OK, so let's suppose we have a red black tree.</span> <span m="3285000">And value x, we want to insert.</span> <span m="3288000">Here's the algorithm. First, we insert it into the</span> <span m="3293000">BST. So that we know.</span> <span m="3295000">Then, we color the node red. And here, I'm going to use a</span> <span m="3301000">slightly more precise notation. Color is a field of x.</span> <span m="3308000">And now, we are going to walk our way up the tree with a while</span> <span m="3314000">loop until we get to the root, or until we reach a black node.</span> <span m="3321000">So, in general, x initially is going to be the</span> <span m="3326000">element that we inserted. But, we're going to move x up</span> <span m="3332000">the tree. If ever we find that x is a</span> <span m="3336000">black node, we're happy because maybe its parent is red.</span> <span m="3340000">Maybe it isn't. I don't care.</span> <span m="3342000">Black nodes can have arbitrarily colored parents.</span> <span m="3345000">It's red nodes that we worry about.</span> <span m="3348000">So, if x is red, we have to keep doing this</span> <span m="3351000">loop. Of course, I just wrote the</span> <span m="3354000">wrong one. While the color is red,</span> <span m="3356000">we're going to keep doing this. So, there are three cases,</span> <span m="3363000">or six, depending on how you count.</span> <span m="3367000">That's what makes this a little bit tricky to memorize.</span> <span m="3373000">OK, but there are some symmetric situations.</span> <span m="3378000">Let me draw them. What we care about,</span> <span m="3383000">I've argued, is between x and its</span> <span m="3387000">grandparent. So, I'm using p of x here to</span> <span m="3392000">denote parent of x just because it's shorter.</span> <span m="3396000">So, p of x is x's grandparent. Left of p of x is the left</span> <span m="3400000">child. So, what I'm interested in is I</span> <span m="3403000">look at x. And, if I don't assign any</span> <span m="3406000">directions, x is the child of some p of x, and p of x is the</span> <span m="3411000">child of the grandparent, p of p of x.</span> <span m="3415000">Now, these edges aren't vertical.</span> <span m="3417000">They are either left or right. And, I care about which one.</span> <span m="3422000">In particular, I'm looking at whether the</span> <span m="3425000">parent is the left child of the grandparent.</span> <span m="3429000">So, I want to know, does it look like this?</span> <span m="3435000">OK, and I don't know whether x is to the left or to the right</span> <span m="3439000">of the parent. But, is parent of x the left</span> <span m="3442000">child of p of x, or is it the right child?</span> <span m="3445000">And these two cases are totally symmetric.</span> <span m="3448000">But I need to assume it's one way or the other.</span> <span m="3451000">Otherwise, I can't draw the pictures.</span> <span m="3455000">OK, so this will be, let's call it category A.</span> <span m="3459000">And, this is category B. And, I'm going to tell you what</span> <span m="3464000">to do in category A. And category B is symmetric.</span> <span m="3468000">You just flip left and right. OK, so this is A.</span> <span m="3472000">So, within category A, there are three cases.</span> <span m="3476000">And within category B, there is the same three cases,</span> <span m="3481000">just reversed. So, we're going to do is look</span> <span m="3486000">at the other child of the grandparent.</span> <span m="3489000">This is one reason why we sort of need to know which way we are</span> <span m="3494000">looking. If the parent of x is the left</span> <span m="3497000">child of the grandparent, we're going to look at the</span> <span m="3501000">other child of the grandparent, which would be the right child</span> <span m="3507000">of the grandparent, call that node y.</span> <span m="3511000">This is also known as the uncle or the aunt of x,</span> <span m="3514000">depending on whether y is male or female.</span> <span m="3517000">OK, so this is uncle or aunt. Unfortunately,</span> <span m="3520000">in English, there is no gender-free version of this as</span> <span m="3524000">far as I know. There's parent and child,</span> <span m="3527000">but no uncle-aunt. I'm sure we could come up with</span> <span m="3531000">one. I'm not going to try.</span> <span m="3533000">It's going to sound bad. OK, so why do I care about y?</span> <span m="3537000">Because, I want to see if I can do this recoloring step.</span> <span m="3543000">The recoloring idea was, well, the grandparents,</span> <span m="3546000">let's say it's black. If I can push the blackness of</span> <span m="3549000">the grandparent down into the two children,</span> <span m="3552000">then if both of these are red, in other words,</span> <span m="3555000">then I'd be happy. Then I'd push the problem up.</span> <span m="3558000">This guy is now red. This guy is black.</span> <span m="3560000">So these two are all right. This one may violate the great</span> <span m="3564000">grandparent. But we will just keep going up,</span> <span m="3567000">and that will be fine. Today, if we're lucky,</span> <span m="3570000">y is red. Then we can just do recoloring.</span> <span m="3575000">So, if the color of y is red, then we will recolor.</span> <span m="3581000">And, I'm going to defer this to a picture called case one.</span> <span m="3589000">OK, let me first tell you how the cases breakup,</span> <span m="3594000">and then we will see how they work.</span> <span m="3616000">So, if we're not in case one, so this L should be aligned</span> <span m="3623546">with that, then, then we are either in case two</span> <span m="3629744">or three. So, here's the dichotomy.</span> <span m="3635000">It turns out we've actually seen all of the cases,</span> <span m="3639066">maybe not A versus B, but we've seen the case of the</span> <span m="3643299">very beginning where we just recolor.</span> <span m="3646287">That's case one. The next thing we saw is,</span> <span m="3649690">well, it's kind of annoying that the grandparent and ten,</span> <span m="3654338">so seven and ten were not straight.</span> <span m="3657159">They were zigzagged. So, case two is when they are</span> <span m="3661226">zigzagged. It turns out if x is the right</span> <span m="3664546">child of its parent, and the parent is the left</span> <span m="3668364">child of the grandparent, that's a we've assumed so far,</span> <span m="3672929">that is case two. OK, the other case is that x is</span> <span m="3678972">the left child of its parent. So, then we have a left chain,</span> <span m="3684630">x, parent of x, grandparent of x.</span> <span m="3687698">That is case three. OK, I did not write else here</span> <span m="3692881">because what case two does is it reduces to case three.</span> <span m="3698247">So, in case two, we are going to do the stuff</span> <span m="3702619">that's here. And then, we're going to do the</span> <span m="3706892">stuff here. For case three,</span> <span m="3709475">we just do the stuff here. Or in case one,</span> <span m="3713549">we just do the stuff here. And then, that finishes the</span> <span m="3718816">three cases on the A side, then back to this if.</span> <span m="3723486">We say else, this is case B,</span> <span m="3726169">which is the same as A, but reversing the notions of</span> <span m="3731236">left and right, OK, in the natural way.</span> <span m="3737000">Every time we write left of something, we instead write</span> <span m="3740375">right of something, and vice versa.</span> <span m="3742500">So, this is really just flipping everything over.</span> <span m="3745500">We'll just focus on category A. And, let's see what we do in</span> <span m="3749187">each of the three cases. We've seen it in an example.</span> <span m="3753000">But let's do it generically. Let's do it here.</span> <span m="3758212">Sorry, there's one more line to the algorithm,</span> <span m="3763424">I should say. It's not aligned with here.</span> <span m="3768057">We color the root. There's a chance when you do</span> <span m="3773386">all of this that the root becomes red.</span> <span m="3777671">We always want the root to be black.</span> <span m="3783000">If it's red, we set it to black at the very</span> <span m="3786157">end of the algorithm. This does not change the black</span> <span m="3789992">height property. Everything will still be fine</span> <span m="3793375">because every path either goes to the root or it doesn't,</span> <span m="3797586">every x to leaf path. So, changing the root from red</span> <span m="3801421">to black is no problem. It will increase the black</span> <span m="3805105">heights of everyone, but all the paths will still</span> <span m="3808714">have the same value. It will be one larger.</span> <span m="3813000">So, let's look at the three cases.</span> <span m="3817224">And, I'm going to use some notation.</span> <span m="3821704">Remember, we had triangles in order to denote arbitrary</span> <span m="3828615">subtrees when we define a rotation.</span> <span m="3832967">I'm going to use triangle with a dot on top to say that this</span> <span m="3840519">subtree has a black root. So, when I fill something</span> <span m="3848448">white, it means black because I'm on a black board.</span> <span m="3855344">Sorry. OK, and I also have the</span> <span m="3859344">property that each of these triangles have the same black</span> <span m="3867068">height. So, this will let me make sure</span> <span m="3871569">that the black height property, property four,</span> <span m="3875424">is being observed. So, let me just show you case</span> <span m="3879450">one. We always want to make sure</span> <span m="3882105">property four is preserved because it's really hard to get</span> <span m="3886988">that back. It's essentially the balance of</span> <span m="3890500">the tree. So, let's suppose we have some</span> <span m="3893840">node, C, left child, A, right child,</span> <span m="3896838">B, and some subtrees hanging off of those guys.</span> <span m="3900778">And, all of those subtrees have the same black height.</span> <span m="3905318">So, in other words, these things are all at the</span> <span m="3909258">same level. OK, this is not quite what I</span> <span m="3914466">wanted, sorry. So, I'm considering,</span> <span m="3917462">this is node x. x is red, and its parent is</span> <span m="3921162">red. Therefore, we need to fix</span> <span m="3923718">something. We look at the node,</span> <span m="3926361">y, which is over here. And, I'll call it,</span> <span m="3929885">the key is D. The node is called y.</span> <span m="3933435">OK, it has subtrees hanging off as well, all with the same black</span> <span m="3937740">height. So, that will be true.</span> <span m="3939721">If all of these nodes are red, then all of these nodes have</span> <span m="3943685">the same black height. And therefore,</span> <span m="3946145">all of the child subtrees, which have black roots,</span> <span m="3949494">all had to have the same black height as well.</span> <span m="3952569">OK, so we're looking at a big chunk of red children subtree of</span> <span m="3956738">a black node, looking at all the stuff that</span> <span m="3959608">happens to be red. In case one,</span> <span m="3962870">why is red so it participates? So, a way to think of this as</span> <span m="3967153">if we converted into the two-three-four-tree,</span> <span m="3970346">or tried to, we would merge all of this</span> <span m="3973104">stuff into one node. That's essentially what we're</span> <span m="3976661">doing here. This is not a two-three-four</span> <span m="3979491">tree, though. We now have five children,</span> <span m="3982322">which is bad. This is why we want to fix it.</span> <span m="3985443">So, we're going to recolor in case one.</span> <span m="3988201">And, we're going to take C. Instead of making C black,</span> <span m="3992048">and A and D red, we are going to make A and D</span> <span m="3995241">black, and C red. So, C is red.</span> <span m="3999173">A is black. D is black.</span> <span m="4001158">And, the subtrees are the same. B is the same.</span> <span m="4005220">It's still red. OK, now we need to check that</span> <span m="4009191">we preserve property four, that all of the paths have the</span> <span m="4014245">same number of black nodes. That follows because we know we</span> <span m="4019480">didn't touch these subtrees. They all have the same black</span> <span m="4024733">height. And, if you look at any path,</span> <span m="4026963">like, all the paths from A are going to have that black height.</span> <span m="4030802">All the paths from C are going to have that black height plus</span> <span m="4034518">one because there's a black node in all the left paths,</span> <span m="4037862">and there is a black node in all the right paths.</span> <span m="4040834">So, all the black links are the same.</span> <span m="4043064">So, this preserves property four.</span> <span m="4045045">And, it fixes property three locally because B used to</span> <span m="4048327">violate A. Now B does not violate</span> <span m="4051884">anything. C, now, might be violated.</span> <span m="4054882">So, what we're going to do is set x, our new value of x,</span> <span m="4059593">will be C. So, it used to be B.</span> <span m="4062162">We move it up a couple levels. Or, in the original tree,</span> <span m="4066873">yeah, we also move it up a couple levels.</span> <span m="4070299">So, we're making progress up the tree.</span> <span m="4073468">And then we continue this loop. That's case one:</span> <span m="4077494">recolor, go up. C may violate its parent in</span> <span m="4081092">which case we have to recurse. So, we are recursing,</span> <span m="4085460">in some sense, or continuing on C.</span> <span m="4090000">So now, let's look at case two.</span> <span m="4119000">So, I'm still, in some sense,</span> <span m="4123929">defining this algorithm by picture.</span> <span m="4129915">This is some nice, graphical, programming</span> <span m="4136957">language. So, let's draw case two.</span> <span m="4144000">Yeah, I forgot to mention something about case one.</span> <span m="4147299">So, I drew some things here. What do I actually know is</span> <span m="4150862">true? So, let's look at the algorithm</span> <span m="4153238">in which I've now reversed. But, we are assuming that we</span> <span m="4156868">are in category A. In other words,</span> <span m="4159045">the parent is the left child of the grandparent.</span> <span m="4162147">So, A is the left child of C. That much I knew.</span> <span m="4165182">Therefore, y is the right child.</span> <span m="4167228">D is the right child of C. I didn't actually know whether</span> <span m="4172712">B was the right child or the left child.</span> <span m="4176242">It didn't matter. In case one,</span> <span m="4178865">it doesn't matter. OK, so I should've said,</span> <span m="4182665">the children of A may be reversed.</span> <span m="4185649">But it just said the same picture.</span> <span m="4188635">OK, I thought of this because in case two, we care.</span> <span m="4193158">So, case one: we didn't really care.</span> <span m="4196325">In case two, we say, well,</span> <span m="4198586">case two is up there, is x the right child of the</span> <span m="4202929">parent, or the left child? If it's the right child,</span> <span m="4208864">we are in case two. So now, I can really know that</span> <span m="4212672">x here, which is B, is the right child of A.</span> <span m="4216013">Before, I didn't know and I didn't care.</span> <span m="4219043">Now, I'm assuming that it's this way.</span> <span m="4221841">OK, y is still over here. And now, now we know that y is</span> <span m="4226114">black. So, y over here is a black</span> <span m="4228601">node. So now, if I did the</span> <span m="4232121">contraction trick, all of these nodes,</span> <span m="4236045">A, B, and C, would conglomerate into one.</span> <span m="4240287">I only have four children. That actually looks pretty</span> <span m="4245803">good. y would not be involved because</span> <span m="4249621">it's black. So, in this case,</span> <span m="4252590">we are going to do a left rotation on A.</span> <span m="4258000">So, we take the edge, we turn at 90∞.</span> <span m="4260806">What we get is A on the left, B on the right still.</span> <span m="4264702">It should preserve the in order traversal, C up top still.</span> <span m="4269146">We have the y subtree hanging off, as before.</span> <span m="4272576">We have one of the other three subtrees hanging off B,</span> <span m="4276708">and the other two now hang off A.</span> <span m="4279202">So, this is just a generic rotation picture applied to this</span> <span m="4283723">edge. OK, what that does,</span> <span m="4285594">is before we had a zigzag between x and its grandparent.</span> <span m="4289881">Now, we have a zigzig. We have a straight path between</span> <span m="4296875">x. So, x is still down here.</span> <span m="4300250">I'm not changing x in this case because after I do case two,</span> <span m="4307625">I immediately do case three. So, this is what case three</span> <span m="4314500">will look like. And now, I continue on to case</span> <span m="4320125">three. So, finally,</span> <span m="4323207">here's case three. And, this will finally complete</span> <span m="4328137">the insertion algorithm. We have a black node,</span> <span m="4332664">C. We have a red left child from</span> <span m="4335783">C. We have a red,</span> <span m="4337393">left, grandchild which is x. And then, we have these black</span> <span m="4343128">subtrees all of the same black height hanging off,</span> <span m="4348057">OK, which is exactly what we had at the end of case two.</span> <span m="4355000">So, that definitely connects over.</span> <span m="4357401">And remember, this is the only case left in</span> <span m="4360458">category A. Category A, we assumed that B</span> <span m="4363369">was the parent of x, was the left child of the</span> <span m="4366644">grandparent, B or C. So, we know that.</span> <span m="4369336">We already did the case one, y over here as red.</span> <span m="4372757">That was case one. So, we are assuming y is black.</span> <span m="4376323">Now, we look at whether x was the left child or the right</span> <span m="4380398">child. If it was the right child,</span> <span m="4384054">we made it into the left child. x actually did change here.</span> <span m="4388637">Before, x was B. Now, x is A.</span> <span m="4390850">OK, and then case three, finally, is when x is the left</span> <span m="4395117">child of the parent who is the left child of the grandparent.</span> <span m="4399858">This is the last case we have to worry about.</span> <span m="4403335">And, what we do is another rotation just like the last</span> <span m="4407523">rotation we did in the example. That was case three.</span> <span m="4414419">So, we're going to do a right rotate in this case of C.</span> <span m="4423652">And, we are going to recolor. OK, so, what do we get?</span> <span m="4432544">Well, B now becomes the root. And, I'm going to make it</span> <span m="4441777">black. OK, remember,</span> <span m="4444832">this is the root of the subtree.</span> <span m="4446816">There is other stuff hanging off here.</span> <span m="4449184">I really should have drawn extra parents in all of these</span> <span m="4452706">pictures. There was somewhere in the</span> <span m="4454947">middle of the tree. I don't know where.</span> <span m="4457379">It could be a rightward branch; it could be a leftward branch.</span> <span m="4461284">We don't know. C becomes the child of B,</span> <span m="4463781">and I'm going to make it a red child.</span> <span m="4466086">A becomes a child of B, as it was before,</span> <span m="4468646">keep it red. And, everything else just hangs</span> <span m="4471399">off. So, there were four subtrees</span> <span m="4474996">all at the same black height. And, in particular,</span> <span m="4478418">this last one had y, but we don't particularly care</span> <span m="4481983">about y anymore. Now, we are in really good</span> <span m="4484977">shape because we should have no more violations.</span> <span m="4488327">Before, we had a violation between x and its parent,</span> <span m="4491964">A and B. Well, A and B still have a</span> <span m="4494388">parent child relation. But B is now black.</span> <span m="4497311">And, B is black, so we don't care what its</span> <span m="4500234">parent looks like. It could be red or black.</span> <span m="4503300">Both are fine. We are no longer violating</span> <span m="4506151">property three. We should be done in this case.</span> <span m="4511000">Property three is now true. If you want,</span> <span m="4513626">you can say, well, x becomes this node.</span> <span m="4516184">And then, the loop says, oh, x is no longer red.</span> <span m="4519350">Therefore, I'm done. We also need to check that</span> <span m="4522447">property four is preserved during this process.</span> <span m="4525545">Again, it's not hard because of the two-three-four tree</span> <span m="4529181">transformation. If I contract all the red</span> <span m="4532464">things into their parents, everything else has a constant,</span> <span m="4535804">I mean, every path in that tree has the same length because they</span> <span m="4539496">have the same black length. And over here,</span> <span m="4541898">that will still be true. It's a little bit trickier</span> <span m="4544827">here, because we are recoloring at the same time.</span> <span m="4547640">But, if you look at a path that comes through this tree,</span> <span m="4550863">it used to go through a black node, C, and then maybe some red</span> <span m="4554437">stuff; I don't care. And then, it went through these</span> <span m="4557425">trees, which all have the same black height.</span> <span m="4561000">So they were all the same. Now, you comment,</span> <span m="4563785">and you go through a black node called B.</span> <span m="4566376">And then, you go through some red nodes.</span> <span m="4568902">It doesn't really matter. But all the trees that you go</span> <span m="4572400">through down here have the same black height.</span> <span m="4575251">So, every path through this tree will have the same black</span> <span m="4578878">length, OK, if it starts from the same node.</span> <span m="4581663">So, we preserve property four. We fix property three.</span> <span m="4585032">That is the insertion algorithm.</span> <span m="4587040">It's pretty long. This is something you'll</span> <span m="4589696">probably just have to memorize. If you try a few examples,</span> <span m="4594625">it's not so hard. We can see that all the things</span> <span m="4597562">we did in this example were the three cases.</span> <span m="4600250">The first step, which unfortunately I had to</span> <span m="4602937">erase for space, all we did was recolor.</span> <span m="4605375">We recolored ten, and eight, and 11.</span> <span m="4607562">That was a case one. Ten was the grandparent of 15.</span> <span m="4610687">Then, we looked at ten. Ten was the violator.</span> <span m="4613437">It was a zigzag case relative to its grandparent.</span> <span m="4616437">So, we did a right rotation to fix that, took this edge,</span> <span m="4619875">and turned it so that ten became next to seven.</span> <span m="4624000">That's the picture on the top. Then, 18, which is the new</span> <span m="4627545">violator, with its grandparent, is a zigzig.</span> <span m="4630268">They are both going in the same direction.</span> <span m="4632864">And, now, we do one more rotation to fix that.</span> <span m="4635713">That's really the only thing you have to remember.</span> <span m="4638816">Recolor your grandparent if you can.</span> <span m="4641032">Otherwise, make it zigzig. And then, do one last rotation.</span> <span m="4644641">And recolor. And that will work.</span> <span m="4646604">I mean, if you remember that, you will figure out the rest on</span> <span m="4650403">any particular example. We rotate ten over.</span> <span m="4654363">That better be black, because in this case it's</span> <span m="4657665">becoming the root. But, we will make it black no</span> <span m="4661039">matter what happens because there has to be one black node</span> <span m="4665131">there. If we didn't recolor at the</span> <span m="4667500">same time, we would violate property four.</span> <span m="4670443">Why don't I draw that just for, OK, because I have a couple</span> <span m="4674606">minutes. So, if we just did the rotation</span> <span m="4677405">here, so let's say, not the following,</span> <span m="4680061">we take B. B is red.</span> <span m="4682614">This will give some intuition as to why the algorithm is this</span> <span m="4686707">way, and not some other way. And, C is black.</span> <span m="4689709">That's what we would have gotten if we just rotated this</span> <span m="4693461">tree, rotated B, or rotated C to the right.</span> <span m="4696327">So, these subtrees hang off in the same way.</span> <span m="4699261">Subtrees look great because they all have the same black</span> <span m="4703013">height. But, you see,</span> <span m="4704378">there's a problem. If we look at all the paths</span> <span m="4707448">starting from B and going down to a leaf, on the left,</span> <span m="4711064">the number of black nodes is whatever the black height is</span> <span m="4714884">over here. Label that: black height,</span> <span m="4719237">whereas all the paths on the right will be that black height</span> <span m="4724517">plus one because C is black. So now, we've violated property</span> <span m="4729797">four. So, we don't do this in case</span> <span m="4732750">three. After we do the rotation,</span> <span m="4735525">we also do a recoloring. So, we get this.</span> <span m="4740000">In other words, we are putting the black node</span> <span m="4742652">at the top because then every path has to go through that</span> <span m="4746027">node, whereas over here, some of the nodes went through</span> <span m="4749282">the C. Some of them went through A.</span> <span m="4751331">So, this is bad. Also, we would have violated</span> <span m="4753983">property three. But, the really bad thing is</span> <span m="4756575">that we are violating property four over here.</span> <span m="4759287">OK, let me sum up a little bit.</span> <span m="4772000">So, we've seen, if we insert into a red black</span> <span m="4778734">tree, we can keep it a red black tree.</span> <span m="4784397">So, RB insert adds x to the set to the dynamic set that we are</span> <span m="4793734">trying to maintain, and preserves red blackness.</span> <span m="4802000">So, it keeps the tree a red black tree, which is good</span> <span m="4806036">because we know then it keeps logarithmic height.</span> <span m="4809762">Therefore, all queries in red black trees will keep taking</span> <span m="4814187">logarithmic time. How long does red black insert</span> <span m="4817835">take? We know we are aiming for log n</span> <span m="4820630">time preparation. We are not going to prove that</span> <span m="4824278">formally, but it should be pretty intuitive.</span> <span m="4827616">So, cases two and three, sorry, pointing at the wrong</span> <span m="4831652">place, cases two and three are terminal.</span> <span m="4836000">When we do case three, we are done.</span> <span m="4838059">When we do case two, we are about to do case three,</span> <span m="4841090">and then we are done. OK, so the only thing we really</span> <span m="4844242">have to count is case one because each of these</span> <span m="4847030">operations, they are recoloring, rotation, they all take</span> <span m="4850363">constant time. So, it's a matter of,</span> <span m="4852484">how many are there? Case one does some recoloring,</span> <span m="4855454">doesn't change the tree at all, and moves x up by two levels.</span> <span m="4860000">We know that the height of the tree is, at most,</span> <span m="4864226">two log n plus one. So, the number of case ones is,</span> <span m="4868722">at most, log n plus one. OK, so the number of case ones</span> <span m="4873577">is, at most, log n. So, those take log n time.</span> <span m="4877623">And then, the number of case twos and threes is,</span> <span m="4881850">at most, one for one of these columns.</span> <span m="4885177">Well, together, twos and threes is,</span> <span m="4888234">at most, two. OK, so, log n time,</span> <span m="4891111">cool. The other thing that is</span> <span m="4894778">interesting about red black insertion is that it only makes</span> <span m="4899264">order one rotations. So, most of the changes are</span> <span m="4902898">recolorings. Case one just does recoloring,</span> <span m="4906146">no rotations. Case two maybe does one</span> <span m="4908930">rotation. Case three does one rotation if</span> <span m="4912023">you happen to be in those cases. So, the number of rotations is,</span> <span m="4916895">at most, two. It's either one or two in an</span> <span m="4920066">insertion. It's kind of nice because</span> <span m="4923666">rotating a tree is a bit more annoying than recoloring a tree.</span> <span m="4927733">Why? Because if you had,</span> <span m="4929266">say, a data structure, you have a search tree,</span> <span m="4932266">presumably, people are using the search tree for something.</span> <span m="4936133">They are, like, making queries.</span> <span m="4938133">For example, the search tree represents all</span> <span m="4940933">the documents matching the word computer in Google.</span> <span m="4944266">You've got the Google T-shirt on here, so let's use a Google</span> <span m="4948199">reference. You have the search tree.</span> <span m="4951201">It stores all the things containing the word Google.</span> <span m="4953652">You'd like to search may be for the ones that were modified</span> <span m="4956440">after a certain date, or whatever it is you want to</span> <span m="4958843">do. So, you're doing some queries</span> <span m="4960381">on this tree. And, people are pummeling</span> <span m="4962207">Google like crazy with queries. They get a zillion a second.</span> <span m="4965043">Don't quote me on that. The number may not be accurate.</span> <span m="4967638">It's a zillion. But, people are making searches</span> <span m="4969849">all the time. If you recolor the tree,</span> <span m="4971627">people can still make searches. It's just a little bit you are</span> <span m="4974559">flipping. I don't care in a search</span> <span m="4976145">whether a node is red or black because I know it will have</span> <span m="4978885">logarithmic height. So, you can come along and make</span> <span m="4982608">your occasional updates as your crawler surfs the Web and finds</span> <span m="4985824">changes. And, recoloring is great.</span> <span m="4987536">Rotation is a bit expensive because you have to lock those</span> <span m="4990493">nodes, make sure no one touches them for the duration that you</span> <span m="4993657">rotate them, and then unlock them.</span> <span m="4995370">So, it's nice that the number of rotations is small,</span> <span m="4998016">really small, just two, whereas the time has</span> <span m="5000246">to be log n because we are inserting into a sorted list</span> <span m="5003048">essentially. So, there is an n log n lower</span> <span m="5005175">bound if we do n insertions. OK, deletion and I'm not going</span> <span m="5008184">to cover here. You should read it in the book.</span> <span m="5011625">It's a little bit more complicated, but the same ideas.</span> <span m="5014455">It gets the same bounds: log n time order one rotations.</span> <span m="5017338">So, check it out. That's red black trees.</span> <span m="5019434">Now, you can maintain data in log n time preparation:</span> <span m="5022161">cool. We'll now see three ways to do</span> <span m="5023996">it.</span> </p>
</div>
        <div id="vid_transcript" itemprop="description" class="tabContent hide">
<h2 class="subhead">Free Downloads</h2>
<h3 class="subsubhead">Video</h3>
<ul>
<li>iTunes U (<a href="https://itunes.apple.com/us/itunes-u/id341597754">MP4 - 175MB</a>)</li>
<li>Internet Archive (<a href="http://www.archive.org/download/MIT6.046JF05MPEG4/ocw-6.046-19oct2005-220k.mp4">MP4 - 344MB</a>)</li>
</ul>
<br><h3 class="subsubhead">Free Streaming</h3>
<ul><li><a href="http://videolectures.net/mit6046jf05_introduction_algorithms/">VideoLectures.net</a></li></ul>
<br><h3 class="subsubhead">Subtitle</h3>
<ul><li>English - US (<a href="../../../contents/video-lectures/lecture-10-red-black-trees-rotations-insertions-deletions/O3hI9FdxFOM.srt">SRT</a>)</li></ul>
</div>
    
   </div>  




      					 
        <div class="" id="parent-fieldname-bottom_html_area">
            
            
        </div>
    
                    </div>
<!--Course_inner_chip tag close -->
           		</div>
<!--Course_wrapper tag close --> 
            </div>
<!--left tag close -->
            <div id="right">
                <!--Begin Right Portion -->
                    <div>
    
<div id="portletwrapper-6f63772e7269676874746f70706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a646f6e617465" class="portletWrapper kssattr-portlethash-6f63772e7269676874746f70706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a646f6e617465">
<div class="portletStaticText portlet-static-donate"><p class="zero"><a href="http://ocw.mit.edu/donate"><img src="../../../common/images/button_donate-now.png" alt="Donate Now." class="donate"></a></p></div>

</div>




</div>

                	<div>
    



</div>


        <div class="" id="parent-fieldname-rsi_top_html_area">
            
            
        </div>
    

<!-- RSI google ad space-->


<div id="google_ads">    
    <script type="text/javascript" src="http://partner.googleadservices.com/gampad/google_service.js"></script><script type="text/javascript">GS_googleAddAdSenseService("ca-pub-6588555046597237");GS_googleEnableAllServices();</script><script type="text/javascript">GA_googleAddSlot("ca-pub-6588555046597237", "VIDEO_INDIVIDUAL_SLOT_A_DL");GA_googleAddSlot("ca-pub-6588555046597237", "VIDEO_INDIVIDUAL_SLOT_B_DL");GA_googleAddSlot("ca-pub-6588555046597237", "VIDEO_INDIVIDUAL_SLOT_C_DL");</script><script type="text/javascript">GA_googleFetchAds();</script><script language="javascript" type="text/javascript">
GA_googleAddAttr("TYPE","HOUSE");
GA_googleAddAttr("DEPARTMENT","6");
GA_googleAddAttr("CRS_BEG2","04");
GA_googleAddAttr("CRS_END","6J");
GA_googleAddAttr("SESSION","F");
GA_googleAddAttr("YEAR","05");
</script><script type="text/javascript">GA_googleFillSlot("VIDEO_INDIVIDUAL_SLOT_A_DL");</script><script type="text/javascript">GA_googleFillSlot("VIDEO_INDIVIDUAL_SLOT_B_DL");</script><script type="text/javascript">GA_googleFillSlot("VIDEO_INDIVIDUAL_SLOT_C_DL");</script>
</div>

<!-- End RSI ads--> 

<div>
    



</div>

            </div>
<!--Right div close -->
            <div class="clear"></div> 
        </div>
<!--grid tag close --> 
      </div>
		
		<div id="bottom">
			<div id="grid">
				
<div id="portletwrapper-6f63772e626f74746f6d706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d666f6f746572" class="portletWrapper kssattr-portlethash-6f63772e626f74746f6d706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d666f6f746572">
<div class="portletStaticText portlet-static-site-footer">
<!--googleoff: index--> <div id="bottom"><div id="grid">
<!-- *begin footer* --> <div role="navigation sitemap" id="footer">
<div class="grid_2 alpha" id="foot-c1">
<h4 class="footer">Find Courses</h4> <ul class="foot-bullet">
<li><a href="http://ocw.mit.edu/courses/find-by-topic/">Find by Topic</a></li>     <li><a href="http://ocw.mit.edu/courses/find-by-number/">Find by Course Number</a></li>     <li><a href="http://ocw.mit.edu/courses/find-by-department/">Find by Department</a></li>     <li><a href="http://ocw.mit.edu/courses/audio-video-courses/">Audio/Video Courses</a></li>     <li><a href="http://ocw.mit.edu/courses/subtitled/">Courses with Subtitles</a></li>     <li><a href="http://ocw.mit.edu/courses/online-textbooks/">Online Textbooks</a></li>     <li><a href="http://ocw.mit.edu/courses/new-courses/">New Courses</a></li>     <li><a href="http://ocw.mit.edu/courses/most-visited-courses/">Most Visited Courses</a></li>     <li><a href="http://ocw.mit.edu/courses/ocw-scholar/">OCW Scholar Courses</a></li>     <li><a href="http://ocw.mit.edu/courses/this-course-at-mit/">This Course at MIT</a></li>     <li><a href="http://ocw.mit.edu/resources/">Supplemental Resources</a></li>     <li><a href="http://ocw.mit.edu/courses/translated-courses/">Translated Courses</a></li>     <li><a href="http://ocw.mit.edu/courses/">View All Courses</a></li> </ul>
</div> <div class="grid_2" id="foot-c2">
<h4 class="footer">About</h4> <ul class="foot-bullet">
<li><a href="http://ocw.mit.edu/about/">About OpenCourseWare</a></li>     <li><a href="http://ocw.mit.edu/about/site-statistics/">Site Stats</a></li>     <li><a href="http://ocw.mit.edu/about/ocw-stories/">OCW Stories</a></li>     <li><a href="http://ocw.mit.edu/about/media-coverage/">Media Coverage</a></li>     <li><a href="http://ocw.mit.edu/about/newsletter/">Newsletter</a></li>     <li><a href="http://ocw.mit.edu/about/media-coverage/press-releases/">Press Releases</a></li> </ul>
</div> <div class="grid_2" id="foot-c3">
<h4 class="footer">Donate</h4> <ul class="foot-bullet">
<li><a href="http://ocw.mit.edu/donate">Make a Donation</a></li>     <li><a href="http://ocw.mit.edu/donate/why-donate/">Why Donate?</a></li>     <li><a href="http://ocw.mit.edu/donate/our-supporters/">Our Supporters</a></li>     <li><a href="http://ocw.mit.edu/donate/other-ways-to-contribute/">Other Ways to Contribute</a></li>     <li><a href="http://ocw.mit.edu/donate/shop-ocw/">Shop OCW</a></li>     <li><a href="http://ocw.mit.edu/support/">Become a Corporate Sponsor</a></li> </ul>
</div> <div class="grid_2" id="foot-c4">
<h4 class="footer">Featured Sites</h4> <ul class="foot-bullet">
<li><a href="http://ocw.mit.edu/high-school/">Highlights for High School</a></li>     <li><a href="http://ocw.mit.edu/educator/">OCW Educator</a></li>     <li><a href="http://ocw.mit.edu/courses/crosslinks/">MIT Crosslinks and OCW</a></li>     <li><a href="http://ocw.mit.edu/ans7870/featured/mitx-courses-on-edx.htm">MITx Courses on edX</a></li>     <li><a href="http://teachingexcellence.mit.edu/">Teaching Excellence at MIT</a></li>     <li><a href="http://www.oeconsortium.org/">Open Education Consortium</a></li> </ul>
<h4 style="margin-top: 14px;" class="footer">Tools</h4> <ul class="foot-bullet">
<li><a href="http://ocw.mit.edu/help/">Help &amp; FAQs</a></li>     <li><a href="../../../common/jsp/feedback.htm">Contact Us</a></li>     <li><a href="../../../common/search/AdvancedSearch.htm">Advanced Search</a></li>     <li><a href="http://ocw.mit.edu/help/site-map/">Site Map</a></li>     <li><a href="../../../common/terms/index.htm">Privacy &amp; Terms of Use</a></li>     <li><a href="http://ocw.mit.edu/help/rss/">RSS Feeds</a></li> </ul>
</div> <div class="grid_4 omega" id="foot-c5">
<h4 class="footer">Our Corporate Supporters</h4> <!-- HOME_CORP_LOGO_1 --> <div class="sponsors_google_ads_even" id="div-gpt-ad-1388181177156-0"><script type="text/javascript">
googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-0'); });
</script></div> <!-- HOME_CORP_LOGO_2 --> <div class="sponsors_google_ads_odd" id="div-gpt-ad-1388181177156-1"><script type="text/javascript">
googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-1'); });
</script></div> <!-- HOME_CORP_LOGO_3 --> <div class="sponsors_google_ads_even" id="div-gpt-ad-1388181177156-2"><script type="text/javascript">
googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-2'); });
</script></div> <!-- HOME_CORP_LOGO_4 --> <div class="sponsors_google_ads_odd" id="div-gpt-ad-1388181177156-3"><script type="text/javascript">
googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-3'); });
</script></div> <!-- HOME_CORP_LOGO_5 --> <div class="sponsors_google_ads_even" id="div-gpt-ad-1388181177156-4"><script type="text/javascript">
googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-4'); });
</script></div> <!-- HOME_CORP_LOGO_6 --> <div class="sponsors_google_ads_odd" id="div-gpt-ad-1388181177156-5"><script type="text/javascript">
googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-5'); });
</script></div>
</div> <div class="grid_12 alpha omega" style="border-top: thin solid #d5c9ba; padding-top: 24px; margin-bottom: 10px; text-align: center;"><p style="font-family: TitilliumText22LRegular,Verdana; text-align: center; font-size: 1.1em;">Support for <span style="letter-spacing: 0.5px;"><strong>MIT OPENCOURSEWARE'S 15th anniversary</strong></span> is provided by <a href="http://www.sapientnitro.com/en-us.html#home"><img style="width: 145px; height: 35px; vertical-align: middle; margin-left: 7px;" alt="SapientNitro logo and nameplate." src="../../../common/images/logo_sapient.png"></a></p></div> <div itemtype="http://schema.org/CollegeOrUniversity" itemscope="" itemprop="publisher" class="grid_12 alpha omega">
<h4 style="border-top: thin solid #d5c9ba; padding-top: 10px; margin-bottom: 10px;" class="footer">About <span itemprop="name">MIT OpenCourseWare</span>
</h4> <p itemprop="description" style="color: #999; font-size: 1em; line-height: 1.5em; margin-top: 10px;">MIT OpenCourseWare makes the materials used in the teaching of almost all of MIT's subjects available on the Web, free of charge. With more than 2,200 courses available, OCW is delivering on the promise of open sharing of knowledge. <a href="http://ocw.mit.edu/about/">Learn more »</a></p>
</div> <div style="border-top: none;" class="grid_12 alpha omega" id="foot-copy">
<a href="http://web.mit.edu"><img style="width: 195; height: 44;" alt="Massachusetts Institute of Technology logo and name." src="../../../common/images/logo_mit.png"></a><a href="http://odl.mit.edu"><img style="width: 289; height: 54; vertical-align: top;" alt="MIT Office of Digital Learning logo and name." src="http://ocw.mit.edu/images/logo_odl.png"></a><a href="http://www.oeconsortium.org/"><img style="width: 219px; height: 59px; vertical-align: top;" alt="Open Education Consortium logo." src="http://ocw.mit.edu/images/logo_oec.png"></a><a itemprop="useRightsUrl" rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/"><img style="width: 126px; height: 44px; margin-right: 0; margin-left: 13px;" alt="Creative Commons logo with terms BY-NC-SA." src="../../../common/images/cc_by-nc-sa.png"></a> <p class="copyright">© 2001–2015<br> Massachusetts Institute of Technology</p> <p style="font-size: 0.9em; margin-bottom: 15px;">Your use of the MIT OpenCourseWare site and materials is subject to our <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/">Creative Commons License</a> and other <a rel="cc:morePermissions" href="../../../common/terms/index.htm">terms of use</a>.</p>
</div>
</div>
</div></div> <!--googleon: index-->
</div>

</div>





                
			</div> <!-- bottom grid end -->
		</div>
<!-- bottom end -->
		
		
   </body>
</html>
