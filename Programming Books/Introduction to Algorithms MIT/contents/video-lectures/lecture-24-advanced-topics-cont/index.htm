<!DOCTYPE html><html lang="en">
<head>
<meta charset="utf-8">
<meta name="format-detection" content="telephone=no">
<title>Lecture 24: Advanced Topics (cont.) | Video Lectures | Introduction to Algorithms (SMA 5503) | Electrical Engineering and Computer Science | MIT OpenCourseWare</title>
<!-- Begin Automatic Metadata Insertion --><meta content="6-046j-introduction-to-algorithms-sma-5503-fall-2005" name="WT.cg_n">
<meta content="Lecture 24: Advanced Topics (cont.)" name="WT.cg_s">
<meta content="" name="Description">
<meta content="Leiserson, Charles" name="Author">
<meta content="Demaine, Erik" name="Author">
<meta content="algorithms,efficient algorithms,sorting,search trees,heaps,hashing,divide-and-conquer,dynamic programming,amortized analysis,graph algorithms,shortest paths,network flow,computational geometry,number-theoretic algorithms,polynomial and matrix calculations,caching,parallel computing,Algorithms and Data Structures" name="keywords">
<meta content="6.046J Introduction to Algorithms (SMA 5503) | Lecture 24: Advanced Topics (cont.)" name="Search_Display">
<meta content="Algorithms and Data Structures" itemprop="about">
<!-- End Automatic Metadata Insertion --><link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/grid.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/base.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/menu.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/jquery.bubblepopup.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/courses.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/courses_new.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/jquery.jscrollpane.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/media_tabs.css">
<link href="http://ocw.mit.edu/xml/ocwcc.rdf" type="application/rdf+xml" rel="metadata">
<link rel="canonical" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-046j-introduction-to-algorithms-sma-5503-fall-2005/video-lectures/lecture-24-advanced-topics-cont.">
<link rel="apple-touch-icon" href="../../../common/images/apple-touch-icon.png">
<script type="text/javascript" src="../../../common/scripts/jquery.js"></script><script type="text/javascript" src="../../../common/scripts/ocw-media-utils-offline.js"></script><script type="text/javascript" src="../../../common/scripts/ocw-offline.js"></script><script type="text/javascript" src="../../../common/scripts/jquery.bubblepopup.min.js"></script><script type="text/javascript" src="../../../common/scripts/jquery-ui.min.js"></script><script type="text/javascript" src="../../../common/scripts/jquery.jscrollpane.min.js"></script><script type="text/javascript" src="../../../common/scripts/bubble-popup-offline.js"></script><script type="text/javascript">
      $(document).ready(function() {
        $("#tabs").tabs();
        IpadScroller();
      });
    </script>
</head>
<body itemscope itemtype="http://schema.org/WebPage">
        
	

        <div id="top">
			<div id="grid">
				
				
					
<div id="portletwrapper-6f63772e746f70706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d686561646572" class="portletWrapper kssattr-portlethash-6f63772e746f70706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d686561646572">
<div class="portletStaticText portlet-static-site-header">
<!--googleoff: index-->
<div class="grid_6 alpha" role="banner" id="banner"><a href="http://ocw.mit.edu/"><img class="logo" alt="MIT OpenCourseWare, Massachusetts Institute of Technology" src="../../../common/images/ocw_mast.png"></a></div>
<div class="grid_6 omega" role="form toolbar" id="subscribe">
<div class="module">
<table class="social"><tbody><tr>
<td class="socialbutton"><a href="http://ocw.mit.edu/subscribe/index.htm?utm_source=header"><img src="../../../common/images/trans.gif" alt="An icon depicting an envelope.">Subscribe to the OCW Newsletter</a></td>
            <td>
<a href="https://plus.google.com/104567381989352550847/posts"><img alt="Click to visit our Google+ page." src="../../../common/images/icon_gp.png"></a><a href="https://www.pinterest.com/mitocw/pins/"><img alt="Click to visit our Pinterest page." src="../../../common/images/icon_pin.png"></a><a href="http://facebook.com/mitocw"><img alt="Click to visit our Facebook page." src="../../../common/images/icon_fb.png"></a><a href="http://twitter.com/mitocw"><img alt="Click to visit our Twitter feed." src="../../../common/images/icon_tw.png"></a>
</td>
        </tr></tbody></table>
</div>
<p class="helplinks"><a href="http://ocw.mit.edu/help">Help</a>   |   <a href="../../../common/jsp/feedback.htm">Contact Us</a></p>
</div>
<div class="clear"> </div>
<!--googleon: index-->
</div>

</div>





<!--googleoff: index-->
<div id="mega" role="navigation" class="grid_8 alpha">        
	<ul id="menu">
<li id="menu_home">
            <a href="http://ocw.mit.edu/"><img src="../../../common/images/top-nav_home.png" class="home_icon" alt="Click for site home page."></a><!-- Begin Home Item -->
        </li>
<!-- End Home Item -->        
        <li class="selected">
            <a href="#" class="drop">Find Courses</a><!-- Begin 5 columns Item -->
            <div class="dropdown_5columns-a mega-courses">                    
                <div class="col_1a">
                    <div class="row_1a">
                        <div class="quart">
                            <h2 class="nav">Find courses by:</h2>
                            <ul class="nav-bullet find_by">
<li><a href="http://ocw.mit.edu/courses/find-by-topic/">Topic</a></li>
                                <li><a href="http://ocw.mit.edu/courses/find-by-number/">MIT Course Number</a></li>
                                <li><a href="http://ocw.mit.edu/courses/find-by-department/">Department</a></li>
                            </ul>
<ul style="margin-top: 88px;" class="nav-bullet find_by">
<li style="font-weight: normal; font-size: 1em;"><a href="http://ocw.mit.edu/courses/">View All Courses</a></li>
							</ul>
</div>
                        <div class="quart">
                            <h2 class="nav">Collections</h2>
                            <ul class="nav-bullet">
<li><a href="http://ocw.mit.edu/courses/audio-video-courses/">Audio/Video Lectures</a></li>
                                <li><a href="http://ocw.mit.edu/courses/online-textbooks/">Online Textbooks</a></li>
                                <li><a href="http://ocw.mit.edu/courses/new-courses/">New Courses</a></li>
                                <li><a href="http://ocw.mit.edu/courses/most-visited-courses/">Most Visited Courses</a></li>
                                <li><a href="http://ocw.mit.edu/courses/ocw-scholar/">OCW Scholar Courses</a></li>
                                <li><a href="http://ocw.mit.edu/courses/this-course-at-mit/">This Course at MIT</a></li>
                                <li><a href="http://ocw.mit.edu/resources/">Supplemental Resources</a></li>
                            </ul>
</div>
                        <div class="clear"> </div>
                    </div>
                    <div class="row_1b">
                        <h2 class="nav">Cross-Disciplinary Topic Lists</h2>
                        <div class="quart">
                        <ul class="nav-bullet">
<li><a href="http://ocw.mit.edu/courses/energy-courses">Energy</a></li>
                            <li><a href="http://ocw.mit.edu/courses/entrepreneurship">Entrepreneurship</a></li>
                            <li><a href="http://ocw.mit.edu/courses/environment-courses">Environment</a></li>
                        </ul>
</div>    
                        <div class="quart">
                        <ul class="nav-bullet">
<li><a href="http://ocw.mit.edu/courses/intro-programming">Introductory Programming</a></li>
                            <li><a href="http://ocw.mit.edu/courses/life-sciences">Life Sciences</a></li>
                            <li><a href="http://ocw.mit.edu/courses/transportation-courses">Transportation</a></li>
                        </ul>
</div>
                        <div class="clear"> </div>
                    </div>
                    <div class="clear"> </div>
                </div>
                <div class="col_1b">
                    <h2 class="nav">Translated Courses</h2>
                    <ul class="nav-bullet">
<li><a href="http://ocw.mit.edu/courses/translated-courses/traditional-chinese">繁體字 / Traditional Chinese</a></li>
                        <li><a href="http://ocw.mit.edu/courses/translated-courses/spanish">Español / Spanish</a></li>
                        <li><a href="http://ocw.mit.edu/courses/translated-courses/portuguese">Português / Portuguese</a></li>
                        <li><a href="http://ocw.mit.edu/courses/translated-courses/persian">فارسی / Persian</a></li>
                        <li><a href="http://ocw.mit.edu/courses/translated-courses/turkish">Türkçe / Turkish</a></li>
                        <li><a href="http://ocw.mit.edu/courses/translated-courses/korean">(비디오)한국 / Korean</a></li>
                        <li><a href="http://ocw.mit.edu/courses/translated-courses">More...</a></li>
                    </ul>
</div>
            </div>
        </li>
        <li>
            <a href="" class="drop">About</a>
            <div class="dropdown_1column-a">
                <div class="col_1">
                    <ul class="nav-bullet mega-div-bottom">
<li><a href="http://ocw.mit.edu/about/">About MIT OpenCourseWare</a></li>
                    </ul>
<ul class="nav-bullet mega-div-bottom">
<li><a href="http://ocw.mit.edu/about/site-statistics/">Site Stats</a></li>
                        <li><a href="http://ocw.mit.edu/about/ocw-stories/">OCW Stories</a></li>                        
                    </ul>
<ul class="nav-bullet">
<li><a href="http://ocw.mit.edu/about/media-coverage/">Media Coverage</a></li>
                        <li><a href="http://ocw.mit.edu/about/newsletter/">Newsletter</a></li>                        
                    </ul>
</div>
            </div>  
        </li>    
        <li>
            <a href="" class="drop">Donate</a>        
            <div class="dropdown_1column-a">
                    <div class="col_1">
                        <ul class="nav-bullet mega-div-bottom">
<li><a href="http://ocw.mit.edu/donate/">Make a Donation</a></li>
                            <li><a href="http://ocw.mit.edu/donate/why-donate/">Why Donate?</a></li>
                            <li><a href="http://ocw.mit.edu/donate/our-supporters/">Our Supporters</a></li>
                            <li><a href="http://ocw.mit.edu/donate/other-ways-to-contribute/">Other Ways to Contribute</a></li>
                            <li><a href="http://ocw.mit.edu/donate/shop-ocw">Shop OCW</a></li>
                        </ul>
<ul class="nav-bullet">
<li><a href="http://ocw.mit.edu/support/">Become a Corporate Sponsor</a></li>
                        </ul>
</div>
            </div>            
        </li>        
        <li>
            <a href="" class="drop">Featured Sites</a>        
            <div class="dropdown_1column-a">
                <div class="col_1">
                    <ul class="nav-bullet mega-div-bottom">
<li><a href="http://ocw.mit.edu/high-school/">Highlights for High School</a></li>
                        <li><a href="http://ocw.mit.edu/educator/">OCW Educator</a></li>
                        <li><a href="http://ocw.mit.edu/courses/crosslinks/">MIT Crosslinks and OCW</a></li>                        
                    </ul>
<ul class="nav-bullet mega-div-top">
<li><a href="http://ocw.mit.edu/ans7870/featured/mitx-courses-on-edx.htm">MITx Courses on edX</a></li>
                        <li><a href="http://teachingexcellence.mit.edu/">Teaching Excellence at MIT</a></li>
						<li><a href="http://www.oeconsortium.org/">Open Education Consortium</a></li>
                    </ul>
</div>
            </div>            
        </li>
    </ul>
</div>
<div id="search" role="search" class="grid_4 omega">
    
    <form method="get" action="../../../common/search/AdvancedSearch.htm">
     	 <table class="search"><tbody><tr>
<td class="black"><input type="text" onblur="fillSearchBox()" onfocus="clearSearchBox()" maxlength="255" value="Search" name="q" class="greytext searchField" id="terms"></td> 			 
                    <td class="black"><input type="image" src="../../../common/images/button_search.png" name="btnG" class="sub_button"></td>			 
                    <td class="text2"><a href="../../../common/search/AdvancedSearch.htm">Advanced<br>Search</a></td>
                </tr></tbody></table>
</form>
</div>
<div class="clear"></div>
<!--googleon: index-->
<!-- *end header* -->  

				
				
			</div>
<!-- top grid end -->
		</div>
<!-- top end -->
			
		<div id="center_media">
      	<div id="grid">
      		<div id="left">
        		<div id="breadcrumb_media">
                	<p>

    <a href="http://ocw.mit.edu/">Home</a>
    
        »
        
    
    
        
            <a href="http://ocw.mit.edu/courses">Courses</a>
            
                »
                
            
            
         
    
    
        
            <a href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science">Electrical Engineering and Computer Science</a>
            
                »
                
            
            
         
    
    
        
            <a href="../../../contents/index.htm">Introduction to Algorithms (SMA 5503)</a>
            
                »
                
            
            
         
    
    
        
            <a href="../../../contents/video-lectures/index.htm">Video Lectures</a>
            
                »
                
            
            
         
    
    
        
            
            
            Lecture 24: Advanced Topics (cont.)
         
    
</p>

            	</div>
            	<div class="clear"></div>
        		<div id="media_title">
        		<h1 class="title" itemprop="name" property="dct:title">
        <span class="" id="parent-fieldname-title">
            Lecture 24: Advanced Topics (cont.)
        </span>
    </h1>
        		</div>
           		<div class="clear"></div>
           		<div id="course_wrapper_media">
           			<div id="course_nav">
           				<script language="javascript" type="text/javascript">
function toggleMenu(objID) {
  if (!document.getElementById) return;
  var ob = document.getElementById(objID);
  ob.className = (ob.className == 'selected')?'': 'selected';
}
function toggleClass(id)
{
  var divtoggleClass= document.getElementById(id);
  divtoggleClass.className = (divtoggleClass.className == 'mO')?'mC': 'mO';
  return false;
}
function changeAlt(id)
{
  id.alt = (id.alt == 'Expand Menu')?'Collapse Menu' : 'Expand Menu';
  id.title = (id.title == 'Expand Menu')?'Collapse Menu' : 'Expand Menu';
}
</script><!--Left Nav Starts --><ul>
<li class="">
			   			<a href="../../../contents/index.htm">
		                  Course Home  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/syllabus/index.htm">
		                  Syllabus  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/calendar/index.htm">
		                  Calendar  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/readings/index.htm">
		                  Readings  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/assignments/index.htm">
		                  Assignments  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/exams/index.htm">
		                  Exams  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="selected">
			   			<a href="../../../contents/video-lectures/index.htm">
		                  Video Lectures  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    
		    
         	
	<!--second tal block close-->  
	
</ul>
<!--Left Nav Ends -->
</div>
           			<div id="course_inner_media">
      					 
        <div class="" id="parent-fieldname-text">
            
            
        </div>
    
      					 

<script type="text/javascript">var caption_embed_1 ={'English - US': '/courses/electrical-engineering-and-computer-science/6-046j-introduction-to-algorithms-sma-5503-fall-2005/video-lectures/lecture-24-advanced-topics-cont./cJOHERGcGm4.srt'}</script><div id="media-embed">
         <div class="attention_message" id="embed_1">
<p>Flash and JavaScript are required for this feature.</p>
<p>Download the video from <a href="https://itunes.apple.com/us/itunes-u/id341597754">iTunes U</a> or the <a href="http://www.archive.org/download/MIT6.046JF05MPEG4/ocw-6.046-12dec2005-220k.mp4">Internet Archive</a>.</p>
</div>
     </div>
    
     <script type="text/javascript">ocw_embed_chapter_media('embed_1', 'http://www.youtube.com/v/cJOHERGcGm4', 'youtube', '/courses/electrical-engineering-and-computer-science/6-046j-introduction-to-algorithms-sma-5503-fall-2005/video-lectures/lecture-24-advanced-topics-cont.', 'http://img.youtube.com/vi/cJOHERGcGm4/0.jpg',0,0, 'http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-046j-introduction-to-algorithms-sma-5503-fall-2005/video-lectures/lecture-24-advanced-topics-cont./cJOHERGcGm4.srt')</script><div id="transcript1"></div>
				 <script type="text/javascript">setThreePlayTranscriptPlugin(2, 703412)</script><script type="text/javascript" src="http://p3.3playmedia.com/p3.js"></script><div id="media_resource_next_prev_nav" style="margin-top: 1em;">
        <p>
        
            <a href="../../../contents/video-lectures/lecture-23-advanced-topics-cont./index.htm">
                <img src="../../../common/images/btn_previous_resource.png" style="margin: 0 30px 0 50px;" alt="Previous track" title="Previous track"></a>
     	
     	
        
            <a href="../../../contents/video-lectures/lecture-25-advanced-topics-cont.-discussion-of-follow-on-classes/index.htm"> 
                <img src="../../../common/images/btn_next_resource.png" alt="Next track" title="Next track"></a>
       
       </p>
     </div>
 


<script type="text/javascript">
		window.onload=function(){
		init();
		
		}
		var tabLinks = new Array();
		var contentDivs = new Array();
		function init() {
		  // Grab the tab links and content divs from the page
		  var tabListItems = document.getElementById('tabs').childNodes;
		  for ( var i = 0; i < tabListItems.length; i++ ) {
			if ( tabListItems[i].nodeName == "LI" ) {
			  var tabLink = getFirstChildWithTagName( tabListItems[i], 'A' );
			  var id = getHash( tabLink.getAttribute('href') );
			  tabLinks[id] = tabLink;
			  contentDivs[id] = document.getElementById( id );
			}
		  }
		  // Assign onclick events to the tab links, and
		  // highlight the first tab
		  var i = 0;
		  for ( var id in tabLinks ) {
			tabLinks[id].onclick = showTab;
			tabLinks[id].onfocus = function() { this.blur() };
			if ( i == 0 ) tabLinks[id].className = 'selected';
			i++;
		  }
		  // Hide all content divs except the first
		  var i = 0;
		  for ( var id in contentDivs ) {
			if ( i != 0 ) contentDivs[id].className = 'tabContent hide';
			i++;
		  }
		}
		function showTab() {
		  var selectedId = getHash( this.getAttribute('href') );
		  // Highlight the selected tab, and dim all others.
		  // Also show the selected content div, and hide all others.
		  for ( var id in contentDivs ) {
			if ( id == selectedId ) {
			  tabLinks[id].className = 'selected';
			  contentDivs[id].className = 'tabContent';
			} else {
			  tabLinks[id].className = '';
			  contentDivs[id].className = 'tabContent hide';
			}
		  }
		  // Stop the browser following the link
		  return false;
		}
		function getFirstChildWithTagName( element, tagName ) {
		  for ( var i = 0; i < element.childNodes.length; i++ ) {
			if ( element.childNodes[i].nodeName == tagName ) return element.childNodes[i];
		  }
		}
		function getHash( url ) {
		  var hashPos = url.lastIndexOf ( '#' );
		  return url.substring( hashPos + 1 );
		}
 </script><div id="media_tabs">
     
        <ul id="tabs">
<li class="first">
                <a href="#vid_about" class="selected">About this Video</a>
            </li>
            <li class="">
                <a href="#vid_index" class="">Playlist</a>
            </li>
            <li class="">
                <a href="#vid_playlist" class="">Related Resources</a>
            </li>
            <li class="">
                <a href="#vid_related" class="">Transcript</a>
            </li>
            <li class="">
                <a href="#vid_transcript" class="">Download this Video</a>
            </li>
        </ul>
<div id="vid_about" itemprop="description" class="tabContent">
<p><strong>Topics covered:</strong> Advanced Topics (cont.)</p>
<p><strong>Instructors:</strong> Prof. Erik Demaine, Prof. Charles Leiserson</p>
</div>
        <div id="vid_index" itemprop="description" class="tabContent hide">
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-1-administrivia-introduction-analysis-of-algorithms-insertion-sort-mergesort/index.htm">
<img src="../../../contents/video-lectures/lecture-1-administrivia-introduction-analysis-of-algorithms-insertion-sort-mergesort/6_046J_lec01_th.jpg" title="Lecture 1: Administrivia; Introduction; Analysis of Algorithms, Insertion Sort, Mergesort" alt="Lecture 1: Administrivia; Introduction; Analysis of Algorithms, Insertion Sort, Mergesort"><p>Lecture 1: Administrivia; I...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-2-asymptotic-notation-recurrences-substitution-master-method/index.htm">
<img src="../../../contents/video-lectures/lecture-2-asymptotic-notation-recurrences-substitution-master-method/6_046J_lec02_th.jpg" title="Lecture 2: Asymptotic Notation; Recurrences; Substitution, Master Method" alt="Lecture 2: Asymptotic Notation; Recurrences; Substitution, Master Method"><p>Lecture 2: Asymptotic Notat...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-3-divide-and-conquer-strassen-fibonacci-polynomial-multiplication/index.htm">
<img src="../../../contents/video-lectures/lecture-3-divide-and-conquer-strassen-fibonacci-polynomial-multiplication/6_046J_lec03_th.jpg" title="Lecture 3: Divide-and-Conquer: Strassen, Fibonacci, Polynomial Multiplication" alt="Lecture 3: Divide-and-Conquer: Strassen, Fibonacci, Polynomial Multiplication"><p>Lecture 3: Divide-and-Conqu...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-4-quicksort-randomized-algorithms/index.htm">
<img src="../../../contents/video-lectures/lecture-4-quicksort-randomized-algorithms/6_046J_lec04_th.jpg" title="Lecture 4: Quicksort, Randomized Algorithms" alt="Lecture 4: Quicksort, Randomized Algorithms"><p>Lecture 4: Quicksort, Rando...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-5-linear-time-sorting-lower-bounds-counting-sort-radix-sort/index.htm">
<img src="../../../contents/video-lectures/lecture-5-linear-time-sorting-lower-bounds-counting-sort-radix-sort/6_046J_lec05_th.jpg" title="Lecture 5: Linear-time Sorting: Lower Bounds, Counting Sort, Radix Sort" alt="Lecture 5: Linear-time Sorting: Lower Bounds, Counting Sort, Radix Sort"><p>Lecture 5: Linear-time Sort...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-6-order-statistics-median/index.htm">
<img src="../../../contents/video-lectures/lecture-6-order-statistics-median/6_046J_lec06_th.jpg" title="Lecture 6: Order Statistics, Median" alt="Lecture 6: Order Statistics, Median"><p>Lecture 6: Order Statistics...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-7-hashing-hash-functions/index.htm">
<img src="../../../contents/video-lectures/lecture-7-hashing-hash-functions/6_046J_lec07_th.jpg" title="Lecture 7: Hashing, Hash Functions" alt="Lecture 7: Hashing, Hash Functions"><p>Lecture 7: Hashing, Hash Fu...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-8-universal-hashing-perfect-hashing/index.htm">
<img src="../../../contents/video-lectures/lecture-8-universal-hashing-perfect-hashing/6_046J_lec08_th.jpg" title="Lecture 8: Universal Hashing, Perfect Hashing" alt="Lecture 8: Universal Hashing, Perfect Hashing"><p>Lecture 8: Universal Hashin...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-9-relation-of-bsts-to-quicksort-analysis-of-random-bst/index.htm">
<img src="../../../contents/video-lectures/lecture-9-relation-of-bsts-to-quicksort-analysis-of-random-bst/6_046J_lec09_th.jpg" title="Lecture 9: Relation of BSTs to Quicksort - Analysis of Random BST" alt="Lecture 9: Relation of BSTs to Quicksort - Analysis of Random BST"><p>Lecture 9: Relation of BSTs...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-10-red-black-trees-rotations-insertions-deletions/index.htm">
<img src="../../../contents/video-lectures/lecture-10-red-black-trees-rotations-insertions-deletions/6_046J_lec10_th.jpg" title="Lecture 10: Red-black Trees, Rotations, Insertions, Deletions" alt="Lecture 10: Red-black Trees, Rotations, Insertions, Deletions"><p>Lecture 10: Red-black Trees...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-11-augmenting-data-structures-dynamic-order-statistics-interval-trees/index.htm">
<img src="../../../contents/video-lectures/lecture-11-augmenting-data-structures-dynamic-order-statistics-interval-trees/6_046J_lec11_th.jpg" title="Lecture 11: Augmenting Data Structures, Dynamic Order Statistics, Interval Trees" alt="Lecture 11: Augmenting Data Structures, Dynamic Order Statistics, Interval Trees"><p>Lecture 11: Augmenting Data...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-12-skip-lists/index.htm">
<img src="../../../contents/video-lectures/lecture-12-skip-lists/6_046J_lec12_th.jpg" title="Lecture 12: Skip Lists" alt="Lecture 12: Skip Lists"><p>Lecture 12: Skip Lists</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-13-amortized-algorithms-table-doubling-potential-method/index.htm">
<img src="../../../contents/video-lectures/lecture-13-amortized-algorithms-table-doubling-potential-method/6_046J_lec13_th.jpg" title="Lecture 13: Amortized Algorithms, Table Doubling, Potential Method" alt="Lecture 13: Amortized Algorithms, Table Doubling, Potential Method"><p>Lecture 13: Amortized Algor...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-14-competitive-analysis-self-organizing-lists/index.htm">
<img src="../../../contents/video-lectures/lecture-14-competitive-analysis-self-organizing-lists/6_046J_lec14_th.jpg" title="Lecture 14: Competitive Analysis: Self-organizing Lists" alt="Lecture 14: Competitive Analysis: Self-organizing Lists"><p>Lecture 14: Competitive Ana...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-15-dynamic-programming-longest-common-subsequence/index.htm">
<img src="../../../contents/video-lectures/lecture-15-dynamic-programming-longest-common-subsequence/6_046J_lec15_th.jpg" title="Lecture 15: Dynamic Programming, Longest Common Subsequence" alt="Lecture 15: Dynamic Programming, Longest Common Subsequence"><p>Lecture 15: Dynamic Program...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-16-greedy-algorithms-minimum-spanning-trees/index.htm">
<img src="../../../contents/video-lectures/lecture-16-greedy-algorithms-minimum-spanning-trees/6_046J_lec16_th.jpg" title="Lecture 16: Greedy Algorithms, Minimum Spanning Trees" alt="Lecture 16: Greedy Algorithms, Minimum Spanning Trees"><p>Lecture 16: Greedy Algorith...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-17-shortest-paths-i-properties-dijkstras-algorithm-breadth-first-search/index.htm">
<img src="../../../contents/video-lectures/lecture-17-shortest-paths-i-properties-dijkstras-algorithm-breadth-first-search/6_046J_lec17_th.jpg" title="Lecture 17: Shortest Paths I: Properties, Dijkstra's Algorithm, Breadth-first Search" alt="Lecture 17: Shortest Paths I: Properties, Dijkstra's Algorithm, Breadth-first Search"><p>Lecture 17: Shortest Paths ...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-18-shortest-paths-ii-bellman-ford-linear-programming-difference-constraints/index.htm">
<img src="../../../contents/video-lectures/lecture-18-shortest-paths-ii-bellman-ford-linear-programming-difference-constraints/6_046J_lec18_th.jpg" title="Lecture 18: Shortest Paths II: Bellman-Ford, Linear Programming, Difference Constraints" alt="Lecture 18: Shortest Paths II: Bellman-Ford, Linear Programming, Difference Constraints"><p>Lecture 18: Shortest Paths ...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-19-shortest-paths-iii-all-pairs-shortest-paths-matrix-multiplication-floyd-warshall-johnson/index.htm">
<img src="../../../contents/video-lectures/lecture-19-shortest-paths-iii-all-pairs-shortest-paths-matrix-multiplication-floyd-warshall-johnson/6_046J_lec19_th.jpg" title="Lecture 19: Shortest Paths III: All-pairs Shortest Paths, Matrix Multiplication, Floyd-Warshall, Johnson" alt="Lecture 19: Shortest Paths III: All-pairs Shortest Paths, Matrix Multiplication, Floyd-Warshall, Johnson"><p>Lecture 19: Shortest Paths ...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-22-advanced-topics/index.htm">
<img src="../../../contents/video-lectures/lecture-22-advanced-topics/6_046J_lec22_th.jpg" title="Lecture 22: Advanced Topics" alt="Lecture 22: Advanced Topics"><p>Lecture 22: Advanced Topics</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-23-advanced-topics-cont./index.htm">
<img src="../../../contents/video-lectures/lecture-23-advanced-topics-cont./6_046J_lec23_th.jpg" title="Lecture 23: Advanced Topics (cont.)" alt="Lecture 23: Advanced Topics (cont.)"><p>Lecture 23: Advanced Topics...</p></a>
</div>
<div class="related-media-thumbnail-nolink">
<div class="now-playing-resource">Now Playing</div>
<img src="../../../contents/video-lectures/lecture-24-advanced-topics-cont./6_046J_lec24_th.jpg" title="Lecture 24: Advanced Topics (cont.)" alt="Lecture 24: Advanced Topics (cont.)"><p>Lecture 24: Advanced Topics...</p>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-25-advanced-topics-cont.-discussion-of-follow-on-classes/index.htm">
<img src="../../../contents/video-lectures/lecture-25-advanced-topics-cont.-discussion-of-follow-on-classes/6_046J_lec25_th.jpg" title="Lecture 25: Advanced Topics (cont.) - Discussion of Follow-on Classes" alt="Lecture 25: Advanced Topics (cont.) - Discussion of Follow-on Classes"><p>Lecture 25: Advanced Topics...</p></a>
</div>
</div>
        <div id="vid_playlist" itemprop="description" class="tabContent hide">
<h2 class="subhead">Related Resources</h2>
<p><a href="../../../contents/assignments/index.htm">Assignments</a><br><a href="../../../contents/exams/index.htm">Exams</a></p>
</div>
        <div id="vid_related" itemprop="description" class="tabContent hide">
<ul><li><a class="transcript-link" title="Open in a new window." alt="Open in a new window." style="text-decoration: none; font-size: 1.0em;" target="_blank" text-decoration: none font-size: href="../../../contents/video-lectures/lecture-24-advanced-topics-cont./cJOHERGcGm4.pdf"> Download this transcript - PDF (English - US)</a></li></ul>
<p><span m="7000">-- week of 6.046. Woohoo!</span> </p>
<p><span m="8000">The topic of this final week, among our advanced topics,</span> <span m="13000">is cache oblivious algorithms. This is a particularly fun</span> <span m="18000">area, one dear to my heart because I've done a lot of</span> <span m="22000">research in this area. This is an area co-founded by</span> <span m="26000">Professor Leiserson. So, in fact,</span> <span m="29000">the first context in which I met Professor Leiserson was him</span> <span m="34000">giving a talk about cache oblivious algorithms at WADS '99</span> <span m="38000">in Vancouver I think. Yeah, that has to be an odd</span> <span m="41000">year. So, I learned about cache</span> <span m="44000">oblivious algorithms then, started working in the area,</span> <span m="48000">and it's been a fun place to play.</span> </p>
<p><span m="50000">But this topic in some sense was also developed in the</span> <span m="54000">context of this class. I think there was one semester,</span> <span m="58000">probably also '98-'99 where all of the problem sets were about</span> <span m="62000">cache oblivious algorithms. And they were,</span> <span m="67000">in particular, working out the research ideas</span> <span m="70000">at the same time. So, it must have been fun</span> <span m="73000">semester. We consider doing that this</span> <span m="75000">semester, but we kept it to the simple.</span> </p>
<p><span m="78000">We know a lot more about cache oblivious algorithms by now as</span> <span m="83000">you might expect. Right, I think that's all the</span> <span m="86000">setting. I mean, it was kind of</span> <span m="89000">developed also with a bunch of MIT students in particular,</span> <span m="93000">M.Eng. student, Harold Prokop.</span> </p>
<p><span m="95000">It was his M.Eng. thesis.</span> </p>
<p><span m="96000">There is all the citations I will give for now.</span> </p>
<p><span m="99000">I haven't posted yet, but there are some lecture</span> <span m="103000">notes that are already on my webpage.</span> </p>
<p><span m="105000">But I will link to them from the course website that gives</span> <span m="109000">all the references for all the results I'll be talking about.</span> </p>
<p><span m="113000">They've all been done in the last five years or so,</span> <span m="116000">in particular, starting in '99 when the first</span> <span m="119000">paper was published. But I won't give the specific</span> <span m="123000">citations in lecture. And, this topic is related to</span> <span m="128000">the topic of last week, multithreaded algorithms,</span> <span m="131000">although at a somewhat high level.</span> </p>
<p><span m="134000">And then it's also dealing with parallelism in modern machines.</span> </p>
<p><span m="138000">And we've had throughout all of these last two lectures,</span> <span m="142000">we've had this very simple model of a computer where we</span> <span m="146000">have random access. You can access memory at a cost</span> <span m="150000">of one. You can read and write a word</span> <span m="153000">of memory. There is some details on how</span> <span m="156000">big a word can be and whatnot. It's pretty basic,</span> <span m="159000">simple, flat model. And, at the multithreaded</span> <span m="161000">algorithm is the idea that, well, maybe you have multiple</span> <span m="165000">threads of computation running at once, but you still have this</span> <span m="168000">very flat memory. Everyone can access anything in</span> <span m="171000">memory at a constant cost. We're going to change that</span> <span m="174000">model now. And we are going to realize</span> <span m="178000">that a real machine, the memory of a real machine is</span> <span m="183000">some hierarchy. You have some CPU,</span> <span m="186000">you have some cache, probably on the same chip,</span> <span m="190000">level 1 cache, you have some level 2 cache,</span> <span m="194000">if you're lucky, maybe you have some level 3</span> <span m="198000">cache, before you get to main memory.</span> </p>
<p><span m="201000">And then, you probably have a really big disk and probably</span> <span m="206000">there's even some cache out here, but I won't even think</span> <span m="211000">about that. So, the point is,</span> <span m="215000">you have lots of different levels of memory and what's</span> <span m="218000">changing here is that things that are very close to the CPU</span> <span m="222000">are very fast to access. Usually level 1 cache you can</span> <span m="226000">access in one clock cycle or a few.</span> </p>
<p><span m="228000">And then, things get slower and slower.</span> </p>
<p><span m="230000">Memory still costs like 70 ns or so to access a chunk out of.</span> </p>
<p><span m="234000">And that's a long time. 70 ns is, of course,</span> <span m="237000">a very long time. So, as we go out here,</span> <span m="241000">we get slower. But we also get bigger.</span> </p>
<p><span m="244000">I mean, if we could put everything at level 1 cache,</span> <span m="247000">the problem would be solved. But what would be a flat</span> <span m="251000">memory. Accessing everything in here,</span> <span m="253000">we assumed takes the same amount of time.</span> </p>
<p><span m="256000">But usually, we can't afford,</span> <span m="258000">it's not even possible to put everything in level 1 cache.</span> </p>
<p><span m="262000">I mean, there's a reason why there is a memory hierarchy.</span> </p>
<p><span m="266000">Does anyone have a suggestion on what that reason might be?</span> </p>
<p><span m="272000">It's like one of these limits in life.</span> </p>
<p><span m="275000">Yeah? Fast memory is expensive.</span> </p>
<p><span m="277000">That's the practical limitations indeed,</span> <span m="280000">that you could try to build more and more at level 1 cache</span> <span m="285000">and maybe you could try to, well, yeah.</span> </p>
<p><span m="288000">Expenses is a good reason, and practically,</span> <span m="291000">that's why they may be the sizes are what they are.</span> </p>
<p><span m="295000">But suppose really fast memory were really cheap.</span> </p>
<p><span m="301000">There is a physical limitation of what's going on,</span> <span m="304000">yeah? The speed of light.</span> </p>
<p><span m="305000">Yeah, that's a bit of a problem, right?</span> </p>
<p><span m="308000">No matter how much, let's suppose you can only fit</span> <span m="311000">so many bits in an atom. You can only fit so many bits</span> <span m="315000">in a particular amount of space. If you want more bits,</span> <span m="318000">and you need more space, and the more space you have,</span> <span m="322000">the longer it's going to take for a round-trip.</span> </p>
<p><span m="325000">So, if you assume your CPU is like this point in space,</span> <span m="328000">so it's relatively small and it has to get the data in,</span> <span m="332000">the bigger the data, the farther it has to be away.</span> </p>
<p><span m="337000">But, you can have these cores around the CPU that are,</span> <span m="340000">we don't usually live in 3-D, and chips were usually in 2-D,</span> <span m="344000">but never mind. You can have the sphere that's</span> <span m="346000">closer to the CPU that's a lot faster to access.</span> </p>
<p><span m="349000">And as you get further away it costs more.</span> </p>
<p><span m="352000">And that's essentially what this model is representing,</span> <span m="355000">although it's a bit approximated from the intrinsic</span> <span m="359000">physics and geometry and whatnot.</span> </p>
<p><span m="362000">But that's the idea. The latency,</span> <span m="365000">the round-trip time to get some of this memory has to be big.</span> </p>
<p><span m="371000">In general, the costs to access memory is made up of two things.</span> </p>
<p><span m="377000">There's the latency, the round-trip time,</span> <span m="381000">which in particular is limited by the speed of light.</span> </p>
<p><span m="386000">And, plus the round-trip time, you also have to get the data</span> <span m="392000">out. And depending on how much data</span> <span m="396000">you want, it could take longer. OK, so there's something.</span> </p>
<p><span m="400000">There could be, get this right,</span> <span m="402000">let's say, the amount of data divided by the bandwidth.</span> </p>
<p><span m="406000">OK, the bandwidth is at what rate can you get the data out?</span> </p>
<p><span m="411000">And if you look at the bandwidth of these various</span> <span m="414000">levels of memory, it's all pretty much the same.</span> </p>
<p><span m="418000">If you have a well-designed computer the bandwidths should</span> <span m="422000">all be the same. OK, as you can still get data</span> <span m="427000">off disc really, really fast,</span> <span m="428000">usually at about the speed of your bus, and that the bus gets</span> <span m="433000">the CPU hopefully as fast as everything else.</span> </p>
<p><span m="436000">So, even though they're slower, they're really only slower in</span> <span m="440000">terms of latency. And so, this part is maybe</span> <span m="443000">reasonable. The bandwidth looks pretty much</span> <span m="446000">the same universally. It's the latency that's going</span> <span m="449000">up. So, if the latency is going up</span> <span m="452000">but we still get to divide by the same amount of bandwidth,</span> <span m="456000">what should we do to make the access cost at all these levels</span> <span m="460000">about the same? This is fixed.</span> </p>
<p><span m="465000">Let's say this is increasing, but this is still staying big.</span> </p>
<p><span m="473000">What could we do to balance this formula?</span> </p>
<p><span m="479000">Change the amounts. As the latency goes up,</span> <span m="485000">if we increase the amount, then the amortized cost to</span> <span m="490000">access one element will go down. So, this is amortization in a</span> <span m="496000">very simple sense. So, this was to access a whole</span> <span m="501000">block, let's say, and this amount was the size of</span> <span m="506000">the block. So, the amortized cost,</span> <span m="510000">then, to access one element is going to be the latency divided</span> <span m="516000">by the size of the block, the amount plus one over the</span> <span m="521000">bandwidth. OK, so this is what you should</span> <span m="525000">implicitly be thinking in your head.</span> </p>
<p><span m="529000">So, I'm just dividing here by the amounts because the amount</span> <span m="535000">is how many elements you get in one access, let's suppose.</span> </p>
<p><span m="542000">OK, so we get this formula for the amortized cost.</span> </p>
<p><span m="544000">The one over bandwidth is going to be good no matter what level</span> <span m="548000">we are on, I claim. There's no real fundamental</span> <span m="551000">limitation there except it might be expensive.</span> </p>
<p><span m="554000">And the latency week at the amortized out by the amounts,</span> <span m="557000">so whatever the latency is, at the latency gets bigger out</span> <span m="561000">here, we just get more and more stuff and then we make these two</span> <span m="564000">terms equal, let's say. That would be a good way to</span> <span m="567000">balance things. So what particular,</span> <span m="570000">disc has a really high latency. Not only is there speed of</span> <span m="574000">light issues here, but there's actually the speed</span> <span m="577000">of the head moving on the tracks of the disk.</span> </p>
<p><span m="579000">That takes a long time. There's a physical motion.</span> </p>
<p><span m="582000">Everything else here doesn't usually have physical motion.</span> </p>
<p><span m="585000">It's just electric. So, this is really,</span> <span m="587000">really slow and latency, so when you read something out</span> <span m="591000">of disk, you might as well read a lot of data from disc,</span> <span m="594000">like a megabyte or so. It's probably even old these</span> <span m="597000">days. Maybe you read multiple</span> <span m="598000">megabytes when you read anything from disk if you want these to</span> <span m="602000">be matched. OK, there's a bit of a problem</span> <span m="606000">with doing that. Any suggestions what the</span> <span m="610000">problem would be? So, you have this algorithm.</span> </p>
<p><span m="614000">And, whenever it reads something off of desk,</span> <span m="617000">it reads an entire megabyte of stuff around the element it</span> <span m="622000">asked for. So the amortized cost to access</span> <span m="626000">is going to be reasonable, but that's actually sort of</span> <span m="631000">assuming something. Yeah?</span> </p>
<p><span m="634000">Right. I'm assuming I'm ever going to</span> <span m="638000">use the rest of that data. If I'm going to read 10 MB</span> <span m="643000">around the one element that asked for, I access A bracket I,</span> <span m="649000">and I get 10 million items from A around I, it would be kind of</span> <span m="655000">good if the algorithm actually used that data for something.</span> </p>
<p><span m="660000">It seems reasonable. So, this would be spatial</span> <span m="666000">locality. So, we want,</span> <span m="668000">I mean the goal of this world in cache oblivious algorithms</span> <span m="675000">and cache efficient algorithms in general is you want</span> <span m="680000">algorithms that perform well when this is happening.</span> </p>
<p><span m="686000">So, this is the idea of blocking.</span> </p>
<p><span m="691000">And we want the algorithm to use all or at least most of the</span> <span m="696000">elements in a block, a consecutive chunk of memory.</span> </p>
<p><span m="701000">So, this is spatial locality.</span> </p>
<p><span m="715000">Ideally, we'd use all of them right then.</span> </p>
<p><span m="717000">But I mean, depending on your algorithm, that's a little bit</span> <span m="719000">tricky. There is another issue,</span> <span m="721000">though. So, you read in your thing</span> <span m="723000">into, read your 10 MB into main memory, let's say,</span> <span m="725000">and your memory, let's say, is at least,</span> <span m="727000">these days you should have a 4 GB memory or something.</span> </p>
<p><span m="730000">So, you could read and actually a lot of different blocks into</span> <span m="733000">main memory. What you'd like is that you can</span> <span m="735000">use those blocks for as long as possible.</span> </p>
<p><span m="737000">Maybe you don't even use them. If you have a linear time</span> <span m="740000">algorithm, you're probably only going to visit each element a</span> <span m="743000">constant number of times. So, this is enough.</span> </p>
<p><span m="745000">But if your algorithm is more than linear time,</span> <span m="747000">you're going to be accessing elements more than once.</span> </p>
<p><span m="752000">So, it would be a good idea not only to use all the elements of</span> <span m="757000">the blocks, but use them as many times as you can before you have</span> <span m="763000">to throw the block out. That's temporal locality.</span> </p>
<p><span m="767000">So ideally, you even reuse blocks as much as possible.</span> </p>
<p><span m="772000">So, I mean, we have all these caches.</span> </p>
<p><span m="775000">So, I didn't write this word. Just in case I don't know how</span> <span m="781000">to spell it, it's not the money. We should use those caches for</span> <span m="787000">something. I mean, the fact that they</span> <span m="789000">store more than one block, each cache can store several</span> <span m="793000">blocks. How many?</span> </p>
<p><span m="794000">Well, we'll get to that in a second.</span> </p>
<p><span m="797000">OK, so this is the general motivation, but at this point</span> <span m="800000">the model is still pretty damn ugly.</span> </p>
<p><span m="803000">If you wanted to design an algorithm that runs well on this</span> <span m="807000">kind of machine directly, it's possible but pretty</span> <span m="810000">difficult, and essentially never done, let's say,</span> <span m="814000">even though this is what real machines look like.</span> </p>
<p><span m="819000">At least in theory, and pretty much in practice,</span> <span m="822000">the main thing to think about is two levels at a time.</span> </p>
<p><span m="827000">So, this is a simplification where we can say a lot more</span> <span m="831000">about algorithms, a simplification over this</span> <span m="835000">model. So, in this model,</span> <span m="837000">each of these levels has different block sizes,</span> <span m="841000">and a different total sizes, it's a mess to deal with and</span> <span m="846000">design algorithms for. If you just think about two</span> <span m="850000">levels, it's relatively easy. So, we have our CPU which we</span> <span m="857000">assume has a constant number of registers only.</span> </p>
<p><span m="862000">So, you know, once it has a couple of data</span> <span m="867000">items, you can add them and whatnot.</span> </p>
<p><span m="871000">Then we have this really fast pipe.</span> </p>
<p><span m="875000">So, I draw it thick to some cache.</span> </p>
<p><span m="881000">So this is cache. And, we have a relatively</span> <span m="889000">narrow pipe to some really big other storage,</span> <span m="898000">which I will call main memory. So, I mean, that's the general</span> <span m="906000">picture. Now, this could represent any</span> <span m="909000">two of these levels. It could be between L3 cache</span> <span m="912000">and make memory. That's maybe,</span> <span m="914000">what? The naming corresponds to best.</span> </p>
<p><span m="916000">Or cache could in fact be main memory, what we consider the RAM</span> <span m="920000">of the machine, and what's called a memory over</span> <span m="923000">there to be the disk. It's whatever you care about.</span> </p>
<p><span m="926000">And usually, if you have a program,</span> <span m="928000">that's what usually we assume everything fits in main memory.</span> </p>
<p><span m="934000">Then you care about the caching behavior.</span> </p>
<p><span m="936000">So you probably look between these two levels.</span> </p>
<p><span m="939000">That's probably what matters the most inner program because</span> <span m="942000">the cost differential here is really big relative to the cost</span> <span m="946000">differential here. If your data doesn't even fit</span> <span m="949000">it main memory, and you have to go to disk,</span> <span m="951000">then you really care about this level because the cost</span> <span m="954000">differential here is huge. It's like six orders of</span> <span m="957000">magnitude, let's say. So, in practice you may think</span> <span m="960000">of just two memory levels that are the most relevant.</span> </p>
<p><span m="965000">OK, now I'm going to define some parameters.</span> </p>
<p><span m="969000">I'm going to call them cache and make memory just for clarity</span> <span m="974000">because I like to think of main memory just the way it used to</span> <span m="980000">be. And now all we have to worry</span> <span m="983000">about is this extra thing called cache.</span> </p>
<p><span m="986000">It has some bounded size, and there's a block size.</span> </p>
<p><span m="991000">The block size is B. and a number of blocks is M</span> <span m="996000">over B. So, the total size of the cache</span> <span m="1001000">is M. OK, main memory is also blocked</span> <span m="1004000">into blocks of size B. And we assume that it has</span> <span m="1009000">essentially infinite size. We don't care about its size in</span> <span m="1015000">this picture. It's whatever is big enough to</span> <span m="1019000">hold the size of your algorithm, or data structure,</span> <span m="1024000">or whatever. OK, so that's the general</span> <span m="1029000">model. And for strange,</span> <span m="1031000">historical reasons, which I don't want to get into,</span> <span m="1035000">these things are called capital M and capital B.</span> </p>
<p><span m="1040000">Even though M sounds a lot like memory, it's really for cache,</span> <span m="1045000">and don't ask. OK, this is to preserve</span> <span m="1049000">history. OK, now what do we do with this</span> <span m="1052000">model? It seems nice,</span> <span m="1054000">but now what do we measure about it?</span> </p>
<p><span m="1056000">What I'm going to assume is that the cache is really fast.</span> </p>
<p><span m="1059000">So the CPU can access cache essentially instantaneously.</span> </p>
<p><span m="1063000">I still have to pay for the computation that the CPU is</span> <span m="1066000">doing, but I'm assuming cache is close enough that I don't care.</span> </p>
<p><span m="1070000">And that may memory is so big that it has to be far away,</span> <span m="1074000">and therefore, this pipe is a problem.</span> </p>
<p><span m="1076000">I mean, what I should really draw is that pipe is still</span> <span m="1079000">thick, but is really long. So, the latency is high.</span> </p>
<p><span m="1084000">The bandwidth is still high. OK, and all transfers here</span> <span m="1087000">happened as blocks. So, when you don't have</span> <span m="1090000">something, so the idea is CPU asks for A of I,</span> <span m="1092000">as for something in memory, if it's in the cache,</span> <span m="1095000">it gets it. That's free.</span> </p>
<p><span m="1097000">Otherwise, it has to grab the entire block containing that</span> <span m="1101000">element from main memory, brings it into cache,</span> <span m="1103000">maybe kicks somebody out if the cache was full,</span> <span m="1106000">and then the CPU can use that data and keep going.</span> </p>
<p><span m="1109000">Until it accesses something else that's not in cache,</span> <span m="1113000">then it has to grab it from main memory.</span> </p>
<p><span m="1117000">When you kick something out, you're actually writing back to</span> <span m="1123000">memory. That's the model.</span> </p>
<p><span m="1126000">So, we suppose the accesses to cache are free.</span> </p>
<p><span m="1131000">But we can still think about the running time of the</span> <span m="1136000">algorithm. I'm not going to change the</span> <span m="1141000">definition of running time. This would be the computation</span> <span m="1145000">time, or the work if you want to use multithreaded lingo,</span> <span m="1150000">computation time. OK, so we still have time,</span> <span m="1153000">and T of N will still mean what it did before.</span> </p>
<p><span m="1157000">This is just an extra level of refinement of understanding of</span> <span m="1162000">what's going on. Essentially,</span> <span m="1164000">measuring the parallelism that we can exploit out of the memory</span> <span m="1169000">system, that when you access something you actually get B</span> <span m="1174000">items. So, this is the old stuff.</span> </p>
<p><span m="1179000">Now, what I want to do is count memory transfers.</span> </p>
<p><span m="1187000">These are transfers of blocks, so I should say block memory</span> <span m="1196000">transfers between the two levels, so, between the cache</span> <span m="1204000">and main memory. So, memory transfers are either</span> <span m="1212000">reading reads or writes. Maybe I should say that.</span> </p>
<p><span m="1219000">These are number of block reads and writes from and to the main</span> <span m="1229000">memory. OK, so I'm going to introduce</span> <span m="1233000">some notation. This is new notation,</span> <span m="1235000">so we'll see how it works out. MT of N I want to represent the</span> <span m="1240000">number of memory transfers instead of just normal time of</span> <span m="1244000">the problem of size N. Really, this is a function that</span> <span m="1249000">depends not only on N but also on these parameters,</span> <span m="1252000">B and M, in our model. So, this is what it should be,</span> <span m="1256000">MT_B,M(N), but that's obviously pretty messy,</span> <span m="1260000">so I'm going to stick to MT of N.</span> </p>
<p><span m="1264000">But this will always, because mainly I care about the</span> <span m="1267000">growth in terms of N. well, I care about the growth</span> <span m="1269000">in terms of all things, but the only thing I could</span> <span m="1272000">change is N. So, most of the time I only</span> <span m="1274000">think about, like when we are writing recurrences,</span> <span m="1277000">only N is changing. I can't recurse on the block</span> <span m="1280000">size. I can't recurse on the size of</span> <span m="1282000">cache. Those are given to me.</span> </p>
<p><span m="1284000">They're fixed. OK, so we'll be changing N</span> <span m="1286000">mainly. But B and M always matter here.</span> </p>
<p><span m="1288000">They're not constants. They're parameters of the</span> <span m="1291000">model. OK, easy enough.</span> </p>
<p><span m="1294000">This is something called the disk access model,</span> <span m="1299000">if you like DAM models, or the external memory model,</span> <span m="1304000">or the cache aware model. Maybe I should mention that;</span> <span m="1310000">this is the cache aware. In general, you have some</span> <span m="1315000">algorithm that runs on this kind of model, machine model.</span> </p>
<p><span m="1321000">That's a cache aware algorithm. OK, we're not too interested in</span> <span m="1327000">cache aware algorithms. We've seen one,</span> <span m="1330000">B trees. B trees are cache aware data</span> <span m="1332000">structure. You assume that there is some</span> <span m="1334000">block size, B, underlying.</span> </p>
<p><span m="1335000">Maybe you didn't see exactly this model.</span> </p>
<p><span m="1338000">In particular, it didn't really matter how big</span> <span m="1340000">the cache was because you just wanted to know.</span> </p>
<p><span m="1343000">When I read B items, I can use all of them as much</span> <span m="1346000">as possible and figure out where I fit among those B items,</span> <span m="1349000">and that gives me log base B of N memory transfers instead of</span> <span m="1352000">log N, which would be, if you just threw your favorite</span> <span m="1356000">balanced binary search tree. So, log base B of N is</span> <span m="1361000">definitely better than log base 2 of N.</span> </p>
<p><span m="1366000">B trees are a cache aware algorithm.</span> </p>
<p><span m="1371000">OK, what we would like to do today and next lecture is get</span> <span m="1378000">cache oblivious algorithms. So, there's essentially only</span> <span m="1386000">one difference between cache aware algorithms and cache</span> <span m="1392000">oblivious algorithms. In cache oblivious algorithms,</span> <span m="1398000">the algorithm doesn't know what B and M are.</span> </p>
<p><span m="1402000">So this is a bit of a subtle point, but very cool idea.</span> </p>
<p><span m="1410000">You assume that this is the model of the machine,</span> <span m="1412000">and you care about the number of memory transfers between this</span> <span m="1416000">cache of size M with blocking B, and main memory with blocking</span> <span m="1419000">B. But you don't actually know</span> <span m="1421000">what the model is. You don't know the other</span> <span m="1423000">parameters of the model. It looks like this,</span> <span m="1425000">but you don't know the width. You don't know the height.</span> </p>
<p><span m="1428000">Why not? So, the analysis knows what B</span> <span m="1430000">and M are. We are going to write some</span> <span m="1432000">algorithms which look just like boring old algorithms that we've</span> <span m="1436000">seen throughout the lecture. That's one of the nice things</span> <span m="1440000">about this model. Every algorithm we have seen is</span> <span m="1443000">a cache oblivious algorithm, all right, because we didn't</span> <span m="1446000">even know the word cache in this class until today.</span> </p>
<p><span m="1448000">So, we already have lots of algorithms to choose from.</span> </p>
<p><span m="1451000">The thing is, some of them will perform well</span> <span m="1453000">in this model, and some of them won't.</span> </p>
<p><span m="1455000">So, we would like to design algorithms that just like our</span> <span m="1458000">old algorithms that happened to perform well in this context,</span> <span m="1461000">no matter what B and M are. So, another way this is the</span> <span m="1464000">same algorithm should work well for all values of B and M if you</span> <span m="1467000">have a good cache oblivious algorithm.</span> </p>
<p><span m="1471000">OK, there are a few consequences to this assumption.</span> </p>
<p><span m="1473000">In a cache aware algorithm, you can explicitly say,</span> <span m="1476000">OK, I'm blocking my memory into chunks of size B.</span> </p>
<p><span m="1479000">Here they are. I was going to store these B</span> <span m="1482000">elements here, these B elements here,</span> <span m="1484000">because you know B, you can do that.</span> </p>
<p><span m="1486000">You can say, well, OK, now I want to read</span> <span m="1488000">these B items into my cache, and then write out these ones</span> <span m="1491000">over here. You can explicitly maintain</span> <span m="1493000">your cache. With cache oblivious</span> <span m="1495000">algorithms, you can't because you don't know what it is.</span> </p>
<p><span m="1500000">So, it's got to be all implicit.</span> </p>
<p><span m="1504000">And this is pretty much how caches work anyway except for</span> <span m="1511000">disk. So, it's a pretty reasonable</span> <span m="1515000">model. In particular,</span> <span m="1518000">when you access an element that's not in cache,</span> <span m="1524000">you automatically fetch the block containing that element.</span> </p>
<p><span m="1533000">And you pay one memory transfer for that if it wasn't already</span> <span m="1538000">there. Another bit of a catch here is,</span> <span m="1541000">what if your cache is full? Then you've got to kick some</span> <span m="1545000">block out of your cache. And then, so we need some model</span> <span m="1550000">of which block gets kicked out because we can't control that.</span> </p>
<p><span m="1555000">We have no knowledge of what the blocks are in our algorithm.</span> </p>
<p><span m="1560000">So what we're going to assume in this model is the ideal</span> <span m="1565000">thing, that when you fetch a new block, if your cache is full,</span> <span m="1570000">you evict a block that will be used farthest in the future.</span> </p>
<p><span m="1577000">Sorry, the furthest. Farthest is distance.</span> </p>
<p><span m="1581000">Furthest is time. Furthest in the future.</span> </p>
<p><span m="1585000">OK, this would be the best possible thing to do.</span> </p>
<p><span m="1591000">It's a little bit hard to do in practice because you don't know</span> <span m="1595000">the future generally, unless you're omniscient.</span> </p>
<p><span m="1598000">So, this is a bit of an idealized model.</span> </p>
<p><span m="1601000">But it's pretty reasonable in the sense that if you've read</span> <span m="1605000">the reading handout number 20, this paper by Sleator and</span> <span m="1609000">Tarjan, they introduce the idea of competitive algorithms.</span> </p>
<p><span m="1612000">So, we only talked about a small portion of that paper that</span> <span m="1616000">moved to front heuristic for storing a list.</span> </p>
<p><span m="1621000">But, it also proves that there are strategies,</span> <span m="1623000">and maybe you heard this in recitation.</span> </p>
<p><span m="1626000">Some people covered it; some didn't,</span> <span m="1628000">that these are called paging strategies.</span> </p>
<p><span m="1630000">So, you want to maintain some cache of pages or blocks,</span> <span m="1633000">and you pay whenever you have to access a block that's not in</span> <span m="1637000">your cache. The best thing to do is to</span> <span m="1639000">always kick out the block that will be used farthest in the</span> <span m="1643000">future because that way you'll use all the blocks that are in</span> <span m="1647000">there. This turns out to be the</span> <span m="1648000">offline optimal strategy if you knew the future.</span> </p>
<p><span m="1653000">But, there are algorithms that are essentially constant</span> <span m="1655000">competitive against this strategy.</span> </p>
<p><span m="1657000">I don't want to get into details because they're not</span> <span m="1660000">exactly constant competitive. But they are sufficiently</span> <span m="1663000">constant competitive for the purposes of this lecture that we</span> <span m="1666000">can assume this, not have to worry about it.</span> </p>
<p><span m="1669000">Most of the time, we don't even really use this</span> <span m="1671000">assumption. But there it is.</span> </p>
<p><span m="1673000">That's the cache oblivious model.</span> </p>
<p><span m="1675000">It makes things cleaner to think about just anything that</span> <span m="1678000">should be done, will be done.</span> </p>
<p><span m="1681000">And you can simulate that with least recently used or whatever</span> <span m="1685000">good heuristic that you want to that's competitive against the</span> <span m="1690000">optimal. OK, that's pretty much the</span> <span m="1692000">cache oblivious algorithm. Once you have the two level</span> <span m="1696000">model, you just assume you don't know B and M.</span> </p>
<p><span m="1700000">You have this automatic request in writing, and whatnot.</span> </p>
<p><span m="1704000">A little bit more to say, I guess, it may be obvious at</span> <span m="1708000">this point, but I've been drawing everything as tables.</span> </p>
<p><span m="1714000">So, it's not really clear what the linear order is.</span> </p>
<p><span m="1717000">Linear order is just the reading order.</span> </p>
<p><span m="1720000">So, although we don't explicitly say it most of the</span> <span m="1724000">time, a typical model is that memory is a linear array.</span> </p>
<p><span m="1728000">Everything that you ever store in your program is written in</span> <span m="1733000">this linear array. If you've ever programmed in</span> <span m="1737000">Assembly or whatever, that's the model.</span> </p>
<p><span m="1741000">You have the address space, and any number between here and</span> <span m="1744000">here, that's where you can actually, this is physical</span> <span m="1748000">memory. This is all you can write to.</span> </p>
<p><span m="1751000">So, it starts at zero and goes out to, let's call it infinity</span> <span m="1755000">over here. And, if you allocate some</span> <span m="1757000">array, maybe it occupies some space in the middle.</span> </p>
<p><span m="1760000">Who knows? OK, we usually don't think</span> <span m="1763000">about that much. What I care about now is that</span> <span m="1766000">memory itself is blocked in this view.</span> </p>
<p><span m="1769000">So, however your stuff is stored in memory,</span> <span m="1771000">it's blocked into clusters of length B.</span> </p>
<p><span m="1776000">So, if this is, let me call it one and be a</span> <span m="1779000">little bit nicer. This is B.</span> </p>
<p><span m="1781000">This is position B plus one. This is 2B, and 2B plus one,</span> <span m="1786000">and so on. These are the indexes into</span> <span m="1789000">memory. This is how the blocking</span> <span m="1791000">happens. If you access something here,</span> <span m="1794000">you get that chunk from U, round it down to the previous</span> <span m="1799000">multiple of B, round it up to the next</span> <span m="1802000">multiple of B. That's what you always get.</span> </p>
<p><span m="1806000">OK, so if you think about some array that's maybe allocated</span> <span m="1811000">here, OK, you have to keep in mind that that array may not be</span> <span m="1815000">perfectly aligned with the blocks.</span> </p>
<p><span m="1818000">But more or less it will be so we don't care too much.</span> </p>
<p><span m="1821000">But that's a bit of a subtlety there.</span> </p>
<p><span m="1824000">OK, so that's pretty much the model.</span> </p>
<p><span m="1828000">So every algorithm we've seen, except B trees,</span> <span m="1832000">is a cache oblivious algorithm. And our question is,</span> <span m="1836000">now, we know how everything runs in terms of running time.</span> </p>
<p><span m="1841000">Now we want to measure the number of memory transfers,</span> <span m="1846000">MT of N. I want to mention one other</span> <span m="1849000">fact or theorem. I'll put it in brackets because</span> <span m="1853000">I don't want to state it precisely.</span> </p>
<p><span m="1858000">But if you have an algorithm that is efficient on two levels,</span> <span m="1864000">so in other words, what we're looking at,</span> <span m="1868000">if we just think about the two level world and your algorithm</span> <span m="1874000">is cache oblivious, then it is efficient on any</span> <span m="1878000">number of levels in your memory hierarchy, say,</span> <span m="1883000">L levels. So, I don't want to define what</span> <span m="1887000">efficient means. But the intuition is,</span> <span m="1891000">if your machine really looks like this and you have a cache</span> <span m="1894000">oblivious algorithm, you can apply the cache</span> <span m="1896000">oblivious analysis for all B and M.</span> </p>
<p><span m="1898000">So you can analyze the number of memory transfers here,</span> <span m="1901000">here, here, here, and here.</span> </p>
<p><span m="1903000">And if you have a good cache oblivious algorithm,</span> <span m="1905000">the performances at all those levels has to be good.</span> </p>
<p><span m="1908000">And therefore, the whole performance is good.</span> </p>
<p><span m="1911000">Good here means asymptotically optimal up to constant factors,</span> <span m="1914000">something like that. OK, so I don't want to prove</span> <span m="1917000">that, and you can read the cache oblivious papers.</span> </p>
<p><span m="1921000">That's a nice fact about cache oblivious algorithms.</span> </p>
<p><span m="1924000">If you have a cache aware algorithm that tunes to a</span> <span m="1928000">particular value of B, and a particular value of M,</span> <span m="1932000">you're not going to have that problem.</span> </p>
<p><span m="1935000">So, this is one nice feature of cache obliviousness.</span> </p>
<p><span m="1939000">Another nice feature is when you are coding the algorithm,</span> <span m="1943000">you don't have to put in B and M.</span> </p>
<p><span m="1946000">So, that simplifies things a bit.</span> </p>
<p><span m="1948000">So, let's do some algorithms. Enough about models.</span> </p>
<p><span m="1954000">OK, we're going to start out with some really simple things</span> <span m="1960000">just to get warmed up on the analysis side.</span> </p>
<p><span m="1965000">The most basic thing you can do that's good in a cache oblivious</span> <span m="1972000">world is scanning. So, scanning is just visiting</span> <span m="1977000">the items in an array in order. So, visit A_1 up to A_N in</span> <span m="1983000">order. For some notion of visit,</span> <span m="1986000">this is presumably some constant time operation.</span> </p>
<p><span m="1989000">For example, suppose you want to compute the</span> <span m="1992000">aggregate of the array. You want to sum all the</span> <span m="1996000">elements in the array. So, you have one extra variable</span> <span m="1999000">using, but you can store that in a register or whatever,</span> <span m="2003000">so that's one simple example. Sum the array.</span> </p>
<p><span m="2007000">OK, so here's the picture. We have our memory.</span> </p>
<p><span m="2011000">Each of these cells represents one item, one element,</span> <span m="2016000">log N bits, one word, whatever.</span> </p>
<p><span m="2018000">Our array is somewhere in here. Maybe it's there.</span> </p>
<p><span m="2023000">And we go from here to here to here to here.</span> </p>
<p><span m="2027000">OK, and so on. So, what does this cost?</span> </p>
<p><span m="2030000">What is the number of memory transfers?</span> </p>
<p><span m="2033000">We know that this is a linear time algorithm.</span> </p>
<p><span m="2037000">It takes order N time. What does it cost in terms of</span> <span m="2043000">memory transfers? N over B, pretty much.</span> </p>
<p><span m="2047000">We like to say it's order N over B plus two or one in the</span> <span m="2052000">big O. This is a bit of worry.</span> </p>
<p><span m="2055000">I mean, N could be smaller than B.</span> </p>
<p><span m="2058000">We really want to think about all the cases,</span> <span m="2061000">especially because usually you're not doing this on</span> <span m="2066000">something of size N. You're doing it on something of</span> <span m="2071000">size k, where we don't really know much about k.</span> </p>
<p><span m="2077000">But in general, it's N over B plus one because</span> <span m="2080000">we always need at least one memory transfer to look at</span> <span m="2083000">something, unless N is zero. And in particular,</span> <span m="2086000">it's plus two if you care about the constants.</span> </p>
<p><span m="2089000">If I don't write the big O, then it would be plus two at</span> <span m="2093000">most because you could essentially waste the first</span> <span m="2097000">block and that everything is fine for awhile.</span> </p>
<p><span m="2101000">And then, if you're unlucky, you essentially waste the last</span> <span m="2105000">blocked. There is just one element in</span> <span m="2108000">that block, and you're not getting much out of it.</span> </p>
<p><span m="2112000">Everything in the middle, though, every block between the</span> <span m="2116000">first and last block has to be full.</span> </p>
<p><span m="2119000">So, you're using all of those elements.</span> </p>
<p><span m="2122000">So out of the N elements, you only have N over B blocks</span> <span m="2126000">because the block has B elements.</span> </p>
<p><span m="2128000">OK, that's pretty trivial. Let me do something slightly</span> <span m="2133000">more interesting, which is two scans at once.</span> </p>
<p><span m="2138000">OK, here we are not assuming anything about M.</span> </p>
<p><span m="2141000">we're not assuming anything about the size of the cache,</span> <span m="2145000">just that I can hold a single block.</span> </p>
<p><span m="2148000">The last block that we visited has to be there.</span> </p>
<p><span m="2151000">OK, you can also do a constant number of parallel scans.</span> </p>
<p><span m="2155000">This is not really parallel in the sense of multithreaded,</span> <span m="2160000">bit simulated parallelism. I mean, if you have a constant</span> <span m="2166000">number, do one, do the other,</span> <span m="2169000">do the other, come back, come back,</span> <span m="2172000">come back, all right, visit them in turn round robin,</span> <span m="2178000">whatever. For example,</span> <span m="2180000">here's a cute piece of code. If you want to reverse an</span> <span m="2186000">array, OK, then you can do it. This is a good puzzle.</span> </p>
<p><span m="2193000">You can do it by essentially two scans where you repeatedly</span> <span m="2198000">swapped the first and last element.</span> </p>
<p><span m="2202000">So I was swapping A_i with N minus i plus one,</span> <span m="2206000">and just restart at one. So, here's your array.</span> </p>
<p><span m="2211000">Suppose this is actually my array.</span> </p>
<p><span m="2214000">I swap these two guys, and I saw these two guys,</span> <span m="2219000">and so on. That will reverse my array,</span> <span m="2224000">and this should work hopefully the middle as well if it's odd.</span> </p>
<p><span m="2228000">It should not do anything. And you can view this as two</span> <span m="2233000">scans. There is one scan that's coming</span> <span m="2236000">in this way. There's also a reverse scan,</span> <span m="2239000">ooh, some more sophisticated, coming back this way.</span> </p>
<p><span m="2243000">Of course, reverse scan has the same analysis.</span> </p>
<p><span m="2246000">And as long as your cache is big enough to store at least two</span> <span m="2251000">blocks, which is a pretty reasonable assumption,</span> <span m="2255000">so let's write it. Assuming the number of blocks</span> <span m="2260000">in the cache, which is M over B,</span> <span m="2263000">is at least two in this algorithm, the number of memory</span> <span m="2269000">transfers is still order N over B plus one.</span> </p>
<p><span m="2273000">OK, the constant goes up maybe, but in this case it probably</span> <span m="2278000">doesn't. But who cares.</span> </p>
<p><span m="2282000">OK, as long as you're doing a constant number of scans,</span> <span m="2286000">and some constant number of arrays, it happens to be one of</span> <span m="2291000">them's reversed, whatever, it will take,</span> <span m="2295000">we call this linear time. It's linear in the number of</span> <span m="2300000">blocks in your input. OK, great.</span> </p>
<p><span m="2302000">So now you can reverse an array: exciting.</span> </p>
<p><span m="2306000">Let's try another simple algorithm on another board.</span> </p>
<p><span m="2327000">Let's try binary search. So just like last week,</span> <span m="2330000">we're going back to our basics here.</span> </p>
<p><span m="2333000">Scanning we didn't even talk about in this class.</span> </p>
<p><span m="2337000">Binary search is something we talked about a little bit.</span> </p>
<p><span m="2342000">It was a simple divide and conquer algorithm.</span> </p>
<p><span m="2344000">I hope you all remember it. And if we look at an array,</span> <span m="2348000">and I'm not going to draw the cells here because I want to</span> <span m="2351000">imagine a really big array, binary search,</span> <span m="2354000">but suppose it always goes to left.</span> </p>
<p><span m="2356000">It starts by visiting this element in the middle.</span> </p>
<p><span m="2359000">Then ago so the quarter marked. Then it goes to the one eighth</span> <span m="2363000">mark. OK, this is one hypothetical</span> <span m="2365000">execution of a binary search. OK, and eventually it finds the</span> <span m="2369000">element it's looking for. It finds where it fits at</span> <span m="2372000">least. So x is over here.</span> </p>
<p><span m="2375000">So, we know that it takes log N time.</span> </p>
<p><span m="2378000">How many memory transfers of the take?</span> </p>
<p><span m="2381000">Now, I blocked this array into chunks of size B,</span> <span m="2385000">blocks of size B. How many blocks do I touch?</span> </p>
<p><span m="2389000">This one's a little bit more subtle.</span> </p>
<p><span m="2418000">It depends on the relative sizes of N and B,</span> <span m="2421000">yeah. Log base B of N would be a good</span> <span m="2423000">guess. We would like it to be,</span> <span m="2425000">let's say, hope, is that it's log base B of N</span> <span m="2429000">because we know that B trees can search in what's essentially a</span> <span m="2433000">sorted list of N items in log base B of N time.</span> </p>
<p><span m="2438000">That turns out to be optimal in the cache oblivious model or in</span> <span m="2442000">the two level model you've got to pay log base B of N.</span> </p>
<p><span m="2446000">I won't prove that here. The same reason you need log N</span> <span m="2451000">comparisons to do a binary search in the normal model.</span> </p>
<p><span m="2455000">Alas, it is possible to get log base B of N even without knowing</span> <span m="2460000">B. But, binary search does not do</span> <span m="2466000">it. Log of N over B,</span> <span m="2469000">yes. So the number of memory</span> <span m="2473000">transfers on N items is log of N over B also known as,</span> <span m="2482000">let's say, plus one, also known as log N minus log</span> <span m="2491000">B. OK, whereas log base B of N is</span> <span m="2495000">log N divided by log B, OK, clearly this is much better</span> <span m="2499000">than subtracting. So, this would be good,</span> <span m="2502000">but this is bad. Most of the time,</span> <span m="2505000">this is log N, which is no better,</span> <span m="2507000">I mean, you're not using blocks at all essentially.</span> </p>
<p><span m="2511000">The idea is, out here, I mean,</span> <span m="2513000">there's some little, tiny block that contains this</span> <span m="2517000">thing. I mean, tiny depends on how big</span> <span m="2520000">B is. But, each of these items will</span> <span m="2523000">be in a different block until you get essentially within one</span> <span m="2526000">block worth of x. When you get within one block</span> <span m="2529000">worth of x, there's only like a constant number of blocks that</span> <span m="2532000">matter, and so all of these accesses are indeed within the</span> <span m="2535000">same block. But, how many are there?</span> </p>
<p><span m="2537000">Well, just log B because you're only spending log B within a,</span> <span m="2541000">if you're within an interval of size k, you're only going to</span> <span m="2544000">spend log k steps in it. So, you're saving log B in</span> <span m="2547000">here, but overall you're paying log N, so you only get log N</span> <span m="2550000">minus log B plus some constant. OK, so this is bad news for</span> <span m="2554000">binary search. So, not all of the algorithms</span> <span m="2557000">we've seen are going to work well in this model.</span> </p>
<p><span m="2560000">We need a lot more thinking before we can solve what is</span> <span m="2563000">essentially the binary search problem, finding an element in a</span> <span m="2567000">sorted list, in log base B of N without knowing B.</span> </p>
<p><span m="2570000">OK, we know we could use B trees.</span> </p>
<p><span m="2572000">If you knew B, great, that works,</span> <span m="2573000">and that's optimal. But without knowing B,</span> <span m="2576000">it's a little bit harder. And this gets us into the world</span> <span m="2582000">of divide and conquer. Also like last week,</span> <span m="2586000">and like the first few weeks of this class, divide and conquer</span> <span m="2593000">is your friend. And, it turns out divide and</span> <span m="2597000">conquer is not the only tool, but it's a really useful tool</span> <span m="2603000">in designing cache oblivious algorithms.</span> </p>
<p><span m="2607000">And, let me say why.</span> </p>
<p><span m="2623000">So, we'll see a bunch of divide and conquer based algorithms,</span> <span m="2627000">cache oblivious. And, the intuition is that we</span> <span m="2630000">can take all the favorite algorithms we have,</span> <span m="2634000">obviously it doesn't always work.</span> </p>
<p><span m="2636000">Binary search was a divide and conquer algorithm.</span> </p>
<p><span m="2639000">It's not so great. But, in general,</span> <span m="2643000">the idea is that your algorithm can just do the normal divide</span> <span m="2647000">and conquer thing, right?</span> </p>
<p><span m="2648000">You divide your problem into subproblems of smaller size</span> <span m="2652000">repeatedly, all the way down to problems of constant size,</span> <span m="2655000">OK, just like before. But, if you're recursively</span> <span m="2659000">dividing your problem into smaller things,</span> <span m="2661000">at some point you can think about it and say,</span> <span m="2664000">well, wait, I mean, the algorithm divides all the</span> <span m="2667000">way, but we can think about the point at which the problem fits</span> <span m="2671000">in a block or fits in cache. OK, and that's the analysis.</span> </p>
<p><span m="2676000">OK, we'll think about the time when your problem is small</span> <span m="2680000">enough that we can analyze it in some other way.</span> </p>
<p><span m="2683000">So, usually, we analyze it recursively.</span> </p>
<p><span m="2686000">We get a recurrence. What we're changing,</span> <span m="2688000">essentially, is the base case.</span> </p>
<p><span m="2690000">So, in the base case, we don't want to go down to a</span> <span m="2694000">constant size. That's too far.</span> </p>
<p><span m="2696000">I'll show you some examples. We want to consider the point</span> <span m="2702000">in recursion at which either the problem fits in cache,</span> <span m="2709000">so it has size less than or equal to M, or it fits in order</span> <span m="2717000">one blocks. That's another natural time to</span> <span m="2722000">do it. Order one blocks would be even</span> <span m="2727000">better than fitting in cache. So, this means a size order B.</span> </p>
<p><span m="2735000">OK, this will change the base case of the recurrence,</span> <span m="2741000">and it will turn out to give us good answers instead of bad</span> <span m="2748000">ones. So, let's do a simple example.</span> </p>
<p><span m="2752000">Our good friend order statistics, in particular,</span> <span m="2757000">for finding medians. So, I hope you all know this by</span> <span m="2764000">heart. Remember the worst case linear</span> <span m="2768000">time, median finding algorithm by Bloom et al.</span> </p>
<p><span m="2772000">I'll write this fast. We partition our array.</span> </p>
<p><span m="2777000">It turns out, this is a good algorithm as it</span> <span m="2781000">is. We partition our array</span> <span m="2784000">conceptually into N over five, five tuples into little groups</span> <span m="2790000">of five. This may not have been exactly</span> <span m="2796000">how I wrote it last time. I didn't check.</span> </p>
<p><span m="2800000">But, it's the same algorithm. You compute the median of each</span> <span m="2806000">five tuple. Then you recursively compute</span> <span m="2809000">the median of the medians of these medians.</span> </p>
<p><span m="2831000">Then, you partition around x. So, that gave us some element</span> <span m="2835000">that was roughly in the middle. It was within the middle half,</span> <span m="2840000">I think. Partition around x,</span> <span m="2842000">and then we show that you could always recurse on just one of</span> <span m="2847000">the sides.</span> </p>
<p><span m="2858000">OK, this was our good old friend for computing,</span> <span m="2861000">order statistics, or medians, or whatnot.</span> </p>
<p><span m="2863000">OK, so how much time does this, well, we know how much time</span> <span m="2867000">this takes. It should be linear time.</span> </p>
<p><span m="2870000">But how many memory transfers does this take?</span> </p>
<p><span m="2872000">Well, conceptually partitioning that, I can do,</span> <span m="2876000">in zero. Maybe I have to compute N over</span> <span m="2878000">five, no big deal here. We're not thinking about</span> <span m="2882000">computation. I have to find the median of</span> <span m="2885000">each tuple. So, here it matters how my</span> <span m="2887000">array is laid out. But, what I'm going to do is</span> <span m="2890000">take my array, take the first five elements,</span> <span m="2893000">and then the next five elements and so on.</span> </p>
<p><span m="2896000">Those will be my five tuples. So, I can implement this just</span> <span m="2900000">by scanning, and then computing the median on those five</span> <span m="2903000">elements, which I stored in the five registers on my CPU.</span> </p>
<p><span m="2907000">I'll assume that there are enough registers for that.</span> </p>
<p><span m="2912000">And, I compute the median, write it out to some array out</span> <span m="2915000">here. So, it's going to be one</span> <span m="2918000">element. So, the median of here goes</span> <span m="2920000">into there. The median of these guys goes</span> <span m="2923000">into there, and so on. So, I'm scanning in here,</span> <span m="2926000">and in parallel, I'm scanning an output in here.</span> </p>
<p><span m="2930000">So, it's two parallel scans. So, that takes linear time.</span> </p>
<p><span m="2934000">So, this takes order N over B plus one memory transfers.</span> </p>
<p><span m="2939000">OK, then we have recursively compute the median of the</span> <span m="2943000">medians. This step used to be T of N</span> <span m="2946000">over five. Now it's MT of N over five,</span> <span m="2949000">OK, with the same values of B and M.</span> </p>
<p><span m="2952000">Then we partition around x. Partitioning is also like three</span> <span m="2957000">parallel scans if you work it out.</span> </p>
<p><span m="2959000">So, this is also going to take linear memory transfers,</span> <span m="2964000">N over B plus one. And then, we recurse on one of</span> <span m="2968000">the sides, and this is the fun part of the analysis which I</span> <span m="2973000">won't repeat here. But, we get MT of,</span> <span m="2977000">like, three quarters N. I think originally it was seven</span> <span m="2982000">tenths, so we simplified to three quarters,</span> <span m="2985000">which is hopefully bigger than seven tenths.</span> </p>
<p><span m="2989000">Yeah, it is. OK, so this is the new</span> <span m="2992000">analysis. Now we get a recurrence.</span> </p>
<p><span m="2995000">So, let's do that.</span> </p>
<p><span m="3016000">So, the analysis is we get this MT of N is MT of N over five</span> <span m="3022000">plus MT of three quarters N plus, this is just as before.</span> </p>
<p><span m="3029000">Before we had linear work here. And now, we have what we call</span> <span m="3035000">linear number of memory transfers, linear number of</span> <span m="3039000">blocks. OK, I'll sort of ignore this</span> <span m="3041000">plus one. It's not too critical.</span> </p>
<p><span m="3044000">So, this is our recurrence. Now, it depends what our base</span> <span m="3048000">case is. And, usually we would use a</span> <span m="3051000">base case of constant size. So, let's see what happens if</span> <span m="3055000">we use a base case of constant size just so that it's clear why</span> <span m="3060000">this base case is so important. OK, this describes a recurrence</span> <span m="3065000">as one of these hairy recurrences.</span> </p>
<p><span m="3067000">And, I don't want to use substitution.</span> </p>
<p><span m="3069000">I just want the intuition of why this is going to solve to</span> <span m="3072000">something rather big. OK, and for me,</span> <span m="3074000">the best intuition always comes from recursion trees.</span> </p>
<p><span m="3077000">If you don't know the solution to recurrence and you need a</span> <span m="3080000">good guess, use recursion trees. And today, I will only give you</span> <span m="3084000">good guesses. I don't want to prove anything</span> <span m="3086000">with substitution because I want to get to the bigger ideas.</span> </p>
<p><span m="3091000">So, this is even messy from a recursion tree point of view</span> <span m="3094000">because you have these unbalanced sizes where you start</span> <span m="3098000">at the root with some of size N over B.</span> </p>
<p><span m="3100000">Then you split it into something size one fifth N over</span> <span m="3104000">B, and something of size three quarters N over B,</span> <span m="3107000">which is annoying because now this subtree will be a lot</span> <span m="3111000">bigger than this one, or this one will terminate</span> <span m="3114000">faster. So, it's pretty unbalanced.</span> </p>
<p><span m="3116000">But, summing per level doesn't really tell you a lot at this</span> <span m="3120000">point. But let's just look at the</span> <span m="3122000">bottom level. Look at all the leaves in this</span> <span m="3127000">recursion tree. So, that's the base cases.</span> </p>
<p><span m="3130000">How many base cases are there? This is an interesting</span> <span m="3133000">question. We've never thought about it in</span> <span m="3136000">the context of this recurrence. It gives a somewhat surprising</span> <span m="3141000">answer. It was surprising to me the</span> <span m="3143000">first time I worked it out. So, how many leaves does this</span> <span m="3147000">recursion tree have? Well, we can write a</span> <span m="3152000">recurrence. The number of leaves in a</span> <span m="3155000">problem of size N, it's going to be the number of</span> <span m="3161000">leaves in this problem plus the number of leaves in this problem</span> <span m="3167000">plus zero. So, that's another recurrence.</span> </p>
<p><span m="3172000">We'll call this L of N. OK, now the base case is really</span> <span m="3177000">relevant. It determines the solution to</span> <span m="3182000">this recurrence. And let's, again,</span> <span m="3184000">assume that in a problem of size one, we have one leaf.</span> </p>
<p><span m="3188000">That's our only base case. Well, it turns out,</span> <span m="3192000">and here you need to guess, I think.</span> </p>
<p><span m="3194000">This is not particularly obvious.</span> </p>
<p><span m="3197000">Any of the TA's have guesses of the form of this solution?</span> </p>
<p><span m="3201000">Or anybody, not just TA's. But this is open to everyone.</span> </p>
<p><span m="3205000">If Charles were here, I would ask him.</span> </p>
<p><span m="3208000">I had to think for a while, and it's not linear,</span> <span m="3211000">right, because you're somehow decreasing quite a bit.</span> </p>
<p><span m="3217000">So, it's smaller than linear, but it's more than a constant.</span> </p>
<p><span m="3222000">OK, it's actually more than polylog, so what's your favorite</span> <span m="3227000">function in the middle? N over log N,</span> <span m="3230000">that's still too big. Keep going.</span> </p>
<p><span m="3233000">You have an oracle here, so you can, N to the k,</span> <span m="3237000">yeah, close. I mean, k is usually an</span> <span m="3240000">integer. N to the alpha for some real</span> <span m="3244000">number between zero and one. Yeah, that's what you meant.</span> </p>
<p><span m="3249000">Sorry. It's like the shortest</span> <span m="3251000">mathematical joke. Let epsilon be less than zero</span> <span m="3255000">or for a sufficiently large epsilon.</span> </p>
<p><span m="3258000">I don't know. So, you've got to use the right</span> <span m="3261000">letters. So, let's suppose that it's N</span> <span m="3265000">to the alpha. Then we would get this N over</span> <span m="3268000">five to the alpha, and we'd get three quarters N</span> <span m="3272000">to the alpha. When you have a nice recurrence</span> <span m="3276000">like this, you can just try plugging in a guess and see</span> <span m="3280000">whether it works, OK, and of course this will</span> <span m="3282000">work only depending on alpha. So, we should get an equation</span> <span m="3286000">on alpha here. So, everything has an N to the</span> <span m="3289000">alpha, in fact, all of these terms.</span> </p>
<p><span m="3291000">So, I can divide through my N to the alpha.</span> </p>
<p><span m="3293000">That's assuming that it's not zero or something.</span> </p>
<p><span m="3296000">That seems reasonable. So, we have one equals one</span> <span m="3299000">fifth to the alpha plus three quarters to the alpha.</span> </p>
<p><span m="3304000">This is something you won't get on a final because I don't know</span> <span m="3310000">any good way to solve this except with like Maple or</span> <span m="3315000">Mathematica. If you're smart I'm sure you</span> <span m="3319000">could compute it in a nicer way, but alpha is about 0.8,</span> <span m="3324000">it turns out. So, the number of leaves is</span> <span m="3328000">this sort of in between constant and linear.</span> </p>
<p><span m="3334000">Usually polynomial means you have an integer power.</span> </p>
<p><span m="3337000">Let's call it a polynomial. Why not?</span> </p>
<p><span m="3340000">There's a lot of leaves, is the point,</span> <span m="3343000">and if we say that each leaf costs a constant number of</span> <span m="3347000">memory transfers, we're in trouble because then</span> <span m="3350000">the number of memory transfers has to be at least this.</span> </p>
<p><span m="3354000">If it's at least that, that's potentially bigger than</span> <span m="3358000">N over B, I mean, bigger than in an asymptotic</span> <span m="3362000">sense. This is little omega of N over</span> <span m="3366000">B if B is big. If B is at least N to the 0.2</span> <span m="3370000">something, OK, or one seventh something.</span> </p>
<p><span m="3374000">But if, in particular, B is at least N to the 0.2,</span> <span m="3378000">then this should be bigger than that.</span> </p>
<p><span m="3382000">So, this is a bad analysis because we're not going to get</span> <span m="3387000">the answer we want, which is N over B.</span> </p>
<p><span m="3392000">The best you can do for median is N over B because you have to</span> <span m="3395000">read all the element, and you should spend linear</span> <span m="3398000">time. So, we want to get N over B.</span> </p>
<p><span m="3400000">This algorithm is N over B plus one.</span> </p>
<p><span m="3402000">So, this is why you need a good base case, all right?</span> </p>
<p><span m="3405000">So that makes the point. So, the question is,</span> <span m="3408000">what base case should I use?</span> </p>
<p><span m="3424000">So, we have this recurrence</span> <span m="3441000">What base case should I use? Constant was too small.</span> </p>
<p><span m="3445000">We have a couple of choices listed up here.</span> </p>
<p><span m="3466000">Any suggestions? B, OK, MT of B is?</span> </p>
<p><span m="3475000">The hard part. So, if my problem,</span> <span m="3481000">if the size of my array fits in a block and I do all this stuff</span> <span m="3487000">on it, how many memory transfers could that take?</span> </p>
<p><span m="3491000">One, or a constant, depending on alignment.</span> </p>
<p><span m="3495000">OK, maybe it takes two memory transfers, but constant.</span> </p>
<p><span m="3500000">Good. That's clearly a lot better</span> <span m="3503000">than this base case, MT of one equals order one,</span> <span m="3507000">clearly stronger. So, hopefully,</span> <span m="3510000">it gives the right answer, and now indeed it does.</span> </p>
<p><span m="3516000">I love this analysis. So, I'm going to wave my hands.</span> </p>
<p><span m="3519000">OK, but in particular, what this gives us,</span> <span m="3523000">if we do the previous analysis, what is the number of leaves?</span> </p>
<p><span m="3527000">So, in the leaves, now L of B equals one instead</span> <span m="3531000">of L of one equals one. So, this stops earlier.</span> </p>
<p><span m="3534000">When does it stop? Well, instead of getting N to</span> <span m="3539000">the order of 0.8, whatever, we get N over B to</span> <span m="3542000">the power of 0.8 whatever. OK, so it turns out the number</span> <span m="3546000">of leaves is N over B to the alpha, which is little o of N</span> <span m="3550000">over B. So, we don't care.</span> </p>
<p><span m="3552000">It's tiny. And, if you look at the root</span> <span m="3555000">cost is N over B in the recursion tree,</span> <span m="3557000">the leaf cost is little o of N over B, and if you wave your</span> <span m="3562000">hands, and close your eyes, and squint, the cost should be</span> <span m="3566000">geometrically decreasing as we go down, I hope,</span> <span m="3569000">more or less. It's a bit messy because of all</span> <span m="3574000">the things terminating, but let's say cost is roughly</span> <span m="3579000">geometric. Don't do this in the final,</span> <span m="3582000">but you won't have any messy recurrences like this.</span> </p>
<p><span m="3587000">So, don't worry. Down the tree,</span> <span m="3590000">so you'd have to prove this formally, but I claim that the</span> <span m="3595000">root cost dominates. And, the root cost is N over B.</span> </p>
<p><span m="3613000">So, we get N over B. OK, so this is a nice,</span> <span m="3616591">linear time algorithm for order statistics for cache oblivious.</span> </p>
<p><span m="3621892">Great. This may turn you off a little</span> <span m="3624970">bit, but even though this is like the simplest algorithm,</span> <span m="3629758">it's also probably the most complicated analysis that we</span> <span m="3634460">will do. In the future,</span> <span m="3636846">our algorithms will be more complicated, and the analyses</span> <span m="3640234">will be relatively simple. And usually,</span> <span m="3642533">it's that way with cache oblivious algorithms.</span> </p>
<p><span m="3645255">So, I'm giving you this sort of as the intuition of why this</span> <span m="3648824">should be enough. Then you have to prove it.</span> </p>
<p><span m="3651425">OK, let's go to another problem where divide and conquer is</span> <span m="3654933">useful, our good friend, matrix multiplication.</span> </p>
<p><span m="3657716">I don't know how many times we've seen this in this class,</span> <span m="3661164">but in particular we saw it last week with a recursive</span> <span m="3664370">matrix multiply, multithreaded algorithm.</span> </p>
<p><span m="3668000">So, I won't give you the algorithm yet again,</span> <span m="3671708">but we're going to analyze it in a very different way.</span> </p>
<p><span m="3676176">So, we have C and we have A, and actually up to you.</span> </p>
<p><span m="3680475">So, I could cover standard matrix multiplication,</span> <span m="3684521">which is when you do it row by row, and column by column.</span> </p>
<p><span m="3690000">And, we could see why that's bad.</span> </p>
<p><span m="3692331">And then, we could do the recursive one and see why that's</span> <span m="3696485">good. Or, we could skip the standard</span> <span m="3699036">algorithm. So, how many people would like</span> <span m="3701951">to see why the standard algorithm is bad?</span> </p>
<p><span m="3704866">Because it's not totally obvious.</span> </p>
<p><span m="3707198">One, two, three, four, five, half?</span> </p>
<p><span m="3709603">Wow, that's a lot of votes. Now, how many people want to</span> <span m="3713611">skip to the chase? No one.</span> </p>
<p><span m="3715433">One, OK. And, everyone else is asleep.</span> </p>
<p><span m="3718129">So, that's pretty good, 50% awake, not bad.</span> </p>
<p><span m="3721190">OK, then, so standard matrix multiplication.</span> </p>
<p><span m="3726000">I'll do this fast because it is, I mean, you all know the</span> <span m="3730036">algorithm, right? To compute this value of C;</span> <span m="3733207">in A, you take this row, and in B you take this column.</span> </p>
<p><span m="3737099">Sorry I did a little bit sloppily.</span> </p>
<p><span m="3739477">But this is supposed to be aligned.</span> </p>
<p><span m="3741927">Right? So I take all of this stuff,</span> <span m="3744378">I multiply it with all of the stuff, add them up,</span> <span m="3747837">the dot product. That gives me this element.</span> </p>
<p><span m="3751949">And, let's say I do them in this order row by row.</span> </p>
<p><span m="3755487">So for every item in C, I loop over this row and this</span> <span m="3759241">column, B, multiply them together.</span> </p>
<p><span m="3761624">That is an access pattern in memory.</span> </p>
<p><span m="3764151">So, exactly how much that costs depends how these matrices are</span> <span m="3768555">laid out in memory. OK, this is a subtlety we</span> <span m="3771732">haven't had to worry about before because everything was</span> <span m="3775703">uniform. I'm going to assume to give the</span> <span m="3778519">standard algorithm the best chances of being good,</span> <span m="3782057">I'm going to store C in row major order, A in row major</span> <span m="3785956">order, and B in column major order.</span> </p>
<p><span m="3790000">So, everything is nice and you're scanning.</span> </p>
<p><span m="3794983">So then this inner product is a scan.</span> </p>
<p><span m="3799254">Cool. Sounds great,</span> <span m="3801389">doesn't it? It's bad, though.</span> </p>
<p><span m="3804711">Assume A is row major, and B is column major.</span> </p>
<p><span m="3811000">And C, you could assume is really either way,</span> <span m="3813911">but if I'm doing it row by row, I'll assume it's row major.</span> </p>
<p><span m="3817750">So, this is what I call the layout, the memory layout,</span> <span m="3821257">of these matrices. OK, it's good for this</span> <span m="3823904">algorithm, but the algorithm is not good.</span> </p>
<p><span m="3826551">So, it won't be that great.</span> </p>
<p><span m="3852000">So, how long does this take? How many memory transfers?</span> </p>
<p><span m="3856227">We know it takes M^3 time. Not going to try and beat M^3</span> <span m="3860533">here. Just going to try and get</span> <span m="3862882">standard matrix multiplication going faster.</span> </p>
<p><span m="3866249">So, well, for each item over here I pay N over B to do the</span> <span m="3870711">scans and get the inner product. So, N over B per item.</span> </p>
<p><span m="3876801">So, it's N over B, or we could go with the plus</span> <span m="3882659">one here, to compute each c_ij. So that would suggest,</span> <span m="3889408">as an upper bound at least, it's N^3 over B.</span> </p>
<p><span m="3894883">OK, and indeed that is the right bound, so theta.</span> </p>
<p><span m="3900996">This is memory transfers, not time, obviously.</span> </p>
<p><span m="3908000">That is indeed the case because if you look at consecutive,</span> <span m="3912349">I do this c_ij, then this one,</span> <span m="3914525">this one, this one, this one, keep incrementing j</span> <span m="3918125">and keeping I fixed, right?</span> </p>
<p><span m="3920074">So, the row that I use stays fixed for a long time.</span> </p>
<p><span m="3923824">I get to reuse that if it happens, say that that fits a</span> <span m="3927875">block maybe, I get to reuse that row several times if that</span> <span m="3932150">happens to fit in cache. But the column is changing</span> <span m="3936631">every single time. OK, so every time I moved here</span> <span m="3939642">and compute the next c_ij, even if a column could fit in</span> <span m="3943093">cache, I can't fit all the columns in cache.</span> </p>
<p><span m="3945790">And the columns that I'm visiting move,</span> <span m="3948174">you know, they just scan across.</span> </p>
<p><span m="3950119">So, I'm scanning this whole matrix every time.</span> </p>
<p><span m="3952942">And unless you're entire matrix fits in cache,</span> <span m="3955766">in which case you could do anything, I don't care,</span> <span m="3958840">it will take constant time, or you'll take M over B time,</span> <span m="3962353">enough to read it into the cache, do your stuff,</span> <span m="3965302">and write it back out. Except in that boring case,</span> <span m="3969989">you're going to have to pay N^2 over B for every row here</span> <span m="3974115">because you have to scan the whole collection of columns.</span> </p>
<p><span m="3978242">You have to read this entire matrix for every row over here.</span> </p>
<p><span m="3982589">So, you really do need N^3 over B for the whole thing.</span> </p>
<p><span m="3986494">So, it's usually a theta. So, you might say,</span> <span m="3990043">well, that's great. It's the size of my problem,</span> <span m="3992766">the usual running time, divided by B.</span> </p>
<p><span m="3994852">And that was the case when we are thinking about linear time,</span> <span m="3998329">N versus N over B. It's hard to beat N over B when</span> <span m="4001168">your problem is of size N. But now we have a cubed.</span> </p>
<p><span m="4004066">And, this gets back to, we have good spatial locality.</span> </p>
<p><span m="4007137">When we read a block, we use the whole thing.</span> </p>
<p><span m="4009687">Great. It seems optimal.</span> </p>
<p><span m="4011019">But we don't have good temporal locality.</span> </p>
<p><span m="4013337">It could be that maybe if we stored the right things,</span> <span m="4016350">we kept them around, we could them several times</span> <span m="4019074">because we're using each element like a cubed number of times.</span> </p>
<p><span m="4024000">That's not the right way of saying it, but we're reusing the</span> <span m="4028990">matrices a lot, reusing those items.</span> </p>
<p><span m="4031951">If we are doing N^3 work on N^2 things, we're reusing a lot.</span> </p>
<p><span m="4036942">So, we want to do better than this, and that's the recursive</span> <span m="4041933">algorithm, which we've seen. So, we know the algorithm</span> <span m="4046416">pretty much. I just have to tell you what</span> <span m="4049800">the layout is. So, we're going to take C,</span> <span m="4056588">partition of C_1-1, C_1-2, and so on.</span> </p>
<p><span m="4062941">So, I have an N by N matrix, and I'm partitioning into N</span> <span m="4072647">over 2 by N over 2 submatrices, all three of them times</span> <span m="4082176">whatever. And, I could write this out yet</span> <span m="4087377">again but I won't. OK, we can recursively compute</span> <span m="4091058">this thing with eight matrix multiplies, and a bunch of</span> <span m="4095200">matrix additions. I don't care how many,</span> <span m="4098191">but a constant number. We see that at least twice now,</span> <span m="4102256">so I won't show it again. Now, how do I lay out the</span> <span m="4106091">matrices? Any suggestions how I lay out</span> <span m="4109005">the matrices? I could lay them out in row</span> <span m="4112979">major order. I'll call it major order.</span> </p>
<p><span m="4115693">But that might be less natural now.</span> </p>
<p><span m="4118185">We're not doing anything by rows or by columns.</span> </p>
<p><span m="4139000">So, what layout should I use? Yeah?</span> </p>
<p><span m="4143014">Quartet major order, maybe quadrant major order</span> <span m="4148446">unless you're musically inclined, yeah.</span> </p>
<p><span m="4152933">Good idea. You've never seen this order</span> <span m="4157420">before, so it's maybe not so natural.</span> </p>
<p><span m="4161671">Somehow I want to cluster it by blocks.</span> </p>
<p><span m="4166158">OK, I think that's about all. So, I mean, it's a recursive</span> <span m="4173402">layout. This was not an easy question.</span> </p>
<p><span m="4176576">It's OK. Store matrices or lay out the</span> <span m="4179751">matrices recursively by block. OK, I'm cheating a little bit.</span> </p>
<p><span m="4184899">I'm redefining the problem to say, assume that your matrices</span> <span m="4189961">are laid out in this way. But, it doesn't really matter.</span> </p>
<p><span m="4194680">We can cheat, can't we?</span> </p>
<p><span m="4196568">In fact, it doesn't matter. You can turn a matrix into this</span> <span m="4202276">layout without too much linear work, almost linear work.</span> </p>
<p><span m="4206315">Log factors, maybe.</span> </p>
<p><span m="4207637">OK, so if I want to store my matrix A as a linear thing,</span> <span m="4211676">I'm going to recursively defined that layout to be</span> <span m="4215274">recursively store the upper left corner, then store,</span> <span m="4219019">let's say, the upper right corner.</span> </p>
<p><span m="4221442">It doesn't matter which order I do these.</span> </p>
<p><span m="4224380">I should have drawn this wider, then store the lower left</span> <span m="4228492">corner, and then store the lower right corner recursively.</span> </p>
<p><span m="4234000">So, how do you store this? Well, you divide it in four,</span> <span m="4238025">and lay out the top left, and so on.</span> </p>
<p><span m="4240634">OK, this is a recursive definition of how the element</span> <span m="4244511">should be stored in a linear array.</span> </p>
<p><span m="4247046">It's a weird one, but this is a very powerful</span> <span m="4250326">idea in cache oblivious algorithms.</span> </p>
<p><span m="4252861">We'll use this multiple times. OK, so now all we have to do is</span> <span m="4257408">analyze the number of memory transfers.</span> </p>
<p><span m="4260241">How hard could it be? So, we're going to store all</span> <span m="4265066">the matrices in this order, and we want to compute the</span> <span m="4268978">number of memory transfers on an N by N matrix.</span> </p>
<p><span m="4272373">See, I lapsed and I switched to lowercase n.</span> </p>
<p><span m="4275547">I should, throughout this week, be using uppercase N because</span> <span m="4279902">for historical reasons, any external memory kinds of</span> <span m="4283666">algorithms, to level algorithms, always talk about capital N.</span> </p>
<p><span m="4288095">And, don't ask why. You should see what they define</span> <span m="4291785">little n to be. OK, so, any suggestions on what</span> <span m="4297995">the recurrence should be now? All his fancy setup with the</span> <span m="4305342">recurrence is actually pretty easy.</span> </p>
<p><span m="4309724">So, definitely it involves multiplying matrices that are N</span> <span m="4317071">over 2 by N over 2. So, what goes here?</span> </p>
<p><span m="4323000">Eight, thank you. That you should know.</span> </p>
<p><span m="4325752">And that the tricky part is what goes here.</span> </p>
<p><span m="4328793">OK, what goes here is, now, the fact that I can even</span> <span m="4332487">write this, this is the matrix additions.</span> </p>
<p><span m="4335384">Ignore those for now. Suppose there weren't any.</span> </p>
<p><span m="4338788">I just have to recursively multiply.</span> </p>
<p><span m="4341323">The fact that this actually is eight times memory transfers of</span> <span m="4345740">N over 2 relies on this layout. Right, I'm assuming that the</span> <span m="4350670">arrays that I'm given are given as contiguous intervals and</span> <span m="4354129">memory. If they aren't,</span> <span m="4355442">I mean, if they're scattered all over memory,</span> <span m="4358066">I'm screwed. There's nothing I can do.</span> </p>
<p><span m="4360273">So, but by assuming that I have this recursive layout,</span> <span m="4363434">I know that the recursive multiplies will always deal with</span> <span m="4366835">three consecutive chunks of memory, one for A,</span> <span m="4369519">one for B, one for C, OK, no matter what I do.</span> </p>
<p><span m="4372202">Because these are stored consecutively,</span> <span m="4374470">recursively I have that invariant.</span> </p>
<p><span m="4376438">And I can keep recursing. And I'm always dealing with</span> <span m="4379540">three consecutive chunks of memory.</span> </p>
<p><span m="4383000">That's why I need this layout is to be able to say this.</span> </p>
<p><span m="4388327">OK, Now what does addition cost?</span> </p>
<p><span m="4391332">I'll just give you two matrices.</span> </p>
<p><span m="4394335">They're stored in some linear order, the same linear order</span> <span m="4399858">among the three of them. Do I care what the linear order</span> <span m="4405186">is? How should I add two matrices,</span> <span m="4408384">get the output?</span> </p>
<p><span m="4422000">Yeah?</span> </p>
<p><span m="4431000">Right, if each of the three arrays I'm dealing with are</span> <span m="4434850">stored in the same order, I can just scan in parallel</span> <span m="4438559">through all three of them and just add corresponding elements,</span> <span m="4442909">and output it to the third. So, I don't care what the order</span> <span m="4447045">is, as long as it's consistent and I get N^2 over B.</span> </p>
<p><span m="4450682">I'll ignore plus one here. That's just looking at the</span> <span m="4454390">entire matrix. So, there we go:</span> <span m="4456529">another recurrence. We've seen this with N^2,</span> <span m="4459667">and we just got N^3. But, it turns out now we get</span> <span m="4463090">something cooler if we use the right base case.</span> </p>
<p><span m="4466371">So now we get to the base case, ah, the tricky part.</span> </p>
<p><span m="4470008">So, any suggestions what base case I should use?</span> </p>
<p><span m="4475000">The block size, good suggestion.</span> </p>
<p><span m="4476672">So, if we have something of size order B,</span> <span m="4478829">we know that takes a constant number of memory transfers.</span> </p>
<p><span m="4481850">It turns out that's not enough. That won't solve it here.</span> </p>
<p><span m="4484871">But good guess. In this case,</span> <span m="4486381">it's not the right answer. I'll give you some intuition</span> <span m="4489294">why. We are trying to improve on N^3</span> <span m="4491182">over B. If you were just trying to get</span> <span m="4493178">it divided by B, this is a great base case.</span> </p>
<p><span m="4495443">But here, we know that just the improvement afforded by the</span> <span m="4498572">block size is not enough. We have to somehow use the fact</span> <span m="4503244">that the cache is big. It's M, so however big M is,</span> <span m="4506864">it's that big. OK, so if we want to get some</span> <span m="4509977">improvement on this, we've got to have M in the</span> <span m="4513307">formula somewhere, and there's no M's yet.</span> </p>
<p><span m="4516276">So, it's got to involve M. What's that?</span> </p>
<p><span m="4519027">MT of M over B? That would work,</span> <span m="4521271">but MT of M is also OK, I mean, some constant times M,</span> <span m="4525108">let's say. I want to make this constant</span> <span m="4527859">small enough so that the entire problem fits in cache.</span> </p>
<p><span m="4533000">So, it's like one third. I think it's actually,</span> <span m="4537006">oh wait, is it the square root of M actually?</span> </p>
<p><span m="4540837">Right, this is an N by N matrix.</span> </p>
<p><span m="4543537">So, it should be C times the square root of M.</span> </p>
<p><span m="4547456">Sorry. So, the square root of M by</span> <span m="4550330">square root of M matrix has M entries.</span> </p>
<p><span m="4553552">If I make C like one third or something, then I can fit all</span> <span m="4558603">three matrices in memory. Actually, one over square root</span> <span m="4564372">of three would do, but who cares?</span> </p>
<p><span m="4566903">So, for some constant, C, now everything fits in</span> <span m="4570621">memory. How many memory transfers does</span> <span m="4573548">it take? One?</span> </p>
<p><span m="4574497">It's a bit too small, because I do have to read the</span> <span m="4578451">problem in. And now, I mean,</span> <span m="4580587">here was one because there's only one block to read.</span> </p>
<p><span m="4584621">Now how many blocks are there to read?</span> </p>
<p><span m="4587548">Constants? No.</span> </p>
<p><span m="4590000">B? No.</span> </p>
<p><span m="4590369">M over B, good. Get it right eventually.</span> </p>
<p><span m="4593255">That's the great thing about thinking with an oracle.</span> </p>
<p><span m="4597102">You can just keep guessing. M over B because we have cache</span> <span m="4601318">size M. There are M over B blocks in</span> <span m="4603908">that cache to read each one, OK?</span> </p>
<p><span m="4606201">This is maybe, you forgot what M was because</span> <span m="4609382">we haven't used it for a long time.</span> </p>
<p><span m="4611897">But M is the number of elements in cache.</span> </p>
<p><span m="4614857">This is the number of blocks in cache.</span> </p>
<p><span m="4619000">OK, some of was saying B, and it's reasonable to assume</span> <span m="4622537">that M over B is about B. That's like a square cache,</span> <span m="4625943">but in general, we don't make that assumption.</span> </p>
<p><span m="4628892">OK, where are we? We're hopefully done,</span> <span m="4631381">just about, good, because we have three minutes.</span> </p>
<p><span m="4634460">So, that's our base case. I have a square root here;</span> <span m="4637800">I just forgot it. Now we just have to solve it.</span> </p>
<p><span m="4640815">Now, this is an easier recurrence, right?</span> </p>
<p><span m="4643434">I don't want to use the master method, because master method is</span> <span m="4647497">not going to handle these B's and M's, and these crazy base</span> <span m="4651296">cases. OK, master method would prove</span> <span m="4655271">N^3. Great.</span> </p>
<p><span m="4656054">Master method doesn't really think about these kinds of</span> <span m="4660282">cases. But with regression trees,</span> <span m="4662789">if you remember way back to the proof of the master method,</span> <span m="4667331">just look at the recursion tree as geometric up or down where</span> <span m="4672030">everything is equal, and then you just add them up,</span> <span m="4675945">every level. The point is that this is a</span> <span m="4679000">nice recurrence. All of the sub problems are the</span> <span m="4682680">same size, and that analysis always works,</span> <span m="4685891">I say, when everything has the same size, all the children.</span> </p>
<p><span m="4692000">So, here's the recursion tree. We have N^2 over B at the top.</span> </p>
<p><span m="4698857">We split into eight subproblems where each one,</span> <span m="4704114">the cost is one half N^2 over B.</span> </p>
<p><span m="4707657">I'm not going to write them all.</span> </p>
<p><span m="4712000">There they are. You add them up.</span> </p>
<p><span m="4714716">How much do you get? Well, there's eight of them.</span> </p>
<p><span m="4718921">Eight times a half is two. Four.</span> </p>
<p><span m="4721637">[LAUGHTER] Thanks. Four, right?</span> </p>
<p><span m="4724265">OK, I'm bad at arithmetic. I probably already said it,</span> <span m="4728909">but there are three kinds of mathematicians,</span> <span m="4732675">those who can add, and those who can't.</span> </p>
<p><span m="4736006">OK, why am I looking at this? It's obvious.</span> </p>
<p><span m="4741000">OK, so we keep going. This looks geometrically</span> <span m="4743800">increasing. Right?</span> </p>
<p><span m="4744858">You just know in your heart that if you work out the first</span> <span m="4748405">two levels, you can tell whether it's geometrically increasing,</span> <span m="4752263">decreasing, or they're all equal, or something else.</span> </p>
<p><span m="4755437">And then you better think. But I see this as geometrically</span> <span m="4758984">increasing. It will indeed be like 16 at</span> <span m="4761412">the next level, I guess.</span> </p>
<p><span m="4762843">OK, it should be. So, it's increasing.</span> </p>
<p><span m="4765145">That means the leaves matter. So, let's work out the leaves.</span> </p>
<p><span m="4770000">And, this is where we use our base case.</span> </p>
<p><span m="4773960">So, we have a problem of size square root of M.</span> </p>
<p><span m="4778630">And so, yeah, you have a question?</span> </p>
<p><span m="4781981">Oh, indeed. I knew there was something.</span> </p>
<p><span m="4785840">I knew it was supposed to be two out here.</span> </p>
<p><span m="4790003">Thanks. This is why you're here.</span> </p>
<p><span m="4793150">It's actually N over two squared over B.</span> </p>
<p><span m="4797110">Thanks. I'm substituting N over 2 into</span> <span m="4800867">this. OK, so this is actually N^2</span> <span m="4804900">over 4 B. So, I get two,</span> <span m="4806519">because there are eight times one over four.</span> </p>
<p><span m="4809546">OK, I wasn't that far off then. It's still geometrically</span> <span m="4813416">increasing, still the case, OK?</span> </p>
<p><span m="4815529">But now, it actually doesn't matter.</span> </p>
<p><span m="4817992">Whatever the cost is, as long as it's bigger than</span> <span m="4821371">one, great. Now we look at the leaves.</span> </p>
<p><span m="4823975">The leaves are root M by root M.</span> </p>
<p><span m="4826157">I substitute root M into this: I get M over B with some</span> <span m="4829958">constants. Who cares?</span> </p>
<p><span m="4832903">So, each leaf is M over B, OK, lots of them.</span> </p>
<p><span m="4836787">How many are there? This is the only,</span> <span m="4840038">deal with recursion trees, counting the number of leaves</span> <span m="4845006">is always the annoying part. Oh boy, well,</span> <span m="4848709">we start with an N by N matrix. We stop when we get down to</span> <span m="4853948">root N by root N matrix. So, that sounds like something.</span> </p>
<p><span m="4860000">Oh boy, I'm cheating here. Really?</span> </p>
<p><span m="4864141">That many? It sounds plausible.</span> </p>
<p><span m="4867905">OK, the claim is, and I'll cheat.</span> </p>
<p><span m="4871921">So I'm going to use the oracle here, and we'll figure out why</span> <span m="4879450">this is the case. N over root N^3 leaves,</span> <span m="4884470">hey what? I think here,</span> <span m="4887231">it's hard to see the tree. But it's easy to see in the</span> <span m="4893979">matrix. Let's enter the matrix.</span> </p>
<p><span m="4896178">We have our big matrix. We divided in half.</span> </p>
<p><span m="4899256">We recursively divide in half. We recursively divide in half.</span> </p>
<p><span m="4903654">You get the idea, OK?</span> </p>
<p><span m="4905120">Now, at some point these sectors, let's say one of these</span> <span m="4909151">sectors, and each of these sectors, fits in cache.</span> </p>
<p><span m="4912743">And three of them fit in cache. So, that's when we stop the</span> <span m="4916994">recursion in the analysis. The algorithm goes all the way.</span> </p>
<p><span m="4922320">But in the analysis, let's say we stop at M.</span> </p>
<p><span m="4925538">OK, now, how many leaves or problems are there?</span> </p>
<p><span m="4928981">Oh man, this is still not obvious.</span> </p>
<p><span m="4931451">OK, the number of leaf chunks here is, like,</span> <span m="4934669">I mean, the number of these things is something like N over</span> <span m="4939010">root M, right, the number of chunks.</span> </p>
<p><span m="4941629">But, it's a little less clear because I have so many of these.</span> </p>
<p><span m="4946195">But, all right, so let's just suppose,</span> <span m="4948964">now, I think of normal, boring, matrix multiplication</span> <span m="4952856">on chunks of this size. That's essentially what the</span> <span m="4958119">leaves should tell me. I start with this big problem,</span> <span m="4962200">I recurse out to all these little, tiny,</span> <span m="4965261">multiply this by that, OK, this root M by root M</span> <span m="4968950">chunk. OK, how many operations,</span> <span m="4971305">how many multiplies do I do on those things?</span> </p>
<p><span m="4974680">N^3. But now, N, the size of my</span> <span m="4977034">matrix in terms of these little sub matrices,</span> <span m="4980488">is N over root M. So, it should be N over root</span> <span m="4985859">M^3 subproblems of this size. If you work it out,</span> <span m="4990760">normally we go down to things of constant size and we get</span> <span m="4996478">exactly N^3 of them. Now we are stopping at this</span> <span m="5001278">short point in saying, well, it's however many there</span> <span m="5006485">are, cubed. OK, this is a bit of hand</span> <span m="5010161">waving. You could work it out with the</span> <span m="5015352">recurrence on the number of leaves.</span> </p>
<p><span m="5019151">But there it is. So, the total here is N over,</span> <span m="5024180">let's work it out. N^3 over M to the three halves,</span> <span m="5029656">that's this number of leaves, times the cost at each leaf,</span> <span m="5036025">which is M over B. So, some of the N's cancel,</span> <span m="5041054">and we get N^3 over B root M, which is a root M factor better</span> <span m="5047759">than N^3 over B. It's actually quite a lot,</span> <span m="5053433">the square root of the cache size.</span> </p>
<p><span m="5056522">That is optimal. The best two level matrix</span> <span m="5060359">multiplication algorithm is N^3 over B root M memory transfers.</span> </p>
<p><span m="5066162">Pretty amazing, and I'm over time.</span> </p>
<p><span m="5070000">You can generalize this into all sorts of great things,</span> <span m="5074979">but the bottom line is this is a great way to do matrix</span> <span m="5079959">multiplication as a recursion. We'll see more recursion for</span> <span m="5085308">cache oblivious algorithms on Wednesday.</span> </p>
</div>
        <div id="vid_transcript" itemprop="description" class="tabContent hide">
<h2 class="subhead">Free Downloads</h2>
<h3 class="subsubhead">Video</h3>
<ul>
<li>iTunes U (<a href="https://itunes.apple.com/us/itunes-u/id341597754">MP4 - 178MB</a>)</li>
<li>Internet Archive (<a href="http://www.archive.org/download/MIT6.046JF05MPEG4/ocw-6.046-12dec2005-220k.mp4">MP4 - 349MB</a>)</li>
</ul>
<br><h3 class="subsubhead">Free Streaming</h3>
<ul><li><a href="http://videolectures.net/mit6046jf05_introduction_algorithms/">VideoLectures.net</a></li></ul>
<br><h3 class="subsubhead">Subtitle</h3>
<ul><li>English - US (<a href="../../../contents/video-lectures/lecture-24-advanced-topics-cont./cJOHERGcGm4.srt">SRT</a>)</li></ul>
</div>
    
   </div>  




      					 
        <div class="" id="parent-fieldname-bottom_html_area">
            
            
        </div>
    
                    </div>
<!--Course_inner_chip tag close -->
           		</div>
<!--Course_wrapper tag close --> 
            </div>
<!--left tag close -->
            <div id="right">
                <!--Begin Right Portion -->
                    <div>
    
<div id="portletwrapper-6f63772e7269676874746f70706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a646f6e617465" class="portletWrapper kssattr-portlethash-6f63772e7269676874746f70706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a646f6e617465">
<div class="portletStaticText portlet-static-donate"><p class="zero"><a href="http://ocw.mit.edu/donate"><img src="../../../common/images/button_donate-now.png" alt="Donate Now." class="donate"></a></p></div>

</div>




</div>

                	<div>
    



</div>


        <div class="" id="parent-fieldname-rsi_top_html_area">
            
            
        </div>
    

<!-- RSI google ad space-->


<div id="google_ads">    
    <script type="text/javascript" src="http://partner.googleadservices.com/gampad/google_service.js"></script><script type="text/javascript">GS_googleAddAdSenseService("ca-pub-6588555046597237");GS_googleEnableAllServices();</script><script type="text/javascript">GA_googleAddSlot("ca-pub-6588555046597237", "VIDEO_INDIVIDUAL_SLOT_A_DL");GA_googleAddSlot("ca-pub-6588555046597237", "VIDEO_INDIVIDUAL_SLOT_B_DL");GA_googleAddSlot("ca-pub-6588555046597237", "VIDEO_INDIVIDUAL_SLOT_C_DL");</script><script type="text/javascript">GA_googleFetchAds();</script><script language="javascript" type="text/javascript">
GA_googleAddAttr("TYPE","HOUSE");
GA_googleAddAttr("DEPARTMENT","6");
GA_googleAddAttr("CRS_BEG2","04");
GA_googleAddAttr("CRS_END","6J");
GA_googleAddAttr("SESSION","F");
GA_googleAddAttr("YEAR","05");
</script><script type="text/javascript">GA_googleFillSlot("VIDEO_INDIVIDUAL_SLOT_A_DL");</script><script type="text/javascript">GA_googleFillSlot("VIDEO_INDIVIDUAL_SLOT_B_DL");</script><script type="text/javascript">GA_googleFillSlot("VIDEO_INDIVIDUAL_SLOT_C_DL");</script>
</div>

<!-- End RSI ads--> 

<div>
    



</div>

            </div>
<!--Right div close -->
            <div class="clear"></div> 
        </div>
<!--grid tag close --> 
      </div>
		
		<div id="bottom">
			<div id="grid">
				
<div id="portletwrapper-6f63772e626f74746f6d706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d666f6f746572" class="portletWrapper kssattr-portlethash-6f63772e626f74746f6d706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d666f6f746572">
<div class="portletStaticText portlet-static-site-footer">
<!--googleoff: index--> <div id="bottom"><div id="grid">
<!-- *begin footer* --> <div role="navigation sitemap" id="footer">
<div class="grid_2 alpha" id="foot-c1">
<h4 class="footer">Find Courses</h4> <ul class="foot-bullet">
<li><a href="http://ocw.mit.edu/courses/find-by-topic/">Find by Topic</a></li>     <li><a href="http://ocw.mit.edu/courses/find-by-number/">Find by Course Number</a></li>     <li><a href="http://ocw.mit.edu/courses/find-by-department/">Find by Department</a></li>     <li><a href="http://ocw.mit.edu/courses/audio-video-courses/">Audio/Video Courses</a></li>     <li><a href="http://ocw.mit.edu/courses/subtitled/">Courses with Subtitles</a></li>     <li><a href="http://ocw.mit.edu/courses/online-textbooks/">Online Textbooks</a></li>     <li><a href="http://ocw.mit.edu/courses/new-courses/">New Courses</a></li>     <li><a href="http://ocw.mit.edu/courses/most-visited-courses/">Most Visited Courses</a></li>     <li><a href="http://ocw.mit.edu/courses/ocw-scholar/">OCW Scholar Courses</a></li>     <li><a href="http://ocw.mit.edu/courses/this-course-at-mit/">This Course at MIT</a></li>     <li><a href="http://ocw.mit.edu/resources/">Supplemental Resources</a></li>     <li><a href="http://ocw.mit.edu/courses/translated-courses/">Translated Courses</a></li>     <li><a href="http://ocw.mit.edu/courses/">View All Courses</a></li> </ul>
</div> <div class="grid_2" id="foot-c2">
<h4 class="footer">About</h4> <ul class="foot-bullet">
<li><a href="http://ocw.mit.edu/about/">About OpenCourseWare</a></li>     <li><a href="http://ocw.mit.edu/about/site-statistics/">Site Stats</a></li>     <li><a href="http://ocw.mit.edu/about/ocw-stories/">OCW Stories</a></li>     <li><a href="http://ocw.mit.edu/about/media-coverage/">Media Coverage</a></li>     <li><a href="http://ocw.mit.edu/about/newsletter/">Newsletter</a></li>     <li><a href="http://ocw.mit.edu/about/media-coverage/press-releases/">Press Releases</a></li> </ul>
</div> <div class="grid_2" id="foot-c3">
<h4 class="footer">Donate</h4> <ul class="foot-bullet">
<li><a href="http://ocw.mit.edu/donate">Make a Donation</a></li>     <li><a href="http://ocw.mit.edu/donate/why-donate/">Why Donate?</a></li>     <li><a href="http://ocw.mit.edu/donate/our-supporters/">Our Supporters</a></li>     <li><a href="http://ocw.mit.edu/donate/other-ways-to-contribute/">Other Ways to Contribute</a></li>     <li><a href="http://ocw.mit.edu/donate/shop-ocw/">Shop OCW</a></li>     <li><a href="http://ocw.mit.edu/support/">Become a Corporate Sponsor</a></li> </ul>
</div> <div class="grid_2" id="foot-c4">
<h4 class="footer">Featured Sites</h4> <ul class="foot-bullet">
<li><a href="http://ocw.mit.edu/high-school/">Highlights for High School</a></li>     <li><a href="http://ocw.mit.edu/educator/">OCW Educator</a></li>     <li><a href="http://ocw.mit.edu/courses/crosslinks/">MIT Crosslinks and OCW</a></li>     <li><a href="http://ocw.mit.edu/ans7870/featured/mitx-courses-on-edx.htm">MITx Courses on edX</a></li>     <li><a href="http://teachingexcellence.mit.edu/">Teaching Excellence at MIT</a></li>     <li><a href="http://www.oeconsortium.org/">Open Education Consortium</a></li> </ul>
<h4 style="margin-top: 14px;" class="footer">Tools</h4> <ul class="foot-bullet">
<li><a href="http://ocw.mit.edu/help/">Help &amp; FAQs</a></li>     <li><a href="../../../common/jsp/feedback.htm">Contact Us</a></li>     <li><a href="../../../common/search/AdvancedSearch.htm">Advanced Search</a></li>     <li><a href="http://ocw.mit.edu/help/site-map/">Site Map</a></li>     <li><a href="../../../common/terms/index.htm">Privacy &amp; Terms of Use</a></li>     <li><a href="http://ocw.mit.edu/help/rss/">RSS Feeds</a></li> </ul>
</div> <div class="grid_4 omega" id="foot-c5">
<h4 class="footer">Our Corporate Supporters</h4> <!-- HOME_CORP_LOGO_1 --> <div class="sponsors_google_ads_even" id="div-gpt-ad-1388181177156-0"><script type="text/javascript">
googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-0'); });
</script></div> <!-- HOME_CORP_LOGO_2 --> <div class="sponsors_google_ads_odd" id="div-gpt-ad-1388181177156-1"><script type="text/javascript">
googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-1'); });
</script></div> <!-- HOME_CORP_LOGO_3 --> <div class="sponsors_google_ads_even" id="div-gpt-ad-1388181177156-2"><script type="text/javascript">
googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-2'); });
</script></div> <!-- HOME_CORP_LOGO_4 --> <div class="sponsors_google_ads_odd" id="div-gpt-ad-1388181177156-3"><script type="text/javascript">
googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-3'); });
</script></div> <!-- HOME_CORP_LOGO_5 --> <div class="sponsors_google_ads_even" id="div-gpt-ad-1388181177156-4"><script type="text/javascript">
googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-4'); });
</script></div> <!-- HOME_CORP_LOGO_6 --> <div class="sponsors_google_ads_odd" id="div-gpt-ad-1388181177156-5"><script type="text/javascript">
googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-5'); });
</script></div>
</div> <div class="grid_12 alpha omega" style="border-top: thin solid #d5c9ba; padding-top: 24px; margin-bottom: 10px; text-align: center;"><p style="font-family: TitilliumText22LRegular,Verdana; text-align: center; font-size: 1.1em;">Support for <span style="letter-spacing: 0.5px;"><strong>MIT OPENCOURSEWARE'S 15th anniversary</strong></span> is provided by <a href="http://www.sapientnitro.com/en-us.html#home"><img style="width: 145px; height: 35px; vertical-align: middle; margin-left: 7px;" alt="SapientNitro logo and nameplate." src="../../../common/images/logo_sapient.png"></a></p></div> <div itemtype="http://schema.org/CollegeOrUniversity" itemscope="" itemprop="publisher" class="grid_12 alpha omega">
<h4 style="border-top: thin solid #d5c9ba; padding-top: 10px; margin-bottom: 10px;" class="footer">About <span itemprop="name">MIT OpenCourseWare</span>
</h4> <p itemprop="description" style="color: #999; font-size: 1em; line-height: 1.5em; margin-top: 10px;">MIT OpenCourseWare makes the materials used in the teaching of almost all of MIT's subjects available on the Web, free of charge. With more than 2,200 courses available, OCW is delivering on the promise of open sharing of knowledge. <a href="http://ocw.mit.edu/about/">Learn more »</a></p>
</div> <div style="border-top: none;" class="grid_12 alpha omega" id="foot-copy">
<a href="http://web.mit.edu"><img style="width: 195; height: 44;" alt="Massachusetts Institute of Technology logo and name." src="../../../common/images/logo_mit.png"></a><a href="http://odl.mit.edu"><img style="width: 289; height: 54; vertical-align: top;" alt="MIT Office of Digital Learning logo and name." src="http://ocw.mit.edu/images/logo_odl.png"></a><a href="http://www.oeconsortium.org/"><img style="width: 219px; height: 59px; vertical-align: top;" alt="Open Education Consortium logo." src="http://ocw.mit.edu/images/logo_oec.png"></a><a itemprop="useRightsUrl" rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/"><img style="width: 126px; height: 44px; margin-right: 0; margin-left: 13px;" alt="Creative Commons logo with terms BY-NC-SA." src="../../../common/images/cc_by-nc-sa.png"></a> <p class="copyright">© 2001–2015<br> Massachusetts Institute of Technology</p> <p style="font-size: 0.9em; margin-bottom: 15px;">Your use of the MIT OpenCourseWare site and materials is subject to our <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/">Creative Commons License</a> and other <a rel="cc:morePermissions" href="../../../common/terms/index.htm">terms of use</a>.</p>
</div>
</div>
</div></div> <!--googleon: index-->
</div>

</div>





                
			</div> <!-- bottom grid end -->
		</div>
<!-- bottom end -->
		
		
   </body>
</html>
