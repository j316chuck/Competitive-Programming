<!DOCTYPE html><html lang="en">
<head>
<meta charset="utf-8">
<meta name="format-detection" content="telephone=no">
<title>Lecture 15: Dynamic Programming, Longest Common Subsequence | Video Lectures | Introduction to Algorithms (SMA 5503) | Electrical Engineering and Computer Science | MIT OpenCourseWare</title>
<!-- Begin Automatic Metadata Insertion --><meta content="6-046j-introduction-to-algorithms-sma-5503-fall-2005" name="WT.cg_n">
<meta content="Lecture 15: Dynamic Programming, Longest Common Subsequence" name="WT.cg_s">
<meta content="" name="Description">
<meta content="Leiserson, Charles" name="Author">
<meta content="Demaine, Erik" name="Author">
<meta content="algorithms,efficient algorithms,sorting,search trees,heaps,hashing,divide-and-conquer,dynamic programming,amortized analysis,graph algorithms,shortest paths,network flow,computational geometry,number-theoretic algorithms,polynomial and matrix calculations,caching,parallel computing,Algorithms and Data Structures" name="keywords">
<meta content="6.046J Introduction to Algorithms (SMA 5503) | Lecture 15: Dynamic Programming, Longest Common Subsequence" name="Search_Display">
<meta content="Algorithms and Data Structures" itemprop="about">
<!-- End Automatic Metadata Insertion --><link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/grid.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/base.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/menu.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/jquery.bubblepopup.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/courses.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/courses_new.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/jquery.jscrollpane.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/media_tabs.css">
<link href="http://ocw.mit.edu/xml/ocwcc.rdf" type="application/rdf+xml" rel="metadata">
<link rel="canonical" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-046j-introduction-to-algorithms-sma-5503-fall-2005/video-lectures/lecture-15-dynamic-programming-longest-common-subsequence">
<link rel="apple-touch-icon" href="../../../common/images/apple-touch-icon.png">
<script type="text/javascript" src="../../../common/scripts/jquery.js"></script><script type="text/javascript" src="../../../common/scripts/ocw-media-utils-offline.js"></script><script type="text/javascript" src="../../../common/scripts/ocw-offline.js"></script><script type="text/javascript" src="../../../common/scripts/jquery.bubblepopup.min.js"></script><script type="text/javascript" src="../../../common/scripts/jquery-ui.min.js"></script><script type="text/javascript" src="../../../common/scripts/jquery.jscrollpane.min.js"></script><script type="text/javascript" src="../../../common/scripts/bubble-popup-offline.js"></script><script type="text/javascript">
      $(document).ready(function() {
        $("#tabs").tabs();
        IpadScroller();
      });
    </script>
</head>
<body itemscope itemtype="http://schema.org/WebPage">
        
	

        <div id="top">
			<div id="grid">
				
				
					
<div id="portletwrapper-6f63772e746f70706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d686561646572" class="portletWrapper kssattr-portlethash-6f63772e746f70706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d686561646572">
<div class="portletStaticText portlet-static-site-header">
<!--googleoff: index-->
<div class="grid_6 alpha" role="banner" id="banner"><a href="http://ocw.mit.edu/"><img class="logo" alt="MIT OpenCourseWare, Massachusetts Institute of Technology" src="../../../common/images/ocw_mast.png"></a></div>
<div class="grid_6 omega" role="form toolbar" id="subscribe">
<div class="module">
<table class="social"><tbody><tr>
<td class="socialbutton"><a href="http://ocw.mit.edu/subscribe/index.htm?utm_source=header"><img src="../../../common/images/trans.gif" alt="An icon depicting an envelope.">Subscribe to the OCW Newsletter</a></td>
            <td>
<a href="https://plus.google.com/104567381989352550847/posts"><img alt="Click to visit our Google+ page." src="../../../common/images/icon_gp.png"></a><a href="https://www.pinterest.com/mitocw/pins/"><img alt="Click to visit our Pinterest page." src="../../../common/images/icon_pin.png"></a><a href="http://facebook.com/mitocw"><img alt="Click to visit our Facebook page." src="../../../common/images/icon_fb.png"></a><a href="http://twitter.com/mitocw"><img alt="Click to visit our Twitter feed." src="../../../common/images/icon_tw.png"></a>
</td>
        </tr></tbody></table>
</div>
<p class="helplinks"><a href="http://ocw.mit.edu/help">Help</a>   |   <a href="../../../common/jsp/feedback.htm">Contact Us</a></p>
</div>
<div class="clear"> </div>
<!--googleon: index-->
</div>

</div>





<!--googleoff: index-->
<div id="mega" role="navigation" class="grid_8 alpha">        
	<ul id="menu">
<li id="menu_home">
            <a href="http://ocw.mit.edu/"><img src="../../../common/images/top-nav_home.png" class="home_icon" alt="Click for site home page."></a><!-- Begin Home Item -->
        </li>
<!-- End Home Item -->        
        <li class="selected">
            <a href="#" class="drop">Find Courses</a><!-- Begin 5 columns Item -->
            <div class="dropdown_5columns-a mega-courses">                    
                <div class="col_1a">
                    <div class="row_1a">
                        <div class="quart">
                            <h2 class="nav">Find courses by:</h2>
                            <ul class="nav-bullet find_by">
<li><a href="http://ocw.mit.edu/courses/find-by-topic/">Topic</a></li>
                                <li><a href="http://ocw.mit.edu/courses/find-by-number/">MIT Course Number</a></li>
                                <li><a href="http://ocw.mit.edu/courses/find-by-department/">Department</a></li>
                            </ul>
<ul style="margin-top: 88px;" class="nav-bullet find_by">
<li style="font-weight: normal; font-size: 1em;"><a href="http://ocw.mit.edu/courses/">View All Courses</a></li>
							</ul>
</div>
                        <div class="quart">
                            <h2 class="nav">Collections</h2>
                            <ul class="nav-bullet">
<li><a href="http://ocw.mit.edu/courses/audio-video-courses/">Audio/Video Lectures</a></li>
                                <li><a href="http://ocw.mit.edu/courses/online-textbooks/">Online Textbooks</a></li>
                                <li><a href="http://ocw.mit.edu/courses/new-courses/">New Courses</a></li>
                                <li><a href="http://ocw.mit.edu/courses/most-visited-courses/">Most Visited Courses</a></li>
                                <li><a href="http://ocw.mit.edu/courses/ocw-scholar/">OCW Scholar Courses</a></li>
                                <li><a href="http://ocw.mit.edu/courses/this-course-at-mit/">This Course at MIT</a></li>
                                <li><a href="http://ocw.mit.edu/resources/">Supplemental Resources</a></li>
                            </ul>
</div>
                        <div class="clear"> </div>
                    </div>
                    <div class="row_1b">
                        <h2 class="nav">Cross-Disciplinary Topic Lists</h2>
                        <div class="quart">
                        <ul class="nav-bullet">
<li><a href="http://ocw.mit.edu/courses/energy-courses">Energy</a></li>
                            <li><a href="http://ocw.mit.edu/courses/entrepreneurship">Entrepreneurship</a></li>
                            <li><a href="http://ocw.mit.edu/courses/environment-courses">Environment</a></li>
                        </ul>
</div>    
                        <div class="quart">
                        <ul class="nav-bullet">
<li><a href="http://ocw.mit.edu/courses/intro-programming">Introductory Programming</a></li>
                            <li><a href="http://ocw.mit.edu/courses/life-sciences">Life Sciences</a></li>
                            <li><a href="http://ocw.mit.edu/courses/transportation-courses">Transportation</a></li>
                        </ul>
</div>
                        <div class="clear"> </div>
                    </div>
                    <div class="clear"> </div>
                </div>
                <div class="col_1b">
                    <h2 class="nav">Translated Courses</h2>
                    <ul class="nav-bullet">
<li><a href="http://ocw.mit.edu/courses/translated-courses/traditional-chinese">繁體字 / Traditional Chinese</a></li>
                        <li><a href="http://ocw.mit.edu/courses/translated-courses/spanish">Español / Spanish</a></li>
                        <li><a href="http://ocw.mit.edu/courses/translated-courses/portuguese">Português / Portuguese</a></li>
                        <li><a href="http://ocw.mit.edu/courses/translated-courses/persian">فارسی / Persian</a></li>
                        <li><a href="http://ocw.mit.edu/courses/translated-courses/turkish">Türkçe / Turkish</a></li>
                        <li><a href="http://ocw.mit.edu/courses/translated-courses/korean">(비디오)한국 / Korean</a></li>
                        <li><a href="http://ocw.mit.edu/courses/translated-courses">More...</a></li>
                    </ul>
</div>
            </div>
        </li>
        <li>
            <a href="" class="drop">About</a>
            <div class="dropdown_1column-a">
                <div class="col_1">
                    <ul class="nav-bullet mega-div-bottom">
<li><a href="http://ocw.mit.edu/about/">About MIT OpenCourseWare</a></li>
                    </ul>
<ul class="nav-bullet mega-div-bottom">
<li><a href="http://ocw.mit.edu/about/site-statistics/">Site Stats</a></li>
                        <li><a href="http://ocw.mit.edu/about/ocw-stories/">OCW Stories</a></li>                        
                    </ul>
<ul class="nav-bullet">
<li><a href="http://ocw.mit.edu/about/media-coverage/">Media Coverage</a></li>
                        <li><a href="http://ocw.mit.edu/about/newsletter/">Newsletter</a></li>                        
                    </ul>
</div>
            </div>  
        </li>    
        <li>
            <a href="" class="drop">Donate</a>        
            <div class="dropdown_1column-a">
                    <div class="col_1">
                        <ul class="nav-bullet mega-div-bottom">
<li><a href="http://ocw.mit.edu/donate/">Make a Donation</a></li>
                            <li><a href="http://ocw.mit.edu/donate/why-donate/">Why Donate?</a></li>
                            <li><a href="http://ocw.mit.edu/donate/our-supporters/">Our Supporters</a></li>
                            <li><a href="http://ocw.mit.edu/donate/other-ways-to-contribute/">Other Ways to Contribute</a></li>
                            <li><a href="http://ocw.mit.edu/donate/shop-ocw">Shop OCW</a></li>
                        </ul>
<ul class="nav-bullet">
<li><a href="http://ocw.mit.edu/support/">Become a Corporate Sponsor</a></li>
                        </ul>
</div>
            </div>            
        </li>        
        <li>
            <a href="" class="drop">Featured Sites</a>        
            <div class="dropdown_1column-a">
                <div class="col_1">
                    <ul class="nav-bullet mega-div-bottom">
<li><a href="http://ocw.mit.edu/high-school/">Highlights for High School</a></li>
                        <li><a href="http://ocw.mit.edu/educator/">OCW Educator</a></li>
                        <li><a href="http://ocw.mit.edu/courses/crosslinks/">MIT Crosslinks and OCW</a></li>                        
                    </ul>
<ul class="nav-bullet mega-div-top">
<li><a href="http://ocw.mit.edu/ans7870/featured/mitx-courses-on-edx.htm">MITx Courses on edX</a></li>
                        <li><a href="http://teachingexcellence.mit.edu/">Teaching Excellence at MIT</a></li>
						<li><a href="http://www.oeconsortium.org/">Open Education Consortium</a></li>
                    </ul>
</div>
            </div>            
        </li>
    </ul>
</div>
<div id="search" role="search" class="grid_4 omega">
    
    <form method="get" action="../../../common/search/AdvancedSearch.htm">
     	 <table class="search"><tbody><tr>
<td class="black"><input type="text" onblur="fillSearchBox()" onfocus="clearSearchBox()" maxlength="255" value="Search" name="q" class="greytext searchField" id="terms"></td> 			 
                    <td class="black"><input type="image" src="../../../common/images/button_search.png" name="btnG" class="sub_button"></td>			 
                    <td class="text2"><a href="../../../common/search/AdvancedSearch.htm">Advanced<br>Search</a></td>
                </tr></tbody></table>
</form>
</div>
<div class="clear"></div>
<!--googleon: index-->
<!-- *end header* -->  

				
				
			</div>
<!-- top grid end -->
		</div>
<!-- top end -->
			
		<div id="center_media">
      	<div id="grid">
      		<div id="left">
        		<div id="breadcrumb_media">
                	<p>

    <a href="http://ocw.mit.edu/">Home</a>
    
        »
        
    
    
        
            <a href="http://ocw.mit.edu/courses">Courses</a>
            
                »
                
            
            
         
    
    
        
            <a href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science">Electrical Engineering and Computer Science</a>
            
                »
                
            
            
         
    
    
        
            <a href="../../../contents/index.htm">Introduction to Algorithms (SMA 5503)</a>
            
                »
                
            
            
         
    
    
        
            <a href="../../../contents/video-lectures/index.htm">Video Lectures</a>
            
                »
                
            
            
         
    
    
        
            
            
            Lecture 15: Dynamic Programming, Longest Common Subsequence
         
    
</p>

            	</div>
            	<div class="clear"></div>
        		<div id="media_title">
        		<h1 class="title" itemprop="name" property="dct:title">
        <span class="" id="parent-fieldname-title">
            Lecture 15: Dynamic Programming, Longest Common Subsequence
        </span>
    </h1>
        		</div>
           		<div class="clear"></div>
           		<div id="course_wrapper_media">
           			<div id="course_nav">
           				<script language="javascript" type="text/javascript">
function toggleMenu(objID) {
  if (!document.getElementById) return;
  var ob = document.getElementById(objID);
  ob.className = (ob.className == 'selected')?'': 'selected';
}
function toggleClass(id)
{
  var divtoggleClass= document.getElementById(id);
  divtoggleClass.className = (divtoggleClass.className == 'mO')?'mC': 'mO';
  return false;
}
function changeAlt(id)
{
  id.alt = (id.alt == 'Expand Menu')?'Collapse Menu' : 'Expand Menu';
  id.title = (id.title == 'Expand Menu')?'Collapse Menu' : 'Expand Menu';
}
</script><!--Left Nav Starts --><ul>
<li class="">
			   			<a href="../../../contents/index.htm">
		                  Course Home  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/syllabus/index.htm">
		                  Syllabus  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/calendar/index.htm">
		                  Calendar  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/readings/index.htm">
		                  Readings  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/assignments/index.htm">
		                  Assignments  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/exams/index.htm">
		                  Exams  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="selected">
			   			<a href="../../../contents/video-lectures/index.htm">
		                  Video Lectures  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    
		    
         	
	<!--second tal block close-->  
	
</ul>
<!--Left Nav Ends -->
</div>
           			<div id="course_inner_media">
      					 
        <div class="" id="parent-fieldname-text">
            
            
        </div>
    
      					 

<script type="text/javascript">var caption_embed_1 ={'English - US': '/courses/electrical-engineering-and-computer-science/6-046j-introduction-to-algorithms-sma-5503-fall-2005/video-lectures/lecture-15-dynamic-programming-longest-common-subsequence/V5hZoJ6uK-s.srt'}</script><div id="media-embed">
         <div class="attention_message" id="embed_1">
<p>Flash and JavaScript are required for this feature.</p>
<p>Download the video from <a href="https://itunes.apple.com/us/itunes-u/id341597754">iTunes U</a> or the <a href="http://www.archive.org/download/MIT6.046JF05MPEG4/ocw-6.046-07nov2005-220k.mp4">Internet Archive</a>.</p>
</div>
     </div>
    
     <script type="text/javascript">ocw_embed_chapter_media('embed_1', 'http://www.youtube.com/v/V5hZoJ6uK-s', 'youtube', '/courses/electrical-engineering-and-computer-science/6-046j-introduction-to-algorithms-sma-5503-fall-2005/video-lectures/lecture-15-dynamic-programming-longest-common-subsequence', 'http://img.youtube.com/vi/V5hZoJ6uK-s/0.jpg',0,0, 'http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-046j-introduction-to-algorithms-sma-5503-fall-2005/video-lectures/lecture-15-dynamic-programming-longest-common-subsequence/V5hZoJ6uK-s.srt')</script><div id="transcript1"></div>
				 <script type="text/javascript">setThreePlayTranscriptPlugin(2, 1004249)</script><script type="text/javascript" src="http://p3.3playmedia.com/p3.js"></script><div id="media_resource_next_prev_nav" style="margin-top: 1em;">
        <p>
        
            <a href="../../../contents/video-lectures/lecture-14-competitive-analysis-self-organizing-lists/index.htm">
                <img src="../../../common/images/btn_previous_resource.png" style="margin: 0 30px 0 50px;" alt="Previous track" title="Previous track"></a>
     	
     	
        
            <a href="../../../contents/video-lectures/lecture-16-greedy-algorithms-minimum-spanning-trees/index.htm"> 
                <img src="../../../common/images/btn_next_resource.png" alt="Next track" title="Next track"></a>
       
       </p>
     </div>
 


<script type="text/javascript">
		window.onload=function(){
		init();
		
		}
		var tabLinks = new Array();
		var contentDivs = new Array();
		function init() {
		  // Grab the tab links and content divs from the page
		  var tabListItems = document.getElementById('tabs').childNodes;
		  for ( var i = 0; i < tabListItems.length; i++ ) {
			if ( tabListItems[i].nodeName == "LI" ) {
			  var tabLink = getFirstChildWithTagName( tabListItems[i], 'A' );
			  var id = getHash( tabLink.getAttribute('href') );
			  tabLinks[id] = tabLink;
			  contentDivs[id] = document.getElementById( id );
			}
		  }
		  // Assign onclick events to the tab links, and
		  // highlight the first tab
		  var i = 0;
		  for ( var id in tabLinks ) {
			tabLinks[id].onclick = showTab;
			tabLinks[id].onfocus = function() { this.blur() };
			if ( i == 0 ) tabLinks[id].className = 'selected';
			i++;
		  }
		  // Hide all content divs except the first
		  var i = 0;
		  for ( var id in contentDivs ) {
			if ( i != 0 ) contentDivs[id].className = 'tabContent hide';
			i++;
		  }
		}
		function showTab() {
		  var selectedId = getHash( this.getAttribute('href') );
		  // Highlight the selected tab, and dim all others.
		  // Also show the selected content div, and hide all others.
		  for ( var id in contentDivs ) {
			if ( id == selectedId ) {
			  tabLinks[id].className = 'selected';
			  contentDivs[id].className = 'tabContent';
			} else {
			  tabLinks[id].className = '';
			  contentDivs[id].className = 'tabContent hide';
			}
		  }
		  // Stop the browser following the link
		  return false;
		}
		function getFirstChildWithTagName( element, tagName ) {
		  for ( var i = 0; i < element.childNodes.length; i++ ) {
			if ( element.childNodes[i].nodeName == tagName ) return element.childNodes[i];
		  }
		}
		function getHash( url ) {
		  var hashPos = url.lastIndexOf ( '#' );
		  return url.substring( hashPos + 1 );
		}
 </script><div id="media_tabs">
     
        <ul id="tabs">
<li class="first">
                <a href="#vid_about" class="selected">About this Video</a>
            </li>
            <li class="">
                <a href="#vid_index" class="">Playlist</a>
            </li>
            <li class="">
                <a href="#vid_playlist" class="">Related Resources</a>
            </li>
            <li class="">
                <a href="#vid_related" class="">Transcript</a>
            </li>
            <li class="">
                <a href="#vid_transcript" class="">Download this Video</a>
            </li>
        </ul>
<div id="vid_about" itemprop="description" class="tabContent">
<p><strong>Topics covered:</strong> Dynamic Programming, Longest Common Subsequence</p>  <p><strong>Instructors:</strong> Prof. Erik Demaine, Prof. Charles Leiserson</p>
</div>
        <div id="vid_index" itemprop="description" class="tabContent hide">
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-1-administrivia-introduction-analysis-of-algorithms-insertion-sort-mergesort/index.htm">
<img src="../../../contents/video-lectures/lecture-1-administrivia-introduction-analysis-of-algorithms-insertion-sort-mergesort/6_046J_lec01_th.jpg" title="Lecture 1: Administrivia; Introduction; Analysis of Algorithms, Insertion Sort, Mergesort" alt="Lecture 1: Administrivia; Introduction; Analysis of Algorithms, Insertion Sort, Mergesort"><p>Lecture 1: Administrivia; I...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-2-asymptotic-notation-recurrences-substitution-master-method/index.htm">
<img src="../../../contents/video-lectures/lecture-2-asymptotic-notation-recurrences-substitution-master-method/6_046J_lec02_th.jpg" title="Lecture 2: Asymptotic Notation; Recurrences; Substitution, Master Method" alt="Lecture 2: Asymptotic Notation; Recurrences; Substitution, Master Method"><p>Lecture 2: Asymptotic Notat...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-3-divide-and-conquer-strassen-fibonacci-polynomial-multiplication/index.htm">
<img src="../../../contents/video-lectures/lecture-3-divide-and-conquer-strassen-fibonacci-polynomial-multiplication/6_046J_lec03_th.jpg" title="Lecture 3: Divide-and-Conquer: Strassen, Fibonacci, Polynomial Multiplication" alt="Lecture 3: Divide-and-Conquer: Strassen, Fibonacci, Polynomial Multiplication"><p>Lecture 3: Divide-and-Conqu...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-4-quicksort-randomized-algorithms/index.htm">
<img src="../../../contents/video-lectures/lecture-4-quicksort-randomized-algorithms/6_046J_lec04_th.jpg" title="Lecture 4: Quicksort, Randomized Algorithms" alt="Lecture 4: Quicksort, Randomized Algorithms"><p>Lecture 4: Quicksort, Rando...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-5-linear-time-sorting-lower-bounds-counting-sort-radix-sort/index.htm">
<img src="../../../contents/video-lectures/lecture-5-linear-time-sorting-lower-bounds-counting-sort-radix-sort/6_046J_lec05_th.jpg" title="Lecture 5: Linear-time Sorting: Lower Bounds, Counting Sort, Radix Sort" alt="Lecture 5: Linear-time Sorting: Lower Bounds, Counting Sort, Radix Sort"><p>Lecture 5: Linear-time Sort...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-6-order-statistics-median/index.htm">
<img src="../../../contents/video-lectures/lecture-6-order-statistics-median/6_046J_lec06_th.jpg" title="Lecture 6: Order Statistics, Median" alt="Lecture 6: Order Statistics, Median"><p>Lecture 6: Order Statistics...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-7-hashing-hash-functions/index.htm">
<img src="../../../contents/video-lectures/lecture-7-hashing-hash-functions/6_046J_lec07_th.jpg" title="Lecture 7: Hashing, Hash Functions" alt="Lecture 7: Hashing, Hash Functions"><p>Lecture 7: Hashing, Hash Fu...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-8-universal-hashing-perfect-hashing/index.htm">
<img src="../../../contents/video-lectures/lecture-8-universal-hashing-perfect-hashing/6_046J_lec08_th.jpg" title="Lecture 8: Universal Hashing, Perfect Hashing" alt="Lecture 8: Universal Hashing, Perfect Hashing"><p>Lecture 8: Universal Hashin...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-9-relation-of-bsts-to-quicksort-analysis-of-random-bst/index.htm">
<img src="../../../contents/video-lectures/lecture-9-relation-of-bsts-to-quicksort-analysis-of-random-bst/6_046J_lec09_th.jpg" title="Lecture 9: Relation of BSTs to Quicksort - Analysis of Random BST" alt="Lecture 9: Relation of BSTs to Quicksort - Analysis of Random BST"><p>Lecture 9: Relation of BSTs...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-10-red-black-trees-rotations-insertions-deletions/index.htm">
<img src="../../../contents/video-lectures/lecture-10-red-black-trees-rotations-insertions-deletions/6_046J_lec10_th.jpg" title="Lecture 10: Red-black Trees, Rotations, Insertions, Deletions" alt="Lecture 10: Red-black Trees, Rotations, Insertions, Deletions"><p>Lecture 10: Red-black Trees...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-11-augmenting-data-structures-dynamic-order-statistics-interval-trees/index.htm">
<img src="../../../contents/video-lectures/lecture-11-augmenting-data-structures-dynamic-order-statistics-interval-trees/6_046J_lec11_th.jpg" title="Lecture 11: Augmenting Data Structures, Dynamic Order Statistics, Interval Trees" alt="Lecture 11: Augmenting Data Structures, Dynamic Order Statistics, Interval Trees"><p>Lecture 11: Augmenting Data...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-12-skip-lists/index.htm">
<img src="../../../contents/video-lectures/lecture-12-skip-lists/6_046J_lec12_th.jpg" title="Lecture 12: Skip Lists" alt="Lecture 12: Skip Lists"><p>Lecture 12: Skip Lists</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-13-amortized-algorithms-table-doubling-potential-method/index.htm">
<img src="../../../contents/video-lectures/lecture-13-amortized-algorithms-table-doubling-potential-method/6_046J_lec13_th.jpg" title="Lecture 13: Amortized Algorithms, Table Doubling, Potential Method" alt="Lecture 13: Amortized Algorithms, Table Doubling, Potential Method"><p>Lecture 13: Amortized Algor...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-14-competitive-analysis-self-organizing-lists/index.htm">
<img src="../../../contents/video-lectures/lecture-14-competitive-analysis-self-organizing-lists/6_046J_lec14_th.jpg" title="Lecture 14: Competitive Analysis: Self-organizing Lists" alt="Lecture 14: Competitive Analysis: Self-organizing Lists"><p>Lecture 14: Competitive Ana...</p></a>
</div>
<div class="related-media-thumbnail-nolink">
<div class="now-playing-resource">Now Playing</div>
<img src="../../../contents/video-lectures/lecture-15-dynamic-programming-longest-common-subsequence/6_046J_lec15_th.jpg" title="Lecture 15: Dynamic Programming, Longest Common Subsequence" alt="Lecture 15: Dynamic Programming, Longest Common Subsequence"><p>Lecture 15: Dynamic Program...</p>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-16-greedy-algorithms-minimum-spanning-trees/index.htm">
<img src="../../../contents/video-lectures/lecture-16-greedy-algorithms-minimum-spanning-trees/6_046J_lec16_th.jpg" title="Lecture 16: Greedy Algorithms, Minimum Spanning Trees" alt="Lecture 16: Greedy Algorithms, Minimum Spanning Trees"><p>Lecture 16: Greedy Algorith...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-17-shortest-paths-i-properties-dijkstras-algorithm-breadth-first-search/index.htm">
<img src="../../../contents/video-lectures/lecture-17-shortest-paths-i-properties-dijkstras-algorithm-breadth-first-search/6_046J_lec17_th.jpg" title="Lecture 17: Shortest Paths I: Properties, Dijkstra's Algorithm, Breadth-first Search" alt="Lecture 17: Shortest Paths I: Properties, Dijkstra's Algorithm, Breadth-first Search"><p>Lecture 17: Shortest Paths ...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-18-shortest-paths-ii-bellman-ford-linear-programming-difference-constraints/index.htm">
<img src="../../../contents/video-lectures/lecture-18-shortest-paths-ii-bellman-ford-linear-programming-difference-constraints/6_046J_lec18_th.jpg" title="Lecture 18: Shortest Paths II: Bellman-Ford, Linear Programming, Difference Constraints" alt="Lecture 18: Shortest Paths II: Bellman-Ford, Linear Programming, Difference Constraints"><p>Lecture 18: Shortest Paths ...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-19-shortest-paths-iii-all-pairs-shortest-paths-matrix-multiplication-floyd-warshall-johnson/index.htm">
<img src="../../../contents/video-lectures/lecture-19-shortest-paths-iii-all-pairs-shortest-paths-matrix-multiplication-floyd-warshall-johnson/6_046J_lec19_th.jpg" title="Lecture 19: Shortest Paths III: All-pairs Shortest Paths, Matrix Multiplication, Floyd-Warshall, Johnson" alt="Lecture 19: Shortest Paths III: All-pairs Shortest Paths, Matrix Multiplication, Floyd-Warshall, Johnson"><p>Lecture 19: Shortest Paths ...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-22-advanced-topics/index.htm">
<img src="../../../contents/video-lectures/lecture-22-advanced-topics/6_046J_lec22_th.jpg" title="Lecture 22: Advanced Topics" alt="Lecture 22: Advanced Topics"><p>Lecture 22: Advanced Topics</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-23-advanced-topics-cont./index.htm">
<img src="../../../contents/video-lectures/lecture-23-advanced-topics-cont./6_046J_lec23_th.jpg" title="Lecture 23: Advanced Topics (cont.)" alt="Lecture 23: Advanced Topics (cont.)"><p>Lecture 23: Advanced Topics...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-24-advanced-topics-cont./index.htm">
<img src="../../../contents/video-lectures/lecture-24-advanced-topics-cont./6_046J_lec24_th.jpg" title="Lecture 24: Advanced Topics (cont.)" alt="Lecture 24: Advanced Topics (cont.)"><p>Lecture 24: Advanced Topics...</p></a>
</div>
<div class="related-media-thumbnail">
<a href="../../../contents/video-lectures/lecture-25-advanced-topics-cont.-discussion-of-follow-on-classes/index.htm">
<img src="../../../contents/video-lectures/lecture-25-advanced-topics-cont.-discussion-of-follow-on-classes/6_046J_lec25_th.jpg" title="Lecture 25: Advanced Topics (cont.) - Discussion of Follow-on Classes" alt="Lecture 25: Advanced Topics (cont.) - Discussion of Follow-on Classes"><p>Lecture 25: Advanced Topics...</p></a>
</div>
</div>
        <div id="vid_playlist" itemprop="description" class="tabContent hide">
<h2 class="subhead">Related Resources</h2>
<p>Lecture Notes (<a target="_blank" href="../../../contents/video-lectures/lecture-15-dynamic-programming-longest-common-subsequence/lec15.pdf">PDF</a>)<br><a target="_blank" href="../../../contents/assignments/index.htm">Assignments</a><br><a target="_blank" href="../../../contents/exams/index.htm">Exams</a></p>
</div>
        <div id="vid_related" itemprop="description" class="tabContent hide">
<ul><li><a class="transcript-link" title="Open in a new window." alt="Open in a new window." style="text-decoration: none; font-size: 1.0em;" target="_blank" text-decoration: none font-size: href="../../../contents/video-lectures/lecture-15-dynamic-programming-longest-common-subsequence/V5hZoJ6uK-s.pdf"> Download this transcript - PDF (English - US)</a></li></ul>
<p><span m="7000"> So, the topic today is dynamic programming.</span> <span m="21000">The term programming in the name of this term doesn't refer</span> <span m="25000">to computer programming. OK, programming is an old word</span> <span m="30000">that means any tabular method for accomplishing something.</span> <span m="35000">So, you'll hear about linear programming and dynamic</span> <span m="39000">programming. Either of those,</span> <span m="42000">even though we now incorporate those algorithms in computer</span> <span m="47000">programs, originally computer programming, you were given a</span> <span m="52000">datasheet and you put one line per line of code as a tabular</span> <span m="57000">method for giving the machine instructions as to what to do.</span> <span m="64000">OK, so the term programming is older.</span> <span m="67000">Of course, and now conventionally when you see</span> <span m="71000">programming, you mean software, computer programming.</span> <span m="75000">But that wasn't always the case.</span> <span m="78000">And these terms continue in the literature.</span> <span m="82000">So, dynamic programming is a design technique like other</span> <span m="86000">design techniques we've seen such as divided and conquer.</span> <span m="93000">OK, so it's a way of solving a class of problems rather than a</span> <span m="100000">particular algorithm or something.</span> <span m="103000">So, we're going to work through this for the example of</span> <span m="110000">so-called longest common subsequence problem,</span> <span m="115000">sometimes called LCS, OK, which is a problem that</span> <span m="120000">comes up in a variety of contexts.</span> <span m="126000">And it's particularly important in computational biology,</span> <span m="130000">where you have long DNA strains, and you're trying to</span> <span m="134000">find commonalities between two strings, OK, one which may be a</span> <span m="139000">genome, and one may be various, when people do,</span> <span m="143000">what is that thing called when they do the evolutionary</span> <span m="148000">comparisons? The evolutionary trees,</span> <span m="151000">yeah, right, yeah, exactly,</span> <span m="153000">phylogenetic trees, there you go,</span> <span m="155000">OK, phylogenetic trees. Good, so here's the problem.</span> <span m="164000">So, you're given two sequences, x going from one to m,</span> <span m="174000">and y running from one to n. You want to find a longest</span> <span m="184000">sequence common to both. OK, and here I say a,</span> <span m="192000">not the, although it's common to talk about the longest common</span> <span m="199000">subsequence. Usually the longest comment</span> <span m="204000">subsequence isn't unique. There could be several</span> <span m="209000">different subsequences that tie for that.</span> <span m="215000">However, people tend to, it's one of the sloppinesses</span> <span m="221000">that people will say. I will try to say a,</span> <span m="225000">unless it's unique. But I may slip as well because</span> <span m="231000">it's just such a common thing to just talk about the,</span> <span m="237000">even though there might be multiple.</span> <span m="242000">So, here's an example. Suppose x is this sequence,</span> <span m="247000">and y is this sequence. So, what is a longest common</span> <span m="254000">subsequence of those two sequences?</span> <span m="256000">See if you can just eyeball it.</span> <span m="275000">AB: length two? Anybody have one longer?</span> <span m="285000">Excuse me? BDB, BDB.</span> <span m="291000">BDAB, BDAB, BDAB, anything longer?</span> <span m="302000">So, BDAB: that's the longest one.</span> <span m="309000">Is there another one that's the same length?</span> <span m="320000">Is there another one that ties? BCAB, BCAB, another one?</span> <span m="335000">BCBA, yeah, there are a bunch of them all of length four.</span> <span m="340000">There isn't one of length five. OK, we are actually going to</span> <span m="345000">come up with an algorithm that, if it's correct,</span> <span m="349000">we're going to show it's correct, guarantees that there</span> <span m="354000">isn't one of length five. So all those are,</span> <span m="358000">we can say, any one of these is the longest comment subsequence</span> <span m="363000">of x and y. We tend to use it this way</span> <span m="366000">using functional notation, but it's not a function that's</span> <span m="371000">really a relation. So, we'll say something is an</span> <span m="377000">LCS when really we only mean it's an element,</span> <span m="380000">if you will, of the set of longest common</span> <span m="383000">subsequences. Once again, it's classic</span> <span m="386000">abusive notation. As long as we know what we</span> <span m="389000">mean, it's OK to abuse notation. What we can't do is misuse it.</span> <span m="395000">But abuse, yeah! Make it so it's easy to deal</span> <span m="400000">with. But you have to know what's</span> <span m="403000">going on underneath. OK, so let's see,</span> <span m="407000">so there's a fairly simple brute force algorithm for</span> <span m="413000">solving this problem. And that is,</span> <span m="419000">let's just check every, maybe some of you did this in</span> <span m="430000">your heads, subsequence of x from one to m to see if it's</span> <span m="442000">also a subsequence of y of one to n.</span> <span m="451000">So, just take every subsequence that you can get here,</span> <span m="456000">check it to see if it's in there.</span> <span m="460000">So let's analyze that.</span> <span m="472000">So, to check, so if I give you a subsequence</span> <span m="478000">of x, how long does it take you to check whether it is,</span> <span m="485000">in fact, a subsequence of y? So, I give you something like</span> <span m="494000">BCAB. How long does it take me to</span> <span m="498000">check to see if it's a subsequence of y?</span> <span m="504000">Length of y, which is order n.</span> <span m="508000">And how do you do it? Yeah, you just scan.</span> <span m="514000">So as you hit the first character that matches,</span> <span m="519000">great. Now, if you will,</span> <span m="521000">recursively see whether the suffix of your string matches</span> <span m="526000">the suffix of x. OK, and so, you are just simply</span> <span m="530000">walking down the tree to see if it matches.</span> <span m="534000">You're walking down the string to see if it matches.</span> <span m="539000">OK, then the second thing is, then how many subsequences of x</span> <span m="544000">are there? Two to the n?</span> <span m="548000">x just goes from one to m, two to the m subsequences of x,</span> <span m="555000">OK, two to the m. Two to the m subsequences of x,</span> <span m="560000">OK, one way to see that, you say, well,</span> <span m="565000">how many subsequences are there of something there?</span> <span m="572000">If I consider a bit vector of length m, OK,</span> <span m="575000">that's one or zero, just every position where</span> <span m="579000">there's a one, I take out, that identifies an</span> <span m="582000">element that I'm going to take out.</span> <span m="585000">OK, then that gives me a mapping from each subsequence of</span> <span m="590000">x, from each bit vector to a different subsequence of x.</span> <span m="595000">Now, of course, you could have matching</span> <span m="598000">characters there, that in the worst case,</span> <span m="601000">all of the characters are different.</span> <span m="606000">OK, and so every one of those will be a unique subsequence.</span> <span m="614000">So, each bit vector of length m corresponds to a subsequence.</span> <span m="622000">That's a generally good trick to know.</span> <span m="629000">So, the worst-case running time of this method is order n times</span> <span m="638000">two to the m, which is, since m is in the</span> <span m="643000">exponent, is exponential time. And there's a technical term</span> <span m="652000">that we use when something is exponential time.</span> <span m="659000">Slow: good. OK, very good.</span> <span m="663000">OK, slow, OK, so this is really bad.</span> <span m="666000">This is taking a long time to crank out how long the longest</span> <span m="672000">common subsequence is because there's so many subsequences.</span> <span m="677000">OK, so we're going to now go through a process of developing</span> <span m="683000">a far more efficient algorithm for this problem.</span> <span m="687000">OK, and we're actually going to go through several stages.</span> <span m="694000">The first one is to go through simplification stage.</span> <span m="702000">OK, and what we're going to do is look at simply the length of</span> <span m="712000">the longest common sequence of x and y.</span> <span m="719000">And then what we'll do is extend the algorithm to find the</span> <span m="723000">longest common subsequence itself.</span> <span m="726000">OK, so we're going to look at the length.</span> <span m="730000">So, simplify the problem, if you will,</span> <span m="733000">to just try to compute the length.</span> <span m="736000">What's nice is the length is unique.</span> <span m="739000">OK, there's only going to be one length that's going to be</span> <span m="743000">the longest. OK, and what we'll do is just</span> <span m="747000">focus on the problem of computing the length.</span> <span m="751000">And then we'll do is we can back up from that and figure out</span> <span m="756000">what actually is the subsequence that realizes that length.</span> <span m="763000">OK, and that will be a big simplification because we don't</span> <span m="766000">have to keep track of a lot of different possibilities at every</span> <span m="770000">stage. We just have to keep track of</span> <span m="772000">the one number, which is the length.</span> <span m="774000">So, it's sort of reduces it to a numerical problem.</span> <span m="777000">We'll adopt the following notation.</span> <span m="780000">It's pretty standard notation, but I just want,</span> <span m="784000">if I put absolute values around the string or a sequence,</span> <span m="789000">it denotes the length of the sequence, S.</span> <span m="793000">OK, so that's the first thing. The second thing we're going to</span> <span m="799000">do is, actually, we're going to,</span> <span m="802000">which takes a lot more insight when you come up with a problem</span> <span m="808000">like this, and in some sense,</span> <span m="813000">ends up being the hardest part of designing a good dynamic</span> <span m="819000">programming algorithm from any problem, which is we're going to</span> <span m="827000">actually look not at all subsequences of x and y,</span> <span m="833000">but just prefixes.</span> <span m="846000">OK, we're just going to look at prefixes and we're going to show</span> <span m="853000">how we can express the length of the longest common subsequence</span> <span m="860000">of prefixes in terms of each other.</span> <span m="864000">In particular, we're going to define c of ij</span> <span m="868000">to be the length, the longest common subsequence</span> <span m="874000">of the prefix of x going from one to i, and y of going to one</span> <span m="881000">to j. And what we are going to do is</span> <span m="888000">we're going to calculate c[i,j] for all ij.</span> <span m="896000">And if we do that, how then do we solve the</span> <span m="904000">problem of the longest common of sequence of x and y?</span> <span m="915000">How do we solve the longest common subsequence?</span> <span m="919000">Suppose we've solved this for all I and j.</span> <span m="923000">How then do we compute the length of the longest common</span> <span m="929000">subsequence of x and y? Yeah, c[m,n],</span> <span m="933000">that's all, OK? So then, c of m,</span> <span m="937000">n is just equal to the longest common subsequence of x and y,</span> <span m="944000">because if I go from one to n, I'm done, OK?</span> <span m="950000">And so, it's going to turn out that what we want to do is</span> <span m="956000">figure out how to express to c[m,n], in general,</span> <span m="962000">c[i,j], in terms of other c[i,j].</span> <span m="968000">So, let's see how we do that. OK, so our theorem is going to</span> <span m="978000">say that c[i,j] is just --</span> <span m="1025000">OK, it says that if the i'th character matches the j'th</span> <span m="1030000">character, then i'th character of x matches the j'th character</span> <span m="1037000">of y, then c of ij is just c of I minus one, j minus one plus</span> <span m="1043000">one. And if they don't match,</span> <span m="1046000">then it's either going to be the longer of c[i,</span> <span m="1051000">j-1], and c[i-1, j], OK?</span> <span m="1055000">So that's what we're going to prove.</span> <span m="1058000">And that's going to give us a way of relating the calculation</span> <span m="1064000">of a given c[i,j] to values that are strictly smaller,</span> <span m="1069000">OK, that is at least one of the arguments is smaller of the two</span> <span m="1076000">arguments. OK, and that's going to give us</span> <span m="1080000">a way of being able, then, to understand how to</span> <span m="1085000">calculate c[i,j]. So, let's prove this theorem.</span> <span m="1091000">So, we'll start with a case x[i] equals y of j.</span> <span m="1098000">And so, let's draw a picture here.</span> <span m="1102000">So, we have x here.</span> <span m="1130000">And here is y.</span> <span m="1153000">OK, so here's my sequence, x, which I'm sort of drawing as</span> <span m="1159000">this elongated box, sequence y, and I'm saying that</span> <span m="1165000">x[i] and y[j], those are equal.</span> <span m="1178000">OK, so let's see what that means.</span> <span m="1186000">OK, so let's let z of one to k be, in fact, the longest common</span> <span m="1201000">subsequence of x of one to i, y of one to j,</span> <span m="1212000">where c of ij is equal to k. OK, so the longest common</span> <span m="1223000">subsequence of x and y of one to I and y of one to j has some</span> <span m="1229000">value. Let's call it k.</span> <span m="1232000">And so, let's say that we have some sequence which realizes</span> <span m="1239000">that. OK, we'll call it z.</span> <span m="1242000">OK, so then, can somebody tell me what z of</span> <span m="1248000">k is?</span> <span m="1264000">What is z of k here?</span> <span m="1274000">Yeah, it's actually equal to x of I, which is also equal to y</span> <span m="1278000">of j? Why is that?</span> <span m="1279000">Why couldn't it be some other value?</span> <span m="1301000">Yeah, so you got the right idea.</span> <span m="1303000">So, the idea is, suppose that the sequence</span> <span m="1306000">didn't include this element here at the last element,</span> <span m="1310000">the longest common subsequence. OK, so then it includes a bunch</span> <span m="1315000">of values in here, and a bunch of values in here,</span> <span m="1319000">same values. It doesn't include this or</span> <span m="1323000">this. Well, then I could just tack on</span> <span m="1327000">this extra character and make it be longer, make it k plus one</span> <span m="1333000">because these two match. OK, so if the sequence ended</span> <span m="1338000">before --</span> <span m="1354000">-- just extend it by tacking on x[i].</span> <span m="1360000">OK, it would be fairly simple to just tack on x[i].</span> <span m="1368000">OK, so if that's the case, then if I look at z going one</span> <span m="1378000">up to k minus one, that's certainly a common</span> <span m="1385000">sequence of x of 1 up to, excuse me, of up to i minus</span> <span m="1394000">one. And, y of one up to j minus</span> <span m="1400000">one, OK, because this is a longest common sequence.</span> <span m="1406000">z is a longest common sequence is, from x of one to i,</span> <span m="1413000">y of one to j. And, we know what the last</span> <span m="1418000">character is. It's just x[i],</span> <span m="1421000">or equivalently, y[j].</span> <span m="1423000">So therefore, everything except the last</span> <span m="1427000">character must at least be a common sequence of x of one to i</span> <span m="1433000">minus one, y of one to j minus one.</span> <span m="1437000">Everybody with me? It must be a comment sequence.</span> <span m="1444000">OK, now, what you also suspect? What do you also suspect about</span> <span m="1452000">z of one to k? It's a common sequence of these</span> <span m="1458000">two. Yeah?</span> <span m="1459000">Yeah, it's a longest common sequence.</span> <span m="1466000">So that's what we claim, z of one up to k minus one is</span> <span m="1474000">in fact a longest common subsequence of x of one to i</span> <span m="1482000">minus one, and y of one to j minus one, OK?</span> <span m="1488000">So, let's prove that claim. So, we'll just have a little</span> <span m="1497000">diversion to prove the claim. OK, so suppose that w is a</span> <span m="1509000">longer comment sequence, that is, that the length,</span> <span m="1521000">the w, is bigger than k minus one.</span> <span m="1530000">OK, so suppose we have a longer comment sequence than z of one</span> <span m="1535000">to k minus one. So, it's got to have length</span> <span m="1538000">that's bigger than k minus one if it's longer.</span> <span m="1542000">OK, and now what we do is we use a classic argument you're</span> <span m="1547000">going to see multiple times, not just this week,</span> <span m="1551000">which it will be important for this week, but through several</span> <span m="1556000">lectures. Hence, it's called a cut and</span> <span m="1559000">paste argument. So, the idea is let's take a</span> <span m="1566000">look at w, concatenate it with that last character,</span> <span m="1575000">z of k. so, this is string,</span> <span m="1579000">OK, so that's just my terminology for string</span> <span m="1587000">concatenation. OK, so I take whatever I</span> <span m="1596000">claimed was a longer comment subsequence, and I concatenate z</span> <span m="1608000">of k to it. OK, so that is certainly a</span> <span m="1616000">common sequence of x of one to I minus one, and y of one to j.</span> <span m="1631000">And it has length bigger than k because it's basically,</span> <span m="1638000">what is its length? The length of w is bigger than</span> <span m="1644000">k minus one. I add one character.</span> <span m="1648000">So, this combination here, now, has length bigger that k.</span> <span m="1657000">OK, and that's a contradiction, thereby proving the claim.</span> <span m="1663000">So, I'm simply saying, I claim this.</span> <span m="1667000">Suppose you have a longer one. Well, let me show,</span> <span m="1672000">if I had a longer common sequence for the prefixes where</span> <span m="1678000">we dropped the character from both strings if it was longer</span> <span m="1685000">there, but we would have made the whole thing longer.</span> <span m="1692000">So that can't be. So, therefore,</span> <span m="1696000">this must be a longest common subsequence, OK?</span> <span m="1702000">Questions? Because you are going to need</span> <span m="1707000">to be able to do this kind of proof ad nauseam,</span> <span m="1713000">almost. So, if there any questions,</span> <span m="1719000">let them at me, people.</span> <span m="1722000">OK, so now what we have established is that z one</span> <span m="1727000">through k is a longest common subsequence of the two prefixes</span> <span m="1735000">when we drop the last character. So, thus, we have c of i minus</span> <span m="1745000">one, j minus one is equal to what?</span> <span m="1751000">What's c of i minus one, j minus one?</span> <span m="1771000">k minus one; thank you.</span> <span m="1773000">Let's move on with the class, right, OK, which implies that c</span> <span m="1780000">of ij is just equal to c of I minus one, j minus one plus one.</span> <span m="1787000">So, it's fairly straightforward if you think about what's going</span> <span m="1794000">on there. It's not always as</span> <span m="1797000">straightforward in some problems as it is for longest common</span> <span m="1804000">subsequence. The idea is,</span> <span m="1808000">so I'm not going to go through the other cases.</span> <span m="1813000">They are similar. But, in fact,</span> <span m="1816000">we've hit on one of the two hallmarks of dynamic</span> <span m="1821000">programming. So, by hallmarks,</span> <span m="1824000">I mean when you see this kind of structure in a problem,</span> <span m="1830000">there's a good chance that dynamic programming is going to</span> <span m="1836000">work as a strategy. The dynamic programming</span> <span m="1841000">hallmark is the following.</span> <span m="1855000">This is number one. And that is the property of</span> <span m="1862000">optimal substructure. OK, what that says is an</span> <span m="1869000">optimal solution to a problem, and by this,</span> <span m="1876000">we really mean problem instance.</span> <span m="1881000">But it's tedious to keep saying problem instance.</span> <span m="1891000">A problem is generally, in computer science,</span> <span m="1895000">viewed as having an infinite number of instances typically,</span> <span m="1902000">OK, so sorting is a problem. A sorting instance is a</span> <span m="1908000">particular input. OK, so we're really talking</span> <span m="1913000">about problem instances, but I'm just going to say</span> <span m="1919000">problem, OK? So, when you have an optimal</span> <span m="1924000">solution to a problem, contains optimal solutions to</span> <span m="1929000">subproblems. OK, and that's worth drawing a</span> <span m="1937000">box around because it's so important.</span> <span m="1942000">OK, so here, for example,</span> <span m="1945000">if z is a longest common subsequence of x and y,</span> <span m="1953000">OK, then any prefix of z is a longest common subsequence of a</span> <span m="1975000">prefix of x, and a prefix of y, OK?</span> <span m="1989000">So, this is basically what it says.</span> <span m="1992000">I look at the problem, and I can see that there is</span> <span m="1996000">optimal substructure going on. OK, in this case,</span> <span m="2001000">and the idea is that almost always, it means that there's a</span> <span m="2006000">cut and paste argument you could do to demonstrate that,</span> <span m="2012000">OK, that if the substructure were not optimal,</span> <span m="2016000">then you'd be able to find a better solution to the overall</span> <span m="2021000">problem using cut and paste. OK, so this theorem,</span> <span m="2029000">now, gives us a strategy for being able to compute longest</span> <span m="2037000">comment subsequence.</span> <span m="2064000">Here's the code; oh wait.</span> <span m="2078000">OK, so going to ignore base cases in this,</span> <span m="2081000">if --</span> <span m="2144000">And we will return the value of the longest common subsequence.</span> <span m="2154000">It's basically just implementing this theorem.</span> <span m="2162000">OK, so it's either the longest comment subsequence if they</span> <span m="2166000">match. It's the longest comment</span> <span m="2169000">subsequence of one of the prefixes where you drop that</span> <span m="2174000">character for both strengths and add one because that's the</span> <span m="2178000">matching one. Or, you drop a character from</span> <span m="2182000">x, and it's the longest comment subsequence of that.</span> <span m="2186000">Or you drop a character from y, whichever one of those is</span> <span m="2191000">longer. That ends up being the longest</span> <span m="2194000">comment subsequence. OK, so what's the worst case</span> <span m="2203000">for this program? What's going to happen in the</span> <span m="2212000">worst case? Which of these two clauses is</span> <span m="2220000">going to cause us more headache? The second clause:</span> <span m="2229000">why the second clause? Yeah, you're doing two LCS</span> <span m="2232000">sub-calculations here. Here, you're only doing one.</span> <span m="2236000">Not only that, but you get to decrement both</span> <span m="2239000">indices, whereas here you've basically got to,</span> <span m="2242000">you only get to decrement one index, and you've got to</span> <span m="2246000">calculate two of them. So that's going to generate the</span> <span m="2249000">tree. So, and the worst case,</span> <span m="2254000">x of i is not equal to x of j for all i and j.</span> <span m="2262000">So, let's draw a recursion tree for this program to sort of get</span> <span m="2272000">an understanding as to what is going on to help us.</span> <span m="2282000">And, I'm going to do it with m equals seven,</span> <span m="2286000">and n equals six. OK, so we start up the top with</span> <span m="2292000">my two indices being seven and six.</span> <span m="2296000">And then, in the worst case, we had to execute these.</span> <span m="2302000">So, this is going to end up being six, six,</span> <span m="2307000">and seven, five for indices after the first call.</span> <span m="2314000">And then, this guy is going to split.</span> <span m="2317000">And he's going to produce five, six here, decrement the first</span> <span m="2324000">index, I. And then, if I keep going down</span> <span m="2328000">here, we're going to get four, six and five,</span> <span m="2332000">five. And these guys keep extending</span> <span m="2336000">here. I get six five,</span> <span m="2338000">five five, six four, OK?</span> <span m="2342000">Over here, I'm going to get decrement the first index,</span> <span m="2348000">six five, and I get five five, six four, and these guys keep</span> <span m="2355000">going down. And over here,</span> <span m="2357000">I get seven four. And then we get six four,</span> <span m="2362000">seven three, and those keep going down.</span> <span m="2367000">So, we keep just building this tree out.</span> <span m="2373000">OK, so what's the height of this tree?</span> <span m="2378000">Not of this one for the particular value of m and n,</span> <span m="2386000">but in terms of m and n. What's the height of this tree?</span> <span m="2394000">It's the max of m and n. You've got the right,</span> <span m="2401000">it's theta of the max. It's not the max.</span> <span m="2407000">Max would be, in this case,</span> <span m="2410000">you're saying it has height seven.</span> <span m="2414000">But, I think you can sort of see, for example,</span> <span m="2418000">along a path like this that, in fact, I've only,</span> <span m="2423000">after going three levels, reduced m plus n,</span> <span m="2428000">good, very good, m plus n.</span> <span m="2432000">So, height here is m plus n. OK, and its binary.</span> <span m="2439000">So, the height: that implies the work is</span> <span m="2445000">exponential in m and n. All that work,</span> <span m="2451000">and are we any better off than the brute force algorithm?</span> <span m="2461000">Not really. And, our technical term for</span> <span m="2465000">this is slow. OK, and we like speed.</span> <span m="2469000">OK, we like fast. OK, but I'm sure that some of</span> <span m="2474000">you have observed something interesting about this tree.</span> <span m="2480000">Yeah, there's a lot of repeated work here.</span> <span m="2485000">Right, there's a lot of repeated work.</span> <span m="2491000">In particular, this whole subtree,</span> <span m="2494000">and this whole subtree, OK, they are the same.</span> <span m="2500000">That's the same subtree, the same subproblem that you</span> <span m="2506000">are solving. OK, you can even see over here,</span> <span m="2511000">there is even similarity between this whole subtree and</span> <span m="2518000">this whole subtree. OK, so there's lots of repeated</span> <span m="2523000">work. OK, and one thing is,</span> <span m="2528000">if you want to do things fast, don't keep doing the same</span> <span m="2533000">thing. OK, don't keep doing the same</span> <span m="2537000">thing. When you find you are repeating</span> <span m="2541000">something, figure out a way of not doing it.</span> <span m="2545000">So, that brings up our second hallmark for dynamic</span> <span m="2550000">programming.</span> <span m="2570000">And that's a property called overlapping subproblems,</span> <span m="2587000">OK? OK, recursive solution contains</span> <span m="2599000">many, excuse me, contains a small number of</span> <span m="2613000">distinct subproblems repeated many times.</span> <span m="2630000">And once again, this is important enough to put</span> <span m="2634000">a box around. I don't put boxes around too</span> <span m="2638000">many things. Maybe I should put our boxes</span> <span m="2641000">around things. This is definitely one to put a</span> <span m="2645000">box around, OK? So, for example,</span> <span m="2648000">so here we have a recursive solution.</span> <span m="2652000">This tree is exponential in size.</span> <span m="2655000">It's two to the m plus n in height, in size,</span> <span m="2659000">in the total number of problems if I actually implemented like</span> <span m="2664000">that. But how many distinct</span> <span m="2667000">subproblems are there? m times n, OK?</span> <span m="2673000">So, the longest comment subsequence, the subproblem</span> <span m="2682000">space contains m times n, distinct subproblems.</span> <span m="2689000">OK, and then this is a small number compared with two to the</span> <span m="2700000">m plus n, or two to the n, or two to the m,</span> <span m="2707000">or whatever. OK, this is small,</span> <span m="2713000">OK, because for each subproblem, it's characterized</span> <span m="2719000">by an I and a j. An I goes from one to m,</span> <span m="2724000">and j goes from one to n, OK?</span> <span m="2727000">There aren't that many different subproblems.</span> <span m="2734000">It's just the product of the two.</span> <span m="2736000">So, here's an improved algorithm, which is often a good</span> <span m="2741000">way to solve it. It's an algorithm called a</span> <span m="2745000">memo-ization algorithm.</span> <span m="2756000">And, this is memo-ization, not memorization because what</span> <span m="2762000">you're going to do is make a little memo whenever you solve a</span> <span m="2769000">subproblem. Make a little memo that says I</span> <span m="2774000">solved this already. And if ever you are asked for</span> <span m="2779000">it rather than recalculating it, say, oh, I see that.</span> <span m="2785000">I did that before. Here's the answer,</span> <span m="2790000">OK? So, here's the code.</span> <span m="2792000">It's very similar to that code. So, it basically keeps a table</span> <span m="2800000">around of c[i,j]. It says, what we do is we</span> <span m="2804000">check. If the entry for c[i,j] is nil,</span> <span m="2807000">we haven't computed it, then we compute it.</span> <span m="2811000">And, how do we compute it? Just the same way we did</span> <span m="2815000">before.</span> <span m="2854000">OK, so this whole part here, OK, is exactly what we have had</span> <span m="2865000">before. It's the same as before.</span> <span m="2871000">And then, we just return c[i,j].</span> <span m="2879000">If we don't bother to keep recalculating,</span> <span m="2883000">OK, so if it's nil, we calculate it.</span> <span m="2887000">Otherwise, we just return it. It's not calculated,</span> <span m="2892000">calculate and return it. Otherwise, just return it:</span> <span m="2898000">OK, pretty straightforward code.</span> <span m="2901000">OK.</span> <span m="2913000">OK, now the tricky thing is how much time does it take to</span> <span m="2918000">execute this?</span> <span m="2938000">This takes a little bit of thinking.</span> <span m="2944000">Yeah? Yeah, it takes order MN.</span> <span m="2950000">OK, why is that? Yeah, but I have to look up</span> <span m="2958000">c[i,j]. I might call c[i,j] a bunch of</span> <span m="2965000">times. When I'm doing this,</span> <span m="2969000">I'm still calling it recursively.</span> <span m="2978000">Yeah, so you have to, so each recursive call is going</span> <span m="2983000">to look at, and the worst-case, say, is going to look at the</span> <span m="2990000">max of these two things. Well, this is going to involve</span> <span m="2995000">a recursive call, and a lookup.</span> <span m="3000000">So, this might take a fair amount of effort to calculate.</span> <span m="3005000">I mean, you're right, and your intuition is right.</span> <span m="3009000">Let's see if we can get a more precise argument,</span> <span m="3013000">why this is taking order m times n.</span> <span m="3017000">What's going on here? Because not every time I call</span> <span m="3021000">this is it going to just take me a constant amount of work to do</span> <span m="3027000">this. Sometimes it's going to take me</span> <span m="3030000">a lot of work. Sometimes I get lucky,</span> <span m="3034000">and I return it. So, your intuition is dead on.</span> <span m="3041000">It's dead on. We just need a little bit more</span> <span m="3047000">articulate explanation, so that everybody is on board.</span> <span m="3055000">Try again? Good, at most three times,</span> <span m="3061000">yeah. OK, so that's one way to look</span> <span m="3064000">at it. Yeah.</span> <span m="3065000">There is another way to look at it that's kind of what you are</span> <span m="3069000">expressing there is an amortized, a bookkeeping,</span> <span m="3072000">way of looking at this. What's the amortized cost?</span> <span m="3075000">You could say what the amortized cost of calculating</span> <span m="3078000">one of these, where basically whenever I call</span> <span m="3081000">it, I'm going to charge a constant amount for looking up.</span> <span m="3084000">And so, I could get to look up whatever is in here to call the</span> <span m="3088000">things. But if it, in fact,</span> <span m="3091000">so in some sense, this charge here,</span> <span m="3095000">of calling it and returning it, etc., I charged that to my</span> <span m="3101000">caller. OK, so I charged these lines</span> <span m="3104000">and this line to the caller. And I charge the rest of these</span> <span m="3110000">lines to the c[i,j] element. And then, the point is that</span> <span m="3115000">every caller basically only ends up being charged for a constant</span> <span m="3122000">amount of stuff. OK, to calculate one c[i,j],</span> <span m="3127000">it's only an amortized constant amount of stuff that I'm</span> <span m="3131000">charging to that calculation of i and j, that calculation of i</span> <span m="3136000">and j. OK, so you can view it in terms</span> <span m="3139000">of amortized analysis doing a bookkeeping argument that just</span> <span m="3143000">says, let me charge enough to calculate my own,</span> <span m="3147000">do all my own local things plus enough to look up the value in</span> <span m="3152000">the next level and get it returned.</span> <span m="3156000">OK, and then if it has to go off and calculate,</span> <span m="3160000">well, that's OK because that's all been charged to a different</span> <span m="3166000">ij at that point. So, every cell only costs me a</span> <span m="3170000">constant amount of time that order MN cells total of order</span> <span m="3176000">MN. OK: constant work per entry.</span> <span m="3180000">OK, and you can sort of use an amortized analysis to argue</span> <span m="3184000">that. How much space does it take?</span> <span m="3187000">We haven't usually looked at space, but here we are going to</span> <span m="3192000">start looking at space. That turns out,</span> <span m="3195000">for some of these algorithms, to be really important.</span> <span m="3200000">How much space do I need, storage space?</span> <span m="3203000">Yeah, also m times n, OK, to store the c[i,j] table.</span> <span m="3208000">OK, the rest, storing x and y,</span> <span m="3210000">OK, that's just m plus n. So, that's negligible,</span> <span m="3215000">but mostly I need the space m times n.</span> <span m="3217000">So, this memo-ization type algorithm is a really good</span> <span m="3221000">strategy in programming for many things where,</span> <span m="3224000">when you have the same parameters, you're going to get</span> <span m="3228000">the same results. It doesn't work in programs</span> <span m="3231000">where you have a side effect, necessarily,</span> <span m="3233000">that is, when the calculation for a given set of parameters</span> <span m="3237000">might be different on each call. But for something which is</span> <span m="3243000">essentially like a functional programming type of environment,</span> <span m="3248000">then if you've calculated it once, you can look it up.</span> <span m="3253000">And, so this is very helpful. But, it takes a fair amount of</span> <span m="3259000">space, and it also doesn't proceed in a very orderly way.</span> <span m="3264000">So, there is another strategy for doing exactly the same</span> <span m="3269000">calculation in a bottom-up way. And that's what we call dynamic</span> <span m="3274000">programming. OK, the idea is to compute the</span> <span m="3282000">table bottom-up. I think I'm going to get rid</span> <span m="3289000">of, I think what we'll do is we'll just use,</span> <span m="3296000">actually I think what I'm going to do is use this board.</span> <span m="3333000">OK, so here's the idea. What we're going to do is look</span> <span m="3338000">at the c[i,j] table and realize that there's actually an orderly</span> <span m="3345000">way of filling in the table. This is sort of a top-down with</span> <span m="3351000">memo-ization. OK, but there's actually a way</span> <span m="3355000">we can do it bottom up. So, here's the idea.</span> <span m="3360000">So, let's make our table. OK, so there's x.</span> <span m="3367000">And then, there's y. And, I'm going to initialize</span> <span m="3378000">the empty string. I didn't cover the base cases</span> <span m="3388000">for c[i,j], but c of zero meaning a prefix with no</span> <span m="3399000">elements in it. The prefix of that with</span> <span m="3405000">anything else, the length is zero.</span> <span m="3408000">OK, so that's basically how I'm going to bound the borders here.</span> <span m="3413000">And now, what I can do is just use my formula,</span> <span m="3417000">which I've conveniently erased up there, OK,</span> <span m="3420000">to compute what is the longest common subsequence,</span> <span m="3424000">length of the longest comment subsequence from this character</span> <span m="3429000">in y, and this character in x up to this character.</span> <span m="3435000">So here, for example, they don't match.</span> <span m="3439000">So, it's the maximum of these two values.</span> <span m="3444000">Here, they do match. OK, so it says it's one plus</span> <span m="3449000">the value here. And, I'm going to draw a line.</span> <span m="3454000">Whenever I'm going to get a match, I'm going to draw a line</span> <span m="3458000">like that, indicating that I had that first case,</span> <span m="3461000">the case where they had a good match.</span> <span m="3464000">And so, all I'm doing is applying that recursive formula</span> <span m="3467000">from the theorem that we proved. So here, it's basically they</span> <span m="3472000">don't match. So, it's the maximum of those</span> <span m="3474000">two. Here, they match.</span> <span m="3476000">So, it's one plus that guy. Here, they don't match.</span> <span m="3481000">So, it's basically the maximum of these two.</span> <span m="3486000">Here, they don't match. So it's the maximum.</span> <span m="3491000">So, it's one plus that guy. So, everybody understand how I</span> <span m="3497000">filled out that first row? OK, well that you guys can</span> <span m="3503000">help. OK, so this one is what?</span> <span m="3507000">Just call it out. Zero, good.</span> <span m="3512000">One, because it's the maximum, one, two, right.</span> <span m="3521000">This one, now, gets from there,</span> <span m="3527000">two, two. OK, here, zero,</span> <span m="3532000">one, because it's the maximum of those two.</span> <span m="3543000">Two, two, two, good.</span> <span m="3555000">One, one, two, two, two, three,</span> <span m="3574000">three. One, two, three,</span> <span m="3588000">get that line, three, four,</span> <span m="3600250">OK. One there, three,</span> <span m="3605974">three, four, good, four.</span> <span m="3610000">OK, and our answer: four.</span> <span m="3614199">So this is blindingly fast code if you code this up,</span> <span m="3623125">OK, because it gets to use the fact that modern machines in</span> <span m="3633275">particular do very well on regular strides through memory.</span> <span m="3645000">So, if you're just plowing through memory across like this,</span> <span m="3650012">OK, and your two-dimensional array is stored in that order,</span> <span m="3655024">which it is, otherwise you go this way,</span> <span m="3658308">stored in that order. This can really fly in terms of</span> <span m="3662802">the speed of the calculation. So, how much time did it take</span> <span m="3671948">us to do this? Yeah, order MN,</span> <span m="3677897">theta MN. Yeah?</span> <span m="3680769">We'll talk about space in just a minute.</span> <span m="3690000">OK, so hold that question. Good question,</span> <span m="3693875">good question, already, wow,</span> <span m="3696491">good, OK, how do I now figure out, remember,</span> <span m="3700657">we had the simplification. We were going to just calculate</span> <span m="3706179">the length. OK, it turns out I can now</span> <span m="3709764">figure out a particular sequence that matches it.</span> <span m="3714415">And basically, I do that.</span> <span m="3718000">I can reconstruct the longest common subsequence by tracing</span> <span m="3724932">backwards. So essentially I start here.</span> <span m="3729474">Here I have a choice because this one was dependent on,</span> <span m="3735928">since it doesn't have a bar here, it was dependent on one of</span> <span m="3742980">these two. So, let me go this way.</span> <span m="3748000">OK, and now I have a diagonal element here.</span> <span m="3753444">So what I'll do is simply mark the character that appeared in</span> <span m="3761222">those positions as I go this way.</span> <span m="3765370">I have three here. And now, let me keep going,</span> <span m="3771203">three here, and now I have another one.</span> <span m="3776129">So that means this character gets selected.</span> <span m="3783000">And then I go up to here, OK, and then up to here.</span> <span m="3788632">And now I go diagonally again, which means that this character</span> <span m="3795643">is selected. And I go to here,</span> <span m="3798977">and then I go here. And then, I go up here and this</span> <span m="3804724">character is selected. So here is my longest common</span> <span m="3810471">subsequence. And this was just one path</span> <span m="3815098">back. I could have gone a path like</span> <span m="3817843">this and gotten a different longest common subsequence.</span> <span m="3822203">OK, so that simplification of just saying, look,</span> <span m="3825997">let me just run backwards and figure it out,</span> <span m="3829468">that's actually pretty good because it means that by just</span> <span m="3833989">calculating the value, then figuring out these back</span> <span m="3838026">pointers to let me reconstruct it is a fairly simple process.</span> <span m="3844000">OK, if I had to think about that to begin with,</span> <span m="3850075">it would have been a much bigger mess.</span> <span m="3854962">OK, so the space, I just mentioned,</span> <span m="3859452">was order MN because we still need the table.</span> <span m="3865264">So, you can actually do the min of m and n.</span> <span m="3872000">OK, to get to your question, how do you do the min of m and</span> <span m="3877970">n? Diagonal stripes won't give you</span> <span m="3881367">min of m and n. That'll give you the sum of m</span> <span m="3885897">and n. So, going in stripes,</span> <span m="3888676">maybe I'm not quite sure I know what you mean.</span> <span m="3893308">So, you're saying, so what's the order I would do</span> <span m="3898250">here? So, I would start.</span> <span m="3901661">I would do this one first. Then which one would I do?</span> <span m="3906461">This one and this one? And then, this one,</span> <span m="3910246">this one, this one, like this?</span> <span m="3912923">That's a perfectly good order. OK, and so you're saying,</span> <span m="3918000">then, so I'm keeping the diagonal there all the time.</span> <span m="3922800">So, you're saying the length of the diagonal is the min of m and</span> <span m="3928615">n? I think that's right.</span> <span m="3931633">OK, there is another way you can do it that's a little bit</span> <span m="3936068">more straightforward, which is you compare m to n.</span> <span m="3939881">Whichever is smaller, well, first of all,</span> <span m="3942993">let's just do this existing algorithm.</span> <span m="3945871">If I just simply did row by row, I don't need more than a</span> <span m="3950228">previous row. OK, I just need one row at a</span> <span m="3953418">time. So, I can go ahead and compute</span> <span m="3956141">just one row because once I computed the succeeding row,</span> <span m="3960421">the first row is unimportant. And in fact,</span> <span m="3964910">I don't even need the whole row.</span> <span m="3967263">All I need is just the current row that I'm on,</span> <span m="3970754">plus one or two elements of the previous row,</span> <span m="3974093">plus the end of the previous row.</span> <span m="3976522">So, I use a prefix of this row, and an extra two elements,</span> <span m="3980848">and the suffix of this row. So, it's actually,</span> <span m="3984263">you can do it with one row, plus order one element.</span> <span m="3988058">And then, I could do it either running vertically or running</span> <span m="3992535">horizontally, whichever one gives me the</span> <span m="3995495">smaller space. OK, and it might be that your</span> <span m="4000303">diagonal trick would work there too.</span> <span m="4003084">I'd have to think about that. Yeah?</span> <span m="4005785">Ooh, that's a good question. So, you can do the calculation</span> <span m="4010392">of the length, and run row plus order one</span> <span m="4013570">elements. OK, and our exercise,</span> <span m="4017415">and this is a hard exercise, OK, so that a good one to do is</span> <span m="4024203">to do small space and allow you to reconstruct the LCS because</span> <span m="4031221">the naÔve way that we were just doing it, it's not clear how you</span> <span m="4038469">would go backwards from that because you've lost the</span> <span m="4044336">information. OK, so this is actually a very</span> <span m="4049168">interesting and tricky problem. And, it turns out it succumbs</span> <span m="4057182">of all things to divide and conquer, OK, rather than some</span> <span m="4063329">more straightforward tabular thing.</span> <span m="4067060">OK: so very good practice, for example,</span> <span m="4071231">for the upcoming take home quiz, OK, which is all design</span> <span m="4077268">and cleverness type quiz. OK, so this is a good one for</span> <span m="4083493">people to take on. So, this is basically the</span> <span m="4087191">tabular method that's called dynamic programming.</span> <span m="4091319">OK, memo-ization is not dynamic programming, even though it's</span> <span m="4096479">related. It's memo-ization.</span> <span m="4098714">And, we're going to see a whole bunch of other problems that</span> <span m="4103788">succumb to dynamic programming approaches.</span> <span m="4107314">It's a very cool method, and on the homework,</span> <span m="4111098">so let me just mention the homework again.</span> <span m="4116000">On the homework, we're going to look at a</span> <span m="4118216">problem called the edit distance problem.</span> <span m="4120434">Edit distance is you are given two strings.</span> <span m="4122763">And you can imagine that you're typing in a keyboard with one of</span> <span m="4126256">the strings there. And what you have to do is by</span> <span m="4128862">doing inserts, and deletes,</span> <span m="4130303">and replaces, and moving the cursor around,</span> <span m="4132631">you've got to transform one string to the next.</span> <span m="4135182">And, each of those operations has a cost.</span> <span m="4137399">And your job is to minimize the cost of transforming the one</span> <span m="4140671">string into the other. This actually turns out also to</span> <span m="4145565">be useful for computational biology applications.</span> <span m="4149537">And, in fact, there have been editors,</span> <span m="4152600">screen editors, text editors,</span> <span m="4154917">that implement algorithms of this nature in order to minimize</span> <span m="4159881">the number of characters that have to be sent as IO in and out</span> <span m="4164931">of the system. So, the warning is,</span> <span m="4168568">you better get going on your programming on problem one on</span> <span m="4173274">the homework today if at all possible because whenever I</span> <span m="4177816">assign programming, since we don't do that as sort</span> <span m="4181862">of a routine thing, I'm just concerned for some</span> <span m="4185660">people that there will not be able to get things like the</span> <span m="4190283">input and output to work, and so forth.</span> <span m="4193422">We have example problems, and such, on the website.</span> <span m="4197550">And we also have, you can write it in any</span> <span m="4200853">language you want, including Matlab,</span> <span m="4203743">Python, whatever your favorite, the solutions will be written</span> <span m="4208697">in Java and Python. OK, so the fastest solutions</span> <span m="4214425">are likely to be written in c. OK, you can also do it in</span> <span m="4219188">assembly language if you care to.</span> <span m="4221960">You laugh. I used to be in assembly</span> <span m="4224905">language programmer back in the days of yore.</span> <span m="4228716">OK, so I do encourage people to get started on this because let</span> <span m="4234086">me mention, the other thing is that this particular problem on</span> <span m="4239370">this problem set is an absolutely mandatory problem.</span> <span m="4245000">OK, all the problems are mandatory, but as you know you</span> <span m="4249662">can skip them and it doesn't hurt you too much if you only</span> <span m="4254583">skip one or two. This one, you skip,</span> <span m="4257605">hurts big time: one letter grade.</span> <span m="4260367">It must be done.</span> </p>
</div>
        <div id="vid_transcript" itemprop="description" class="tabContent hide">
<h2 class="subhead">Free Downloads</h2>
<h3 class="subsubhead">Video</h3>
<ul>
<li>iTunes U (<a href="https://itunes.apple.com/us/itunes-u/id341597754">MP4 - 148MB</a>)</li>
<li>Internet Archive (<a href="http://www.archive.org/download/MIT6.046JF05MPEG4/ocw-6.046-07nov2005-220k.mp4">MP4 - 290MB</a>)</li>
</ul>
<br><h3 class="subsubhead">Free Streaming</h3>
<ul><li><a href="http://videolectures.net/mit6046jf05_introduction_algorithms/">VideoLectures.net</a></li></ul>
<br><h3 class="subsubhead">Subtitle</h3>
<ul><li>English - US (<a href="../../../contents/video-lectures/lecture-15-dynamic-programming-longest-common-subsequence/V5hZoJ6uK-s.srt">SRT</a>)</li></ul>
</div>
    
   </div>  




      					 
        <div class="" id="parent-fieldname-bottom_html_area">
            
            
        </div>
    
                    </div>
<!--Course_inner_chip tag close -->
           		</div>
<!--Course_wrapper tag close --> 
            </div>
<!--left tag close -->
            <div id="right">
                <!--Begin Right Portion -->
                    <div>
    
<div id="portletwrapper-6f63772e7269676874746f70706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a646f6e617465" class="portletWrapper kssattr-portlethash-6f63772e7269676874746f70706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a646f6e617465">
<div class="portletStaticText portlet-static-donate"><p class="zero"><a href="http://ocw.mit.edu/donate"><img src="../../../common/images/button_donate-now.png" alt="Donate Now." class="donate"></a></p></div>

</div>




</div>

                	<div>
    



</div>


        <div class="" id="parent-fieldname-rsi_top_html_area">
            
            
        </div>
    

<!-- RSI google ad space-->


<div id="google_ads">    
    <script type="text/javascript" src="http://partner.googleadservices.com/gampad/google_service.js"></script><script type="text/javascript">GS_googleAddAdSenseService("ca-pub-6588555046597237");GS_googleEnableAllServices();</script><script type="text/javascript">GA_googleAddSlot("ca-pub-6588555046597237", "VIDEO_INDIVIDUAL_SLOT_A_DL");GA_googleAddSlot("ca-pub-6588555046597237", "VIDEO_INDIVIDUAL_SLOT_B_DL");GA_googleAddSlot("ca-pub-6588555046597237", "VIDEO_INDIVIDUAL_SLOT_C_DL");</script><script type="text/javascript">GA_googleFetchAds();</script><script language="javascript" type="text/javascript">
GA_googleAddAttr("TYPE","HOUSE");
GA_googleAddAttr("DEPARTMENT","6");
GA_googleAddAttr("CRS_BEG2","04");
GA_googleAddAttr("CRS_END","6J");
GA_googleAddAttr("SESSION","F");
GA_googleAddAttr("YEAR","05");
</script><script type="text/javascript">GA_googleFillSlot("VIDEO_INDIVIDUAL_SLOT_A_DL");</script><script type="text/javascript">GA_googleFillSlot("VIDEO_INDIVIDUAL_SLOT_B_DL");</script><script type="text/javascript">GA_googleFillSlot("VIDEO_INDIVIDUAL_SLOT_C_DL");</script>
</div>

<!-- End RSI ads--> 

<div>
    



</div>

            </div>
<!--Right div close -->
            <div class="clear"></div> 
        </div>
<!--grid tag close --> 
      </div>
		
		<div id="bottom">
			<div id="grid">
				
<div id="portletwrapper-6f63772e626f74746f6d706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d666f6f746572" class="portletWrapper kssattr-portlethash-6f63772e626f74746f6d706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d666f6f746572">
<div class="portletStaticText portlet-static-site-footer">
<!--googleoff: index--> <div id="bottom"><div id="grid">
<!-- *begin footer* --> <div role="navigation sitemap" id="footer">
<div class="grid_2 alpha" id="foot-c1">
<h4 class="footer">Find Courses</h4> <ul class="foot-bullet">
<li><a href="http://ocw.mit.edu/courses/find-by-topic/">Find by Topic</a></li>     <li><a href="http://ocw.mit.edu/courses/find-by-number/">Find by Course Number</a></li>     <li><a href="http://ocw.mit.edu/courses/find-by-department/">Find by Department</a></li>     <li><a href="http://ocw.mit.edu/courses/audio-video-courses/">Audio/Video Courses</a></li>     <li><a href="http://ocw.mit.edu/courses/subtitled/">Courses with Subtitles</a></li>     <li><a href="http://ocw.mit.edu/courses/online-textbooks/">Online Textbooks</a></li>     <li><a href="http://ocw.mit.edu/courses/new-courses/">New Courses</a></li>     <li><a href="http://ocw.mit.edu/courses/most-visited-courses/">Most Visited Courses</a></li>     <li><a href="http://ocw.mit.edu/courses/ocw-scholar/">OCW Scholar Courses</a></li>     <li><a href="http://ocw.mit.edu/courses/this-course-at-mit/">This Course at MIT</a></li>     <li><a href="http://ocw.mit.edu/resources/">Supplemental Resources</a></li>     <li><a href="http://ocw.mit.edu/courses/translated-courses/">Translated Courses</a></li>     <li><a href="http://ocw.mit.edu/courses/">View All Courses</a></li> </ul>
</div> <div class="grid_2" id="foot-c2">
<h4 class="footer">About</h4> <ul class="foot-bullet">
<li><a href="http://ocw.mit.edu/about/">About OpenCourseWare</a></li>     <li><a href="http://ocw.mit.edu/about/site-statistics/">Site Stats</a></li>     <li><a href="http://ocw.mit.edu/about/ocw-stories/">OCW Stories</a></li>     <li><a href="http://ocw.mit.edu/about/media-coverage/">Media Coverage</a></li>     <li><a href="http://ocw.mit.edu/about/newsletter/">Newsletter</a></li>     <li><a href="http://ocw.mit.edu/about/media-coverage/press-releases/">Press Releases</a></li> </ul>
</div> <div class="grid_2" id="foot-c3">
<h4 class="footer">Donate</h4> <ul class="foot-bullet">
<li><a href="http://ocw.mit.edu/donate">Make a Donation</a></li>     <li><a href="http://ocw.mit.edu/donate/why-donate/">Why Donate?</a></li>     <li><a href="http://ocw.mit.edu/donate/our-supporters/">Our Supporters</a></li>     <li><a href="http://ocw.mit.edu/donate/other-ways-to-contribute/">Other Ways to Contribute</a></li>     <li><a href="http://ocw.mit.edu/donate/shop-ocw/">Shop OCW</a></li>     <li><a href="http://ocw.mit.edu/support/">Become a Corporate Sponsor</a></li> </ul>
</div> <div class="grid_2" id="foot-c4">
<h4 class="footer">Featured Sites</h4> <ul class="foot-bullet">
<li><a href="http://ocw.mit.edu/high-school/">Highlights for High School</a></li>     <li><a href="http://ocw.mit.edu/educator/">OCW Educator</a></li>     <li><a href="http://ocw.mit.edu/courses/crosslinks/">MIT Crosslinks and OCW</a></li>     <li><a href="http://ocw.mit.edu/ans7870/featured/mitx-courses-on-edx.htm">MITx Courses on edX</a></li>     <li><a href="http://teachingexcellence.mit.edu/">Teaching Excellence at MIT</a></li>     <li><a href="http://www.oeconsortium.org/">Open Education Consortium</a></li> </ul>
<h4 style="margin-top: 14px;" class="footer">Tools</h4> <ul class="foot-bullet">
<li><a href="http://ocw.mit.edu/help/">Help &amp; FAQs</a></li>     <li><a href="../../../common/jsp/feedback.htm">Contact Us</a></li>     <li><a href="../../../common/search/AdvancedSearch.htm">Advanced Search</a></li>     <li><a href="http://ocw.mit.edu/help/site-map/">Site Map</a></li>     <li><a href="../../../common/terms/index.htm">Privacy &amp; Terms of Use</a></li>     <li><a href="http://ocw.mit.edu/help/rss/">RSS Feeds</a></li> </ul>
</div> <div class="grid_4 omega" id="foot-c5">
<h4 class="footer">Our Corporate Supporters</h4> <!-- HOME_CORP_LOGO_1 --> <div class="sponsors_google_ads_even" id="div-gpt-ad-1388181177156-0"><script type="text/javascript">
googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-0'); });
</script></div> <!-- HOME_CORP_LOGO_2 --> <div class="sponsors_google_ads_odd" id="div-gpt-ad-1388181177156-1"><script type="text/javascript">
googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-1'); });
</script></div> <!-- HOME_CORP_LOGO_3 --> <div class="sponsors_google_ads_even" id="div-gpt-ad-1388181177156-2"><script type="text/javascript">
googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-2'); });
</script></div> <!-- HOME_CORP_LOGO_4 --> <div class="sponsors_google_ads_odd" id="div-gpt-ad-1388181177156-3"><script type="text/javascript">
googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-3'); });
</script></div> <!-- HOME_CORP_LOGO_5 --> <div class="sponsors_google_ads_even" id="div-gpt-ad-1388181177156-4"><script type="text/javascript">
googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-4'); });
</script></div> <!-- HOME_CORP_LOGO_6 --> <div class="sponsors_google_ads_odd" id="div-gpt-ad-1388181177156-5"><script type="text/javascript">
googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-5'); });
</script></div>
</div> <div class="grid_12 alpha omega" style="border-top: thin solid #d5c9ba; padding-top: 24px; margin-bottom: 10px; text-align: center;"><p style="font-family: TitilliumText22LRegular,Verdana; text-align: center; font-size: 1.1em;">Support for <span style="letter-spacing: 0.5px;"><strong>MIT OPENCOURSEWARE'S 15th anniversary</strong></span> is provided by <a href="http://www.sapientnitro.com/en-us.html#home"><img style="width: 145px; height: 35px; vertical-align: middle; margin-left: 7px;" alt="SapientNitro logo and nameplate." src="../../../common/images/logo_sapient.png"></a></p></div> <div itemtype="http://schema.org/CollegeOrUniversity" itemscope="" itemprop="publisher" class="grid_12 alpha omega">
<h4 style="border-top: thin solid #d5c9ba; padding-top: 10px; margin-bottom: 10px;" class="footer">About <span itemprop="name">MIT OpenCourseWare</span>
</h4> <p itemprop="description" style="color: #999; font-size: 1em; line-height: 1.5em; margin-top: 10px;">MIT OpenCourseWare makes the materials used in the teaching of almost all of MIT's subjects available on the Web, free of charge. With more than 2,200 courses available, OCW is delivering on the promise of open sharing of knowledge. <a href="http://ocw.mit.edu/about/">Learn more »</a></p>
</div> <div style="border-top: none;" class="grid_12 alpha omega" id="foot-copy">
<a href="http://web.mit.edu"><img style="width: 195; height: 44;" alt="Massachusetts Institute of Technology logo and name." src="../../../common/images/logo_mit.png"></a><a href="http://odl.mit.edu"><img style="width: 289; height: 54; vertical-align: top;" alt="MIT Office of Digital Learning logo and name." src="http://ocw.mit.edu/images/logo_odl.png"></a><a href="http://www.oeconsortium.org/"><img style="width: 219px; height: 59px; vertical-align: top;" alt="Open Education Consortium logo." src="http://ocw.mit.edu/images/logo_oec.png"></a><a itemprop="useRightsUrl" rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/"><img style="width: 126px; height: 44px; margin-right: 0; margin-left: 13px;" alt="Creative Commons logo with terms BY-NC-SA." src="../../../common/images/cc_by-nc-sa.png"></a> <p class="copyright">© 2001–2015<br> Massachusetts Institute of Technology</p> <p style="font-size: 0.9em; margin-bottom: 15px;">Your use of the MIT OpenCourseWare site and materials is subject to our <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/">Creative Commons License</a> and other <a rel="cc:morePermissions" href="../../../common/terms/index.htm">terms of use</a>.</p>
</div>
</div>
</div></div> <!--googleon: index-->
</div>

</div>





                
			</div> <!-- bottom grid end -->
		</div>
<!-- bottom end -->
		
		
   </body>
</html>
