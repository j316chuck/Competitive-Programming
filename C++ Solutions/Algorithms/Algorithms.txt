GENERAL DFS:
Conditions: Graph problem, Traversals, Game Theory, DP Memoization, Brute force recursion
Run Time: 100 x 100 = max usually, (can be O(n) if floodfill)
Indications: Small graph, traverse all possibilities, find all possible sequences
Other Notes: Construct graph/determine what to dfs (hard), dfs (easy), often memoize (medium), floodfill!
(You can return a value), (You can also choose to relax or not relax the recursion)...
May keep visited[] array (hard)
http://www.geeksforgeeks.org/applications-of-depth-first-search/

Further Problems involving DFS:
Floodfill:
Indications: Maze/Path finding
Notes: Keep visited[] array, implementation with for loop

Bipartite Graph:
Indications: Two color
Notes: DFS with stack ... like in Java contest. 

Check Cycle: 
Indications: Directed graph
Notes: Dfs implementation with visited[]


Iterative Implementation: When implementing with stack, difference between bfs is that if statement goes first! think about it why?

BFS:
Conditions: Graph problem, traversals
Run Time: O(N) Up to 5000 x 5000
Indications:  SHORTEST PATH!!!!! indications include same transition state costs, chess board, hopping from one state to another, game where
there is only one form of transition
Other Notes: Construct graph (hardest part), put into queue (easy), traverse with conditions(medium)

Union Find:
Conditions: graph, check if in the same tree... NOT FOR DIRECTED GRAPHS!!! (link cut tree if directed)
Run Time: O(N log N)
Indications: can determine number of components in a graph, you only want one component usually
Other Notes: Usually use if you can categorize problems by sets or graphs... do you want to know if a kid is in a certain set...
https://www.topcoder.com/community/data-science/data-science-tutorials/disjoint-set-data-structures/ friends, check cycle for graph!

Prim:
Conditions: Can have negative weights, Cannot be directed graph!
Run Time: O(E log V)
Indications: Minimum Cost, All components (Vertices covered)! Find the minimum spanning tree, find total cost of going from point a back to point a
Other Notes: (It is a tree) V-1 edges. Cool min cut property!!! Use in general cases

Kruskal:
Conditions: Can have negative weights, Cannot be directed graph!
Run Time: O(ElogV) on implementation + sorting = O(E log E)
Indications: Minimum Cost, All components (Vertices covered)! Find the minimum spanning tree, find total cost of going from point a back to point a
Other Notes: Union find algorithm! can do size[f(y)]+=size[f(x)], Implementation easier

Dijstrka (SSP):
Conditions: Can be bidirectional or directed graph, cannot have negative weights!
Run Time: O(E log V)
Indications: Pretty Obvious = find the shortest path from one vertex to another. Hard part is mapping graph to problem
Other Notes: Can not handle negative weights

BellMan Ford (SSP):
COnditions: Check for negative cycles and handle negative weights
RunTime: O(EV)
Indications: Think Dijstrka + DP = Bellman Ford
Other Notes: Can handle negative weights and detect negative cycles

Topological Sort: (Note on all graph problems... you can change them to fit into other variations of graphs)
Conditions: (Directed Acyclic Graph), Graph Problem, Find a linear ordering... Can make it best ordering with dfs approach...
Run Time: O(E+V)
Indications: Given a specific ordering!!! Find a linear ordering of vertices...
Other Notes: Use queue based approach ... or you can use recursive based approach.
(February 2013 msched)


Euler's Tour:
Conditions: Can be directed or undirected graph... undirected graph = trickier implementation
For undirected graphs: Euler's cycle/circuit = 1. start and end on same point 2. every vertice has even degree.
For undirected graphs: Euler's path = 1. you must have 0 or 2 odd and everything else be even. 2. All vertices visited
For directed graphs: Euler's cycle = 1. All vertices must have in degree = out degree 2. All vertices must be part of a SCC.
For directed graphs: Euler's path = 1. All vertices must have in degree = out degree except two which must be 1 out degree greater than in degree by 1 (start)
and 1 in degree greater than out degree by 1 end vertex...
http://www.graph-magics.com/articles/euler.php
Use the same algorithm for directed graph as undirected because you can...
Run Time: O(V + E)
Indications: Visits all edges!!! once (pretty obvious when this type of problem comes up)
Other notes: undirected graph is trickier... because you can't go back same edge twice use hashset to account for, note when visits all edges...

SCC (Kosaraju):
Conditions: Directed graph. should contain cycles, (not bidirectional)
Run Time: O(n+m) running time x 2
Indications: Find strongly connected components, connected subgraphs, how many graphs can go from one to the other
Other Notes: comes out in topological sorting

SCC (Tarjan) (directed)
Conditions: Directed graph. should be cyclic, (not bidirectional)
Run Time: O(n+m) running time
Indications: Find strongly connected components, connected subgraphs, how many graphs can go from one to the other, think friends problem...
Other Notes: comes out in topological sorting, used to find all subcycles in a graph. Tarjan's when you condense graph it becomes
an acyclic directed graph. acyclic graphs have at least 1 node with in degree = 0; When you can travel from x to any other y

Articulation Points: (undirected and directed) (Cut vertices) (Bridge components) (Useful if you need to find ways to add to path to split it or form more complete graph)
Conditions: Works in undirected graphs (mainly) (should work in directed graph)... has applications to biconnected components (aka every two points has at least 2 paths connecting them = no articulation points)
Run time: O(n+m)
Indications: Used to find bridges, cut points, and if you need to have a tour from one point to another. aka cycle between any two points...
Other notes: Used to find bridges, cut points, and if you need to have a tour from one point to another. aka cycle between any two points...
Can be directed or undirected...
bridges: strictly greater no root so just 1. low[v] > disc[u]
cut points: 1. root condition 2. low[v] >= disc[u]
Components: biconnected graph = cur points 1. root condition 2. low[v] >= disc[u]
https://www.hackerearth.com/practice/algorithms/graphs/articulation-points-and-bridges/tutorial/

BinarySearch:
Conditions:
Run Time:
Indications:
Other notes:

Hashing:
Conditions:
Run Time:
Indications:
Other notes:

Sets:
Conditions:
Run Time:
Indications:
Other notes:

BIT:
Conditions:
Run Time:
Indications:
Other notes:

Segment Tree:
Conditions:
Run Time:
Indications:
Other notes:

Math Algorithms...


Standard DP:
Conditions:
Run Time:
Indications:
Other Notes:

4D DP:
Conditions:
Run Time:
Indications:
Other Notes:

Interval DP:
Conditions:
Run Time:
Indications:
Other Notes:

